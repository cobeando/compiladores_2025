
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ar.edu.unnoba.comp.compilertp;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import java.lang.StringBuilder;
import ar.edu.unnoba.comp.compilertp.utils.SymbolTable;
import ar.edu.unnoba.comp.compilertp.ast.*;
import ar.edu.unnoba.comp.compilertp.ast.condition.*;
import ar.edu.unnoba.comp.compilertp.ast.expression.*;
import ar.edu.unnoba.comp.compilertp.ast.operation.*;
import ar.edu.unnoba.comp.compilertp.ast.statement.*;
import ar.edu.unnoba.comp.compilertp.ast.factor.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\017\004\000\002\017" +
    "\003\000\002\022\005\000\002\021\003\000\002\021\004" +
    "\000\002\024\005\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\014\003\000\002\014\005\000\002\002\014\000\002\002" +
    "\014\000\002\002\014\000\002\002\014\000\002\002\014" +
    "\000\002\002\014\000\002\013\005\000\002\013\003\000" +
    "\002\030\005\000\002\007\004\000\002\007\005\000\002" +
    "\007\005\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
    "\004\005\000\002\004\005\000\002\004\003\000\002\005" +
    "\004\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\031\006\000\002" +
    "\031\006\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\027\007\000\002\027\011" +
    "\000\002\023\005\000\002\020\003\000\002\020\004\000" +
    "\002\025\006\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\006\047\010\051\005\001\002\000\004\002" +
    "\235\001\002\000\016\013\034\025\032\027\040\035\044" +
    "\037\031\042\035\001\002\000\004\002\uffff\001\002\000" +
    "\004\051\005\001\002\000\014\030\016\031\011\032\013" +
    "\033\017\034\012\001\002\000\004\067\ufffa\001\002\000" +
    "\004\067\ufff7\001\002\000\004\067\ufff6\001\002\000\016" +
    "\030\016\031\011\032\013\033\017\034\012\050\026\001" +
    "\002\000\004\067\021\001\002\000\004\067\ufff8\001\002" +
    "\000\004\067\ufff9\001\002\000\016\030\ufffd\031\ufffd\032" +
    "\ufffd\033\ufffd\034\ufffd\050\ufffd\001\002\000\004\013\022" +
    "\001\002\000\020\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034" +
    "\ufff5\050\ufff5\066\024\001\002\000\016\030\ufffb\031\ufffb" +
    "\032\ufffb\033\ufffb\034\ufffb\050\ufffb\001\002\000\004\013" +
    "\022\001\002\000\016\030\ufff4\031\ufff4\032\ufff4\033\ufff4" +
    "\034\ufff4\050\ufff4\001\002\000\004\051\ufffe\001\002\000" +
    "\016\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\050\ufffc" +
    "\001\002\000\004\002\000\001\002\000\036\011\072\013" +
    "\062\014\051\015\075\016\076\020\071\021\061\024\056" +
    "\043\060\044\077\045\100\046\067\053\074\061\054\001" +
    "\002\000\016\013\034\025\032\027\040\035\044\037\031" +
    "\042\035\001\002\000\026\013\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\035\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\052\uffc2" +
    "\001\002\000\004\005\221\001\002\000\004\061\047\001" +
    "\002\000\026\013\uffc6\025\uffc6\026\uffc6\027\uffc6\035\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\052\uffc6\001\002\000" +
    "\026\013\uffc3\025\uffc3\026\uffc3\027\uffc3\035\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\042\uffc3\052\uffc3\001\002\000\026\013" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\035\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\052\uffbe\001\002\000\026\013\uffc1\025" +
    "\uffc1\026\uffc1\027\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1" +
    "\042\uffc1\052\uffc1\001\002\000\020\013\034\025\032\027" +
    "\040\035\044\037\031\042\035\052\045\001\002\000\026" +
    "\013\uffc0\025\uffc0\026\uffc0\027\uffc0\035\uffc0\037\uffc0\040" +
    "\uffc0\041\uffc0\042\uffc0\052\uffc0\001\002\000\026\013\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\035\uffbf\037\uffbf\040\uffbf\041" +
    "\uffbf\042\uffbf\052\uffbf\001\002\000\004\002\uffc7\001\002" +
    "\000\026\013\uffc5\025\uffc5\026\uffc5\027\uffc5\035\uffc5\037" +
    "\uffc5\040\uffc5\041\uffc5\042\uffc5\052\uffc5\001\002\000\040" +
    "\011\072\013\062\014\051\015\075\016\076\017\063\020" +
    "\071\021\061\024\056\043\060\044\077\045\100\046\067" +
    "\053\074\061\054\001\002\000\062\004\uffd3\006\uffd3\007" +
    "\uffd3\010\uffd3\011\uffd3\013\uffd3\022\uffd3\023\uffd3\025\uffd3" +
    "\026\uffd3\027\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\052\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\062\uffd3\001\002\000\066\004\uffbd\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\013\uffbd\022\uffbd\023\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041" +
    "\uffbd\042\uffbd\052\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\060\uffbd\062\uffbd\064\uffbd\066\uffbd\001\002\000\062\004" +
    "\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\022\uffd4" +
    "\023\uffd4\025\uffd4\026\uffd4\027\uffd4\035\uffd4\036\uffd4\037" +
    "\uffd4\040\uffd4\041\uffd4\042\uffd4\052\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\057\uffd4\060\uffd4\062\uffd4\001\002\000\062\004" +
    "\uffd5\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5\022\uffd5" +
    "\023\uffd5\025\uffd5\026\uffd5\027\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\052\uffd5\054\uffd5\055\uffd5" +
    "\056\uffd5\057\uffd5\060\uffd5\062\uffd5\001\002\000\036\011" +
    "\072\013\062\014\051\015\075\016\076\020\071\021\061" +
    "\024\056\043\060\044\077\045\100\046\067\053\074\061" +
    "\054\001\002\000\056\004\201\006\206\011\204\013\uffe5" +
    "\022\uffe5\023\uffe5\025\uffe5\026\uffe5\027\uffe5\035\uffe5\036" +
    "\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\052\uffe5\054\177" +
    "\055\205\056\200\057\202\060\203\062\uffe5\001\002\000" +
    "\036\011\072\013\062\014\051\015\075\016\076\020\071" +
    "\021\061\024\056\043\060\044\077\045\100\046\067\053" +
    "\074\061\054\001\002\000\062\004\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\013\uffd2\022\uffd2\023\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2" +
    "\042\uffd2\052\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\062\uffd2\001\002\000\004\061\174\001\002\000\062" +
    "\004\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\013\uffd1\022" +
    "\uffd1\023\uffd1\025\uffd1\026\uffd1\027\uffd1\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\041\uffd1\042\uffd1\052\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\060\uffd1\062\uffd1\001\002\000\062" +
    "\004\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\022" +
    "\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6\035\uffd6\036\uffd6" +
    "\037\uffd6\040\uffd6\041\uffd6\042\uffd6\052\uffd6\054\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\062\uffd6\001\002\000\004" +
    "\062\173\001\002\000\036\013\uffe7\022\uffe7\023\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7" +
    "\041\uffe7\042\uffe7\052\uffe7\062\uffe7\001\002\000\062\004" +
    "\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\013\uffd9\022\uffd9" +
    "\023\uffd9\025\uffd9\026\uffd9\027\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\052\uffd9\054\uffd9\055\uffd9" +
    "\056\uffd9\057\uffd9\060\uffd9\062\uffd9\001\002\000\062\004" +
    "\uffdc\006\uffdc\007\167\010\170\011\uffdc\013\uffdc\022\uffdc" +
    "\023\uffdc\025\uffdc\026\uffdc\027\uffdc\035\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\042\uffdc\052\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\062\uffdc\001\002\000\004\061" +
    "\165\001\002\000\010\022\160\023\162\062\161\001\002" +
    "\000\062\004\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\013" +
    "\uffd0\022\uffd0\023\uffd0\025\uffd0\026\uffd0\027\uffd0\035\uffd0" +
    "\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\052\uffd0\054" +
    "\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\062\uffd0\001\002" +
    "\000\034\011\072\013\062\014\051\015\075\016\076\020" +
    "\071\021\061\043\060\044\077\045\100\046\067\053\074" +
    "\061\054\001\002\000\036\013\uffe6\022\uffe6\023\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\052\uffe6\062\uffe6\001\002\000\004\061" +
    "\105\001\002\000\066\004\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\013\uffbb\022\uffbb\023\uffbb\025\uffbb\026\uffbb\027" +
    "\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb" +
    "\052\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb\062" +
    "\uffbb\064\uffbb\066\uffbb\001\002\000\066\004\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\013\uffbc\022\uffbc\023\uffbc\025" +
    "\uffbc\026\uffbc\027\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc" +
    "\041\uffbc\042\uffbc\052\uffbc\054\uffbc\055\uffbc\056\uffbc\057" +
    "\uffbc\060\uffbc\062\uffbc\064\uffbc\066\uffbc\001\002\000\004" +
    "\061\103\001\002\000\004\061\101\001\002\000\004\062" +
    "\102\001\002\000\062\004\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\013\uffcd\022\uffcd\023\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\052\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\062" +
    "\uffcd\001\002\000\004\062\104\001\002\000\062\004\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\011\uffcb\013\uffcb\022\uffcb\023" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\052\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\062\uffcb\001\002\000\004\013\106" +
    "\001\002\000\004\065\107\001\002\000\016\006\115\054" +
    "\111\055\114\056\110\057\112\060\113\001\002\000\004" +
    "\065\152\001\002\000\004\065\145\001\002\000\004\065" +
    "\140\001\002\000\004\065\133\001\002\000\004\065\126" +
    "\001\002\000\004\065\116\001\002\000\004\063\117\001" +
    "\002\000\010\014\051\015\075\016\076\001\002\000\006" +
    "\064\uffec\066\uffec\001\002\000\006\064\123\066\122\001" +
    "\002\000\010\014\051\015\075\016\076\001\002\000\004" +
    "\062\124\001\002\000\062\004\ufff3\006\ufff3\007\ufff3\010" +
    "\ufff3\011\ufff3\013\ufff3\022\ufff3\023\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\052\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3" +
    "\062\ufff3\001\002\000\006\064\uffed\066\uffed\001\002\000" +
    "\004\063\127\001\002\000\010\014\051\015\075\016\076" +
    "\001\002\000\006\064\131\066\122\001\002\000\004\062" +
    "\132\001\002\000\062\004\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\013\ufff1\022\ufff1\023\ufff1\025\ufff1\026\ufff1\027" +
    "\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1" +
    "\052\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\062" +
    "\ufff1\001\002\000\004\063\134\001\002\000\010\014\051" +
    "\015\075\016\076\001\002\000\006\064\136\066\122\001" +
    "\002\000\004\062\137\001\002\000\062\004\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\013\ufff2\022\ufff2\023\ufff2\025" +
    "\ufff2\026\ufff2\027\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\052\ufff2\054\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\062\ufff2\001\002\000\004\063\141\001\002" +
    "\000\010\014\051\015\075\016\076\001\002\000\006\064" +
    "\143\066\122\001\002\000\004\062\144\001\002\000\062" +
    "\004\uffef\006\uffef\007\uffef\010\uffef\011\uffef\013\uffef\022" +
    "\uffef\023\uffef\025\uffef\026\uffef\027\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\052\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\062\uffef\001\002\000\004" +
    "\063\146\001\002\000\010\014\051\015\075\016\076\001" +
    "\002\000\006\064\150\066\122\001\002\000\004\062\151" +
    "\001\002\000\062\004\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\013\ufff0\022\ufff0\023\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\035\ufff0\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\052" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\062\ufff0" +
    "\001\002\000\004\063\153\001\002\000\010\014\051\015" +
    "\075\016\076\001\002\000\006\064\155\066\122\001\002" +
    "\000\004\062\156\001\002\000\062\004\uffee\006\uffee\007" +
    "\uffee\010\uffee\011\uffee\013\uffee\022\uffee\023\uffee\025\uffee" +
    "\026\uffee\027\uffee\035\uffee\036\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\052\uffee\054\uffee\055\uffee\056\uffee\057\uffee" +
    "\060\uffee\062\uffee\001\002\000\062\004\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\013\uffd8\022\uffd8\023\uffd8\025\uffd8" +
    "\026\uffd8\027\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\052\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\062\uffd8\001\002\000\034\011\072\013\062\014" +
    "\051\015\075\016\076\020\071\021\061\043\060\044\077" +
    "\045\100\046\067\053\074\061\054\001\002\000\026\013" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\035\uffcf\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\052\uffcf\001\002\000\034\011\072\013" +
    "\062\014\051\015\075\016\076\020\071\021\061\043\060" +
    "\044\077\045\100\046\067\053\074\061\054\001\002\000" +
    "\036\013\uffe9\022\uffe9\023\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\052" +
    "\uffe9\062\uffe9\001\002\000\036\013\uffe8\022\uffe8\023\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\052\uffe8\062\uffe8\001\002\000\004" +
    "\062\166\001\002\000\062\004\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\013\uffca\022\uffca\023\uffca\025\uffca\026\uffca" +
    "\027\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042" +
    "\uffca\052\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\062\uffca\001\002\000\034\011\072\013\062\014\051\015" +
    "\075\016\076\020\071\021\061\043\060\044\077\045\100" +
    "\046\067\053\074\061\054\001\002\000\034\011\072\013" +
    "\062\014\051\015\075\016\076\020\071\021\061\043\060" +
    "\044\077\045\100\046\067\053\074\061\054\001\002\000" +
    "\062\004\uffda\006\uffda\007\uffda\010\uffda\011\uffda\013\uffda" +
    "\022\uffda\023\uffda\025\uffda\026\uffda\027\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\042\uffda\052\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\062\uffda\001\002\000" +
    "\062\004\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\013\uffdb" +
    "\022\uffdb\023\uffdb\025\uffdb\026\uffdb\027\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\052\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\062\uffdb\001\002\000" +
    "\026\013\uffce\025\uffce\026\uffce\027\uffce\035\uffce\037\uffce" +
    "\040\uffce\041\uffce\042\uffce\052\uffce\001\002\000\004\062" +
    "\175\001\002\000\062\004\uffcc\006\uffcc\007\uffcc\010\uffcc" +
    "\011\uffcc\013\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc" +
    "\052\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\062" +
    "\uffcc\001\002\000\036\013\uffea\022\uffea\023\uffea\025\uffea" +
    "\026\uffea\027\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\042\uffea\052\uffea\062\uffea\001\002\000\034\011\072" +
    "\013\062\014\051\015\075\016\076\020\071\021\061\043" +
    "\060\044\077\045\100\046\067\053\074\061\054\001\002" +
    "\000\034\011\072\013\062\014\051\015\075\016\076\020" +
    "\071\021\061\043\060\044\077\045\100\046\067\053\074" +
    "\061\054\001\002\000\034\011\072\013\062\014\051\015" +
    "\075\016\076\020\071\021\061\043\060\044\077\045\100" +
    "\046\067\053\074\061\054\001\002\000\034\011\072\013" +
    "\062\014\051\015\075\016\076\020\071\021\061\043\060" +
    "\044\077\045\100\046\067\053\074\061\054\001\002\000" +
    "\034\011\072\013\062\014\051\015\075\016\076\020\071" +
    "\021\061\043\060\044\077\045\100\046\067\053\074\061" +
    "\054\001\002\000\034\011\072\013\062\014\051\015\075" +
    "\016\076\020\071\021\061\043\060\044\077\045\100\046" +
    "\067\053\074\061\054\001\002\000\034\011\072\013\062" +
    "\014\051\015\075\016\076\020\071\021\061\043\060\044" +
    "\077\045\100\046\067\053\074\061\054\001\002\000\034" +
    "\011\072\013\062\014\051\015\075\016\076\020\071\021" +
    "\061\043\060\044\077\045\100\046\067\053\074\061\054" +
    "\001\002\000\042\004\201\011\204\013\uffe4\022\uffe4\023" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\040\uffe4\041\uffe4\042\uffe4\052\uffe4\062\uffe4\001\002\000" +
    "\042\004\201\011\204\013\uffe2\022\uffe2\023\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041" +
    "\uffe2\042\uffe2\052\uffe2\062\uffe2\001\002\000\062\004\uffdd" +
    "\006\uffdd\007\167\010\170\011\uffdd\013\uffdd\022\uffdd\023" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\052\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\062\uffdd\001\002\000\042\004\201" +
    "\011\204\013\uffe3\022\uffe3\023\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\042\uffe3" +
    "\052\uffe3\062\uffe3\001\002\000\042\004\201\011\204\013" +
    "\uffe0\022\uffe0\023\uffe0\025\uffe0\026\uffe0\027\uffe0\035\uffe0" +
    "\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0\052\uffe0\062" +
    "\uffe0\001\002\000\062\004\uffde\006\uffde\007\167\010\170" +
    "\011\uffde\013\uffde\022\uffde\023\uffde\025\uffde\026\uffde\027" +
    "\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde" +
    "\052\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060\uffde\062" +
    "\uffde\001\002\000\042\004\201\011\204\013\uffdf\022\uffdf" +
    "\023\uffdf\025\uffdf\026\uffdf\027\uffdf\035\uffdf\036\uffdf\037" +
    "\uffdf\040\uffdf\041\uffdf\042\uffdf\052\uffdf\062\uffdf\001\002" +
    "\000\042\004\201\011\204\013\uffe1\022\uffe1\023\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1" +
    "\041\uffe1\042\uffe1\052\uffe1\062\uffe1\001\002\000\010\022" +
    "\160\023\162\062\220\001\002\000\062\004\uffd7\006\uffd7" +
    "\007\uffd7\010\uffd7\011\uffd7\013\uffd7\022\uffd7\023\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7" +
    "\041\uffd7\042\uffd7\052\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\062\uffd7\001\002\000\036\011\072\013\062" +
    "\014\051\015\075\016\076\020\071\021\061\024\056\043" +
    "\060\044\077\045\100\046\067\053\074\061\054\001\002" +
    "\000\032\013\uffeb\022\160\023\162\025\uffeb\026\uffeb\027" +
    "\uffeb\035\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\052\uffeb" +
    "\001\002\000\020\013\034\025\032\026\224\027\040\035" +
    "\044\037\031\042\035\001\002\000\036\011\072\013\062" +
    "\014\051\015\075\016\076\020\071\021\061\024\056\043" +
    "\060\044\077\045\100\046\067\053\074\061\054\001\002" +
    "\000\032\013\uffc4\022\160\023\162\025\uffc4\026\uffc4\027" +
    "\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\052\uffc4" +
    "\001\002\000\010\022\160\023\162\036\227\001\002\000" +
    "\016\013\034\025\032\027\040\035\044\037\031\042\035" +
    "\001\002\000\022\013\034\025\032\027\040\035\044\037" +
    "\031\040\232\041\231\042\035\001\002\000\016\013\034" +
    "\025\032\027\040\035\044\037\031\042\035\001\002\000" +
    "\026\013\uffc9\025\uffc9\026\uffc9\027\uffc9\035\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\052\uffc9\001\002\000\020\013" +
    "\034\025\032\027\040\035\044\037\031\040\234\042\035" +
    "\001\002\000\026\013\uffc8\025\uffc8\026\uffc8\027\uffc8\035" +
    "\uffc8\037\uffc8\040\uffc8\041\uffc8\042\uffc8\052\uffc8\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\017\003\022\006\023\005\001\001\000" +
    "\002\001\001\000\016\020\041\025\042\026\035\027\040" +
    "\030\032\031\036\001\001\000\002\001\001\000\004\023" +
    "\027\001\001\000\010\016\014\021\013\024\017\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\014\024\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\052\003\072" +
    "\004\065\005\064\006\056\007\225\010\063\011\054\012" +
    "\051\015\047\001\001\000\016\020\222\025\042\026\035" +
    "\027\040\030\032\031\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\042\026\045\027\040\030\032\031\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\002\052\003\072\004\065\005\064\006\056" +
    "\007\067\010\063\011\054\012\051\015\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\002\052\003\072\004\065\005\064\006" +
    "\056\007\216\010\063\011\054\012\051\015\047\001\001" +
    "\000\002\001\001\000\026\002\052\003\072\004\065\005" +
    "\064\006\056\007\175\010\063\011\054\012\051\015\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\002\052\005\156" +
    "\006\056\012\051\015\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\120\015\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\127" +
    "\015\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\134\015\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\141\015\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\146\015\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\153\015\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\052\003\072\004\065\005\064\006\056\010\163" +
    "\011\054\012\051\015\047\001\001\000\002\001\001\000" +
    "\024\002\052\003\072\004\065\005\064\006\056\010\162" +
    "\011\054\012\051\015\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\052\005\171\006\056\012\051\015\047\001\001\000" +
    "\014\002\052\005\170\006\056\012\051\015\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\002\052\004\065\005\064\006\056\011\215\012\051\015" +
    "\047\001\001\000\020\002\052\004\065\005\064\006\056" +
    "\011\214\012\051\015\047\001\001\000\016\002\052\004" +
    "\213\005\064\006\056\012\051\015\047\001\001\000\020" +
    "\002\052\004\065\005\064\006\056\011\212\012\051\015" +
    "\047\001\001\000\020\002\052\004\065\005\064\006\056" +
    "\011\211\012\051\015\047\001\001\000\016\002\052\004" +
    "\210\005\064\006\056\012\051\015\047\001\001\000\020" +
    "\002\052\004\065\005\064\006\056\011\207\012\051\015" +
    "\047\001\001\000\020\002\052\004\065\005\064\006\056" +
    "\011\206\012\051\015\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\002\052" +
    "\003\072\004\065\005\064\006\056\007\221\010\063\011" +
    "\054\012\051\015\047\001\001\000\002\001\001\000\014" +
    "\025\042\026\045\027\040\030\032\031\036\001\001\000" +
    "\026\002\052\003\072\004\065\005\064\006\056\007\224" +
    "\010\063\011\054\012\051\015\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\020\227\025\042\026\035" +
    "\027\040\030\032\031\036\001\001\000\014\025\042\026" +
    "\045\027\040\030\032\031\036\001\001\000\016\020\232" +
    "\025\042\026\035\027\040\030\032\031\036\001\001\000" +
    "\002\001\001\000\014\025\042\026\045\027\040\030\032" +
    "\031\036\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        throw new RuntimeException("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        throw new RuntimeException("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }





/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {


    SymbolTable symbolTable = new SymbolTable();
    StringBuilder stringBuilder = new StringBuilder();

    public String getParseInfo(){
        return stringBuilder.toString();
    }

    public void addInfo(String str){
        stringBuilder.append(str).append("\n");
    }

    public void addInfo(String str, Object a){
        String formatted= String.format(str,a);
        stringBuilder.append(formatted).append("\n");
    }

    public void addInfo(String str, Object a, Object b){
        String formatted= String.format(str,a,b);
        stringBuilder.append(formatted).append("\n");
    }

    public void addInfo(String str, Object a, Object b, Object c){
            String formatted= String.format(str,a,b,c);
            stringBuilder.append(formatted).append("\n");
    }

    public void registerSymbol(String token, String nombre, String tipo) throws RuntimeException{
        symbolTable.addSymbol(nombre.trim(),tipo,token);
    }

    public void checkSymbol(String nombre) throws RuntimeException{
        symbolTable.isRegistered(nombre);
    }


  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_section program_section 
            {
              Program RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		StatementList e1 = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		StatementList e2 = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 0.1: program -> declaration_section program_section");
            addInfo("REGLA 0.1: program -> %s\n%s", e1, e2);
            RESULT=new Program(e1,e2);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program_section 
            {
              Program RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		StatementList e = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 0.2: program -> program_section");
            RESULT = new Program(e);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_section ::= DECLARE_SECTION declarations ENDDECLARE_SECTION 
            {
              StatementList RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		StatementList f = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 1.1: declaration_section -> DECLARE_SECTION declarations ENDDECLARE_SECTION");
    addInfo("REGLA 1.1: declaration_section -> DECLARE_SECTION\n\t %s\n ENDDECLARE_SECTION", f);

    RESULT = f;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaration_section",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declaration 
            {
              StatementList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		DeclareStatement e = (DeclareStatement)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 3.1: declarations -> \n\tdeclaration");
    addInfo("REGLA 3.1: declarations -> \n\t%s",e);
    RESULT = new StatementList(e);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declarations",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations declaration 
            {
              StatementList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		StatementList d = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		DeclareStatement e = (DeclareStatement)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 3.2: declarations -> declaration declarations");
    addInfo("REGLA 3.2: declarations -> %s\n\t%s", d, e);
    RESULT = d.addStatementToList(e);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declarations",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= data_type DOS_PUNTOS ID_list 
            {
              DeclareStatement RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String list = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    for (String name : list.split(",")) {
        registerSymbol("ID", name, type);
    }
    addInfo("REGLA 10.1: declaration -> data_type DOS_PUNTOS ID_list ");
    addInfo("REGLA 10.1: declaration -> %s: %s", type, list);
    RESULT = new DeclareStatement(type, list);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // data_type ::= INTEGER 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 11.1: data_type -> INTEGER");
    RESULT = "INTEGER";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("data_type",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // data_type ::= FLOAT 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 11.2: data_type -> FLOAT");
    RESULT = "FLOAT";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("data_type",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // data_type ::= BOOLEAN 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 11.3: data_type -> BOOLEAN");
    RESULT = "BOOLEAN";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("data_type",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= STRING 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 11.4: data_type -> STRING");
    RESULT = "STRING";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("data_type",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // data_type ::= DUPLE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 11.5: data_type -> DUPLE");
    RESULT = "DUPLE";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("data_type",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ID_list ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 12.1: ID_list -> ID");
    addInfo("REGLA 12.1: ID_list -> %s",id);
    RESULT = id;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ID_list",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ID_list ::= ID COMA ID_list 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String list = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 12.2: ID_list -> ID COMA ID_list");
    addInfo("REGLA 12.2: ID_list -> %s, %s", id, list);
    RESULT = id + ", " + list;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ID_list",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // promedio ::= PROMR OPPARENT ID PUNTO_COMA EQEQ PUNTO_COMA OPBRACKETS numberList CLBRACKETS CLPARENT 
            {
              Promr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 6.1: promedio -> PROMR OPPARENT ID PUNTO_COMA EQEQ PUNTO_COMA OPBRACKETS list CLBRACKETS CLPARENT ");
            addInfo("REGLA 6.1: promedio -> promr( %s ; == ; [ %s ])", id, l);
            RESULT = new Promr(id,"==",l);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("promedio",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-9)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // promedio ::= PROMR OPPARENT ID PUNTO_COMA DIFFERENT PUNTO_COMA OPBRACKETS numberList CLBRACKETS CLPARENT 
            {
              Promr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 6.2: promedio -> PROMR OPPARENT ID PUNTO_COMA DIFFERENT PUNTO_COMA OPBRACKETS list CLBRACKETS CLPARENT ");
            addInfo("REGLA 6.2: promedio -> promr( %s ; != ; [ %s ])", id, l);
            RESULT = new Promr(id,"!=",l);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("promedio",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-9)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // promedio ::= PROMR OPPARENT ID PUNTO_COMA LESS PUNTO_COMA OPBRACKETS numberList CLBRACKETS CLPARENT 
            {
              Promr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 6.3: promedio -> PROMR OPPARENT ID PUNTO_COMA LESS PUNTO_COMA OPBRACKETS list CLBRACKETS CLPARENT ");
            addInfo("REGLA 6.3: promedio -> promr( %s ; < ; [ %s ])", id, l);
            RESULT = new Promr(id,"<",l);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("promedio",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-9)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // promedio ::= PROMR OPPARENT ID PUNTO_COMA GREATER PUNTO_COMA OPBRACKETS numberList CLBRACKETS CLPARENT 
            {
              Promr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 6.4: promedio -> PROMR OPPARENT ID PUNTO_COMA GREATER PUNTO_COMA OPBRACKETS list CLBRACKETS CLPARENT ");
            addInfo("REGLA 6.4: promedio -> promr( %s ; > ; [ %s ])", id, l);
            RESULT = new Promr(id,">",l);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("promedio",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-9)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // promedio ::= PROMR OPPARENT ID PUNTO_COMA LEQ PUNTO_COMA OPBRACKETS numberList CLBRACKETS CLPARENT 
            {
              Promr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 6.5: promedio -> PROMR OPPARENT ID PUNTO_COMA LEQ PUNTO_COMA OPBRACKETS list CLBRACKETS CLPARENT ");
            addInfo("REGLA 6.5: promedio -> promr( %s ; <= ; [ %s ])", id, l);
            RESULT = new Promr(id,"<=",l);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("promedio",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-9)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // promedio ::= PROMR OPPARENT ID PUNTO_COMA GEQ PUNTO_COMA OPBRACKETS numberList CLBRACKETS CLPARENT 
            {
              Promr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 6.6: promedio -> PROMR OPPARENT ID PUNTO_COMA GEQ PUNTO_COMA OPBRACKETS list CLBRACKETS CLPARENT ");
            addInfo("REGLA 6.6: promedio -> promr( %s ; >= ; [ %s ])", id, l);
        RESULT = new Promr(id,">=",l);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("promedio",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-9)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // numberList ::= numberList COMA literalNumber 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int intgleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int intgright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String intg = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 13.1: numberList -> list COMA INTEGER_LITERAL ");
            addInfo("REGLA 13.1: numberList -> %s , %s" ,l ,intg);
            RESULT = l + "," + intg;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("numberList",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // numberList ::= literalNumber 
            {
              String RESULT =null;
		int intgleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int intgright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String intg = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
             addInfo("REGLA 13.2: numberList -> INTEGER_LITERAL");
             addInfo("REGLA 13.2: numberList -> %s",intg);
             RESULT = intg;
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("numberList",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignacion ::= ID EQ expresion_logica 
            {
              Statement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int explogleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression explog = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            checkSymbol(id);
            addInfo("REGLA 14.1: asignacion -> ID EQ expresion_logica ");
            addInfo("REGLA 14.1: asignacion -> %s := %s", id, explog);
            RESULT = new AssignStatement(id, explog);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asignacion",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion_logica ::= NOT expresion_logica 
            {
              Expression RESULT =null;
		int explogleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression explog = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 15.1: expresion_logica -> NOT expresion_logica");
            addInfo("REGLA 15.1: expresion_logica -> not %s", explog);
            RESULT = new NotExpression(explog);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_logica",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion_logica ::= expresion_logica OR expresion_simple 
            {
              Expression RESULT =null;
		int explogleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression explog = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int expandleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int expandright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression expand = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 15.2: expresion_logica -> expresion_logica OR expresion_simple ");
            addInfo("REGLA 15.2: expresion_logica -> %s or %s", explog, expand);
            RESULT = new LogicExpression(explog, expand, "OR");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_logica",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion_logica ::= expresion_logica AND expresion_simple 
            {
              Expression RESULT =null;
		int expandleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int expandright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression expand = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int expsinleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int expsinright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression expsin = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 15.3: expresion_logica -> expresion_logica AND expresion_simple ");
            addInfo("REGLA 15.3: expresion_logica -> %s and %s", expand, expsin);
            RESULT = new LogicExpression(expand, expsin, "AND");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_logica",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion_logica ::= expresion_simple 
            {
              Expression RESULT =null;
		int expsinleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int expsinright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression expsin = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 15.4: expresion_logica -> expresion_simple ");
            addInfo("REGLA 15.4: expresion_logica -> %s", expsin);
            RESULT = expsin ;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_logica",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_simple ::= comparacion 
            {
              Expression RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		CompareCondition cond = (CompareCondition)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 16.1: expresion_simple -> condition ");
            RESULT = cond;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_simple",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_simple ::= expresion 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 16.2: expresion_simple -> expresion ");
            addInfo("REGLA 16.2: expresion_simple -> %s", e);
            RESULT = e;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_simple",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comparacion ::= expresion EQEQ expresion 
            {
              CompareCondition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 17.1: comparacion -> expresion EQEQ expresion");
            addInfo("REGLA 17.1: comparacion -> %s == %s", e1, e2);
            RESULT = new CompareCondition(e1,"==",e2);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comparacion ::= expresion DIFFERENT expresion 
            {
              CompareCondition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 17.2: comparacion -> expresion DIFFERENT expresion");
            addInfo("REGLA 17.2: comparacion -> %s != %s", e1, e2);
            RESULT = new CompareCondition(e1,"!=",e2);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // comparacion ::= expresion LESS expresion 
            {
              CompareCondition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 17.3: comparacion -> expresion LESS expresion");
            addInfo("REGLA 17.3: comparacion -> %s < %s", e1, e2);
            RESULT = new CompareCondition(e1,"<",e2);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // comparacion ::= expresion GREATER expresion 
            {
              CompareCondition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 17.4: comparacion -> expresion GREATER expresion");
            addInfo("REGLA 17.4: comparacion -> %s > %s", e1, e2);
            RESULT = new CompareCondition(e1,">",e2);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // comparacion ::= expresion LEQ expresion 
            {
              CompareCondition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 17.5: comparacion -> expresion LEQ expresion");
            addInfo("REGLA 17.5: comparacion -> %s <= %s", e1, e2);
            RESULT = new CompareCondition(e1,"<=",e2);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // comparacion ::= expresion GEQ expresion 
            {
              CompareCondition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 17.6: comparacion -> expresion GEQ expresion");
            addInfo("REGLA 17.6: comparacion -> %s >= %s", e1, e2);
            RESULT = new CompareCondition(e1,">=",e2);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= expresion PLUS termino 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Factor t = (Factor)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 18.1: expresion -> expresion PLUS termino");
            addInfo("REGLA 18.1: expresion -> %s + %s", e, t);
            RESULT = new PlusOperation(e,t);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= expresion MINUS termino 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Factor t = (Factor)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 18.2: expresion -> expresion MINUS termino");
            addInfo("REGLA 18.2: expresion -> %s - %s", e, t);
            RESULT = new MinusOperation(e,t);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= termino 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Factor t = (Factor)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 18.3: expresion -> termino");
            addInfo("REGLA 18.3: expresion -> %s",t );
            RESULT = t;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // termino ::= termino MULT factor 
            {
              Factor RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Factor t = (Factor)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 19.1: termino -> termino MULT factor ");
            addInfo("REGLA 19.1: termino -> %s * %s", t, f);
            RESULT = new MultiplyOperation(t,f);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // termino ::= termino DIV factor 
            {
              Factor RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Factor t = (Factor)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 19.2: termino -> termino DIV factor ");
            addInfo("REGLA 19.2: termino -> %s / %s", t, f);
            RESULT = new DivideOperation(t,f);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // termino ::= factor 
            {
              Factor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 19.3: termino -> factor ");
            addInfo("REGLA 19.3: termino -> %s", f);
            RESULT = f;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // factor ::= MINUS factor 
            {
              Factor RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Factor f = (Factor)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 20.1: factor -> MENOS factor");
            addInfo("REGLA 20.1: factor -> - %s", f);
            RESULT = new MinusFactor(f);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // factor ::= OPPARENT expresion_logica CLPARENT 
            {
              Factor RESULT =null;
		int expsinleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int expsinright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expression expsin = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            addInfo("REGLA 20.2: factor -> OPPARENT expresion_logica CLPARENT");
            addInfo("REGLA 20.2: factor -> - %s", expsin);
            RESULT = new LogicExpressionFactor(expsin);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // factor ::= ID 
            {
              Factor RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            checkSymbol(id);
            addInfo("REGLA 20.3: factor -> ID");
            addInfo("REGLA 20.3: factor -> %s", id);
            RESULT = new Constant(id);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // factor ::= promedio 
            {
              Factor RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Promr p = (Promr)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 20.4: factor -> promedio");
            addInfo("REGLA 20.4: factor -> %s",p );
            RESULT = p;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // factor ::= inputs 
            {
              Factor RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Input ip = (Input)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 20.5: factor -> inputs ");
            addInfo("REGLA 20.5: factor -> %s ",ip );
            RESULT = ip;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // factor ::= literalNumber 
            {
              Factor RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
             addInfo("REGLA 20.6: factor -> literalNumber");
             addInfo("REGLA 20.6: factor -> %s ",t );
             RESULT = new Constant(t);
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= constante_bool 
            {
              Factor RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		BooleanCondition cb = (BooleanCondition)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
              addInfo("REGLA 20.7: factor -> constante_bool ");
              addInfo("REGLA 20.7: factor -> %s", cb);
              RESULT = cb;
              
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // constante_bool ::= TRUE 
            {
              BooleanCondition RESULT =null;
		
            addInfo("REGLA 21.1: constante_bool -> TRUE");
            RESULT = new BooleanCondition(true);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante_bool",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // constante_bool ::= FALSE 
            {
              BooleanCondition RESULT =null;
		
            addInfo("REGLA 21.2: constante_bool -> FALSE");
            RESULT = new BooleanCondition(false);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante_bool",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentenciaShow ::= SHOW OPPARENT expresion_logica CLPARENT 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            addInfo("REGLA 8.1: sentenciaShow -> SHOW OPPARENT expresion_logica CLPARENT ");
            addInfo("REGLA 8.1: sentenciaShow -> SHOW ( %s )" ,e);
            RESULT = new ShowStatement(e);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentenciaShow",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sentenciaShow ::= SHOW OPPARENT STRING_LITERAL CLPARENT 
            {
              Statement RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
             registerSymbol("CTE_STR", il, "STRING");
             addInfo("REGLA 8.2: sentenciaShow -> STRING_LITERAL");
             addInfo("REGLA 8.2: sentenciaShow -> %s", il );
             RESULT = new ShowStatement(il);
             
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentenciaShow",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // inputs ::= INPUT_BOOL OPPARENT CLPARENT 
            {
              Input RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ib = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 9.1: inputs -> INPUT_BOOL OPPARENT CLPARENT");
            addInfo("REGLA 9.1: inputs -> ( %s )", ib );
            RESULT = new Input("BOOL");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("inputs",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // inputs ::= INPUT_INT OPPARENT CLPARENT 
            {
              Input RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 9.2: inputs -> INPUT_INT OPPARENT CLPARENT");
            addInfo("REGLA 9.2: inputs -> ( %s )", in );
            RESULT = new Input("INT");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("inputs",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inputs ::= INPUT_FLOAT OPPARENT CLPARENT 
            {
              Input RESULT =null;
		int iflleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iflright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ifl = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 9.3: inputs -> INPUT_FLOAT OPPARENT CLPARENT");
            addInfo("REGLA 9.3: inputs -> ( %s )", ifl );
            RESULT = new Input("FLOAT");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("inputs",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // inputs ::= INPUT_DUPLE OPPARENT CLPARENT 
            {
              Input RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
            addInfo("REGLA 9.4: inputs -> INPUT_DUPLE OPPARENT CLPARENT");
            addInfo("REGLA 9.4: inputs -> ( %s )", id );
            RESULT = new Input("DUPLE");
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("inputs",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentencia_de_seleccion ::= UNLESS expresion_logica THEN program_lines END 
            {
              Statement RESULT =null;
		int explogleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Expression explog = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		StatementList p = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            addInfo("REGLA 5.1: sentencia_de_seleccion -> UNLESS expresion_logica THEN program_lines END ");
            addInfo("REGLA 5.1: sentencia_de_seleccion -> UNLESS %s THEN %s END", explog, p);
            RESULT = new UnlessStatement(explog,p);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_de_seleccion",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_de_seleccion ::= UNLESS expresion_logica THEN program_lines ELSE program_lines END 
            {
              Statement RESULT =null;
		int explogleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Expression explog = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		StatementList p1 = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		StatementList p2 = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
            addInfo("REGLA 5.2: sentencia_de_seleccion -> UNLESS expresion_logica THEN program_lines ELSE program_lines END ");
            addInfo("REGLA 5.2: sentencia_de_seleccion -> UNLESS %s THEN %s ELSE %s END", explog, p1, p2);
            RESULT = new UnlessStatement(explog,p1,p2);
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_de_seleccion",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // program_section ::= PROGRAM_SECTION program_lines ENDPROGRAM_SECTION 
            {
              StatementList RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		StatementList p = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 2.1: program_section -> PROGRAM_SECTION program_lines ENDPROGRAM_SECTION");
    addInfo("REGLA 2.1: program_section -> PROGRAM_SECTION\n\t %s\n ENDPROGRAM_SECTION", p);

    RESULT = p ;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_section",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // program_lines ::= program_line 
            {
              StatementList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 4.1: program_lines -> \n\tprogram");
    addInfo("REGLA 4.1: program_lines -> \n\t%s",e);
    RESULT = new StatementList(e);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_lines",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // program_lines ::= program_lines program_line 
            {
              StatementList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		StatementList d = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 4.2: program_lines -> program_line program_lines");
    addInfo("REGLA 4.2: program_lines -> %s\n\t%s", d, e);
    RESULT = d.addStatementToList(e);

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_lines",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentenciaRepeat ::= REPEAT program_lines UNTIL expresion_logica 
            {
              RepeatStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		StatementList e = (StatementList)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int explogleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int explogright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Expression explog = (Expression)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 7.1: sentenciaRepeat -> REPEAT program_lines  UNTIL expresion_logica:explog");
    addInfo("REGLA 7.1: sentenciaRepeat -> REPEAT %s  UNTIL %s", e, explog);
    RESULT = new RepeatStatement(explog, e);


              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentenciaRepeat",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // program_line ::= sentenciaShow 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 22.1: program_line -> sentenciaSHOW ");
    addInfo("REGLA 22.1: program_line -> %s ",s );
    RESULT = s;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // program_line ::= asignacion 
            {
              Statement RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Statement a = (Statement)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 22.2: program_line -> asignacion ");
    addInfo("REGLA 22.2: program_line -> %s ",a );
    RESULT = a;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // program_line ::= sentencia_de_seleccion 
            {
              Statement RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Statement ss = (Statement)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
     addInfo("REGLA 22.3: program_line -> sentencia_de_seleccion ");
     addInfo("REGLA 22.3: program_line -> %s ",ss );
     RESULT = ss;
     
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // program_line ::= sentenciaRepeat 
            {
              Statement RESULT =null;
		int ssrleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ssrright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		RepeatStatement ssr = (RepeatStatement)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 22.4: program_line -> sentenciaRepeat ");
        addInfo("REGLA 22.4: program_line -> %s ",ssr );
        RESULT = ssr;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // program_line ::= BREAK 
            {
              Statement RESULT =null;
		
        addInfo("REGLA 22.5: program_line -> BREAK ");
        RESULT = new BreakStatement();
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // program_line ::= CONTINUE 
            {
              Statement RESULT =null;
		
        addInfo("REGLA 22.6: program_line -> CONTINUE ");
        RESULT = new ContinueStatement();
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // literalNumber ::= DUPLA_LITERAL 
            {
              String RESULT =null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String dl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 23.1: literalNumber -> DUPLA_LITERAL");
            addInfo("REGLA 23.1: literalNumber -> %s", dl );
            RESULT = dl;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("literalNumber",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // literalNumber ::= FLOAT_LITERAL 
            {
              String RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 23.2: literalNumber -> FLOAT_LITERAL");
            addInfo("REGLA 23.2: literalNumber -> %s", fl );
            RESULT = fl;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("literalNumber",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // literalNumber ::= INTEGER_LITERAL 
            {
              String RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
            addInfo("REGLA 23.3: literalNumber -> INTEGER_LITERAL");
            addInfo("REGLA 23.3: literalNumber -> %s", il );
            RESULT = il;
            
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("literalNumber",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
