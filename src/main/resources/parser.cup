package ar.edu.unnoba.comp.compilertp;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;

class MiParser;

action code {:
    Hashtable table = new Hashtable();
:};

/* TODO: revisar si es útil para nuestro caso. Es el ejemplo del profe.*/

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

:};

    /* Definición de Simbolos */

terminal ArrayList FLOAT_ARRAY;

terminal String BOOLEAN, FALSE, TRUE, CADENA, ENTERO_LITERAL, FLOTANTE_LITERAL, CADENA_LITERAL, DUPLA_LITERAL, IDENTIFICADOR;

//Objects
terminal ENTERO, FLOTANTE;

terminal AND, OR, NOT;

terminal LOOP, WHEN, BACKWARD_LOOP, END_LOOP, CONTINUE, BREAK;

terminal CONDITION, BACKWARD_CONDITION, THEN, END, ELSE, ELSE_BACKWARD, DISPLAY;

terminal ANY, ALL;

terminal INPUT_INT, INPUT_FLOAT, INPUT_BOOL, INPUT_ARRAY;

terminal DECLARE_SECTION, ENDDECLARE_SECTION, VALOR_MAS_CERCANO;

//Operaciones

terminal IGUAL, EQUIVALE, MAS, MENOS, MENOR_IGUAL_QUE, MULT, DIV, MENOS_UNARIO;
terminal MENOR_QUE, MAS, MAYOR_IGUAL_QUE, MENOR_IGUAL_QUE, DIFERENTE;
terminal ABRE_PARENTESIS, CIERRA_PARENTESIS, ABRE_CORCHETE, CIERRA_CORCHETE, PUNTO, PUNTO_COMA, COMA, DOS_PUNTOS;

nonterminal CompareCondition  comparacion;
nonterminal Factor termino, factor;
nonterminal BooleanCondition constante_bool;
nonterminal Expression expresion_logica;
nonterminal Expression expresion_simple, expresion;
nonterminal Input inputs;
nonterminal String numberList, ID_list,  numero_literal, data_type;
nonterminal Program program;
nonterminal StatementList program_lines, declarations, declaration_section, program_section;
nonterminal DeclareStatement declaration;
nonterminal RepeatStatement sentenciaRepeat;
nonterminal Statement program_line, sentencia_de_seleccion, asignacion, sentenciaShow;

precedence left MAS, MENOS;
precedence left MULT, DIV;
precedence left MENOS_UNARIO;
precedence left AND;
precedence right NOT;

start with program;

program ::= declaration_section:ds program_section:ps{
        addInfo("REGLA 0.1: program -> declaractio_section program_section");
        addInfo("REGLA 0.1: program ->, ds, ps");
        RESULT = new Program(ds, ps)
    :}
    | program_section:ps{
        addInfo("REGLA 0.2: program -> program_section");
        addInfo("REGLA 0.2: program ->", ps);
        RESULT = new Program(ps);
    :};

declaration_section ::= DECLARE_SECTION declarations:dec ENDDECLARE_SECTION{
        addInfo("REGLA 1.1: declaration_section -> DECLARE_SECTION declarations ENDDECLARE_SECTION");
        addInfo("REGLA 1.1: declaration_section -> DECLARE_SECTION \n\t %s\n ENDDECLARE_SECTION", dec);
        RESULT = dec;
    :};

declarations ::= declaration:e{:
        addInfo("REGLA 3.1: declarations -> \n\tdeclaration");
        addInfo("REGLA 3.1: declarations -> \n\t%s",e);
        RESULT = new StatementList(e);
    :}
    |declarations:d declaration:e{:
        addInfo("REGLA 3.2: declarations -> declaration declarations");
        addInfo("REGLA 3.2: declarations -> %s\n\t%s", d, e);
        RESULT = d.addStatementToList(e);
    :};

    declaration ::= data_type:dt DOS_PUNTOS ID_list:idlist{
        addInfo("REGLA 4.1: declaration -> data_type DOS_PUNTOS ID_list");
        addInfo("REGLA 4.1: declaration ->" dt, ": ", idlist);
    }

data_type ::= ENTERO{
        addInfo("REGLA 5.1: data_type -> ENTERO");
        RESULT = "ENTERO";
    :}
    | FLOAT{
        addInfo("REGLA 5.2: data_type -> FLOAT");
        RESULT = "FLOAT";
    :}
    | BOOLEAN{
        addInfo("REGLA 5.3: data_type -> BOOLEAN");
        RESULT = "BOOLEAN";
    :}
    | STRING{
        addInfo("REGLA 5.4: data_type -> STRING");
        RESULT = "STRING";
    :}
    | DUPLA{
        addInfo("REGLA 5.5: data_type -> DUPLA");
        RESULT = "DUPLA";
    :};

ID_list ::= ID:id{
        addInfo("REGLA 6.1: ID_list -> ID");
        addInfo("REGLA 6.1: ID_list -> %s", id);
        RESULT = id;
    :};

number_list ::= number_list:nlist COMA numero_literal:nliteral{
        addInfo("REGLA 7.1: number_list -> number_list COMA numero_literal");
        addInfo("REGLA 7.1: number_list -> %s, %s", nlist, nliteral);
        RESULT = nlist + "," + nliteral;
    :};

asignacion ::= ID:id IGUAL expresion_logica:exp_log{
        addInfo("REGLA 8.1: asignacion -> ID IGUAL expresion_logica");
        addInfo("REGLA 8.1: asignacion -> %s = %s", id, exp_log);
        RESULT = new AssignStatement(id, exp_log);
    }

expresion_logica ::= NOT expresion_logica:exp_log{
        addInfo("REGLA 9.1: expresion_logica -> NOT expresion_logica");
        addInfo("REGLA 9.1: expresion_logica -> NOT %s", expresion_logica);
        RESULT = new NotExpression(exp_log);
    :}
    | expresion_logica:exp_log OR expresion_simple:exp_simp{
        addInfo("REGLA 9.2: expresion_logica -> exp_log OR expresion_simple");
        addInfo("REGLA 9.2: expresion_logica -> %s OR %s", exp_log, exp_simp);
        RESULT = new LogicExpression(exp_log, exp_simp, "OR");
    }
    | expresion_logica:exp_log AND expresion_simple:exp_simp{
        addInfo("REGLA 9.3: expresion_logica -> exp_log AND expresion_simple");
        addInfo("REGLA 9.3: expresion_logica -> %s AND %s", exp_log, exp_simp);
        RESULT = new LogicExpression(exp_log, exp_simp, "AND");
    }
    | expresion_simple:exp_simp{
        addInfo("REGLA 9.4: expresion_logica -> expresion_simple");
        addInfo("REGLA 9.4: expresion_logica -> %s", exp_simp);
        RESULT = exp_simp;
    }

expresion_simple ::= comparacion:cond {:
    addInfo("REGLA 16.1: expresion_simple -> comparacion");
    addInfo("REGLA 16.1: expresion_simple -> %s", cond);
    RESULT = cond;
    :}
    | expresion:e {:
    addInfo("REGLA 16.2: expresion_simple -> expresion");
    addInfo("REGLA 16.2: expresion_simple -> %s",e);
    RESULT = e;
    :};

comparacion ::= expresion:e1 EQUIVALE expresion:e2 {:
    addInfo("REGLA 17.1: comparacion -> expresion EQUIVALE expresion");
    addInfo("REGLA 17.1: comparacion -> %s == %s", e1, e2);
    RESULT = new CompareCondition(e1, "==", e2);
    :}
    | expresion:e1 DIFERENTE expresion:e2 {:
    addInfo("REGLA 17.2: comparacion -> expresion DIFERENTE expresion");
    addInfo("REGLA 17.2: comparacion -> %s != %s", e1, e2);
    RESULT = new CompareCondition(e1, "!=", e2);
    :}
    | expresion:e1 MENOR_QUE expresion:e2 {:
    addInfo("REGLA 17.3: comparacion -> expresion MENOR_QUE expresion");
    addInfo("REGLA 17.3: comparacion -> %s < %s", e1, e2);
    RESULT = new CompareCondition(e1, "<", e2);
    :}
    | expresion:e1 MAYOR_QUE expresion:e2 {:
    addInfo("REGLA 17.4: comparacion -> expresion MAYOR_QUE expresion");
    addInfo("REGLA 17.4: comparacion -> %s > %s", e1, e2);
    RESULT = new CompareCondition(e1, ">", e2);
    :}
    | expresion:e1 MENOR_IGUAL_QUE expresion:e2 {:
    addInfo("REGLA 17.5: comparacion -> expresion MENOR_IGUAL_QUE expresion");
    addInfo("REGLA 17.5: comparacion -> %s <= %s", e1, e2);
    RESULT = new CompareCondition(e1, "<=", e2);
    :}
    | expresion:e1 MAYOR_IGUAL_QUE expresion:e2 {:
    addInfo("REGLA 17.6: comparacion -> expresion MAYOR_IGUAL_QUE expresion");
    addInfo("REGLA 17.6: comparacion -> %s >= %s", e1, e2);
    RESULT = new CompareCondition(e1, ">=", e2);
    :};

expresion ::= expresion:e MAS termino:t {:
    addInfo("REGLA 18.1: expresion -> expresion MAS termino");
    addInfo("REGLA 18.1: expresion -> %s + %s", e, t);
    RESULT = new PlusOperation(e,t);
    :}
    | expresion:e MENOS termino:t {:
    addInfo("REGLA 18.2: expresion -> expresion MENOS termino");
    addInfo("REGLA 18.2: expresion -> %s - %s", e, t);
    RESULT = new MinusOperation(e,t);
    :}
    | termino:t {:
    addInfo("REGLA 18.3: expresion -> termino");
    addInfo("REGLA 18.3: expresion -> %s", t);
    RESULT = t;
    :};

termino ::= termino:t MULT factor:f {:
    addInfo("REGLA 19.1: termino -> termino MULT factor");
    addInfo("REGLA 19.1: termino -> %s * %s", t, f);
    RESULT = new MultiplyOperation(t,f);
    :}
    | termino:t DIV factor:f {:
    addInfo("REGLA 19.2: termino -> termino DIV factor");
    addInfo("REGLA 19.2: termino -> %s / %s", t, f);
    RESULT = new DivideOperation(t,f);
    :}
    | factor:f {:
    addInfo("REGLA 19.3: termino -> factor");
    addInfo("REGLA 19.3: termino -> %s", f);
    RESULT = f;
    :};