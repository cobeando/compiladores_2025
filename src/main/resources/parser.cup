package ar.edu.unnoba.comp.jflextp;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import java.lang.StringBuilder;
import ar.edu.unnoba.comp.jflextp.utils.SymbolTable;

class MiParser;

action code {:

    SymbolTable symbolTable = new SymbolTable();
    StringBuilder stringBuilder = new StringBuilder();

    public String getParseInfo(){
        return stringBuilder.toString();
    }

    public void addInfo(String str){
        stringBuilder.append(str).append("\n");
    }

    public void addInfo(String str, Object a){
        String formatted = String.format(str,a);
        stringBuilder.append(formatted).append("\n");
    }

    public void addInfo(String str, Object a, Object b){
        String formatted = String.format(str, a, b);
        stringBuilder.append(formatted).append("\n");
    }

    public void addInfo(String str, Object a, Object b, Object c){
        String formatted = String.format(str, a, b, c);
        stringBuilder.append(formatted).append("\n");
    }

    public void registerSymbol(String token, String nombre, String tipo) throws RuntimeException{
        symbolTable.addSymbol(nombre.trim(),tipo,token);
    }

    public void checkSymbol(String nombre) throws RuntimeException{
        symbolTable.isRegistered(nombre);
    }
:};

/* TODO: revisar si es útil para nuestro caso. Es el ejemplo del profe.*/

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

:};

    /* Definición de Simbolos */


terminal String IDENTIFICADOR, STRING_LITERAL, ENTERO_LITERAL, FLOAT_ARRAY_LITERAL, FLOTANTE_LITERAL ;

//Objects
terminal  ENTERO, FLOTANTE, FLOAT_ARRAY, BOOLEAN, FALSE, TRUE;

terminal  AND, OR, NOT;

terminal  LOOP, WHEN, BACKWARD_LOOP, END_LOOP, CONTINUE, BREAK;

terminal  CONDITION, BACKWARD_CONDITION, THEN, END, ELSE, ELSE_BACKWARD, DISPLAY;

terminal  ANY, ALL;

terminal  INPUT_INT, INPUT_FLOAT, INPUT_BOOL, INPUT_ARRAY;

terminal  PROGRAM_SECTION, ENDPROGRAM_SECTION, DECLARE_SECTION, ENDDECLARE_SECTION, VALOR_MAS_CERCANO;

//Operaciones

terminal  IGUAL, EQUIVALE, MAS, MENOS, MULT, DIV, MENOS_UNARIO;
terminal  MAYOR_QUE, MENOR_QUE, MAYOR_IGUAL_QUE, MENOR_IGUAL_QUE, DIFERENTE;
terminal  ABRE_PARENTESIS, CIERRA_PARENTESIS, ABRE_CORCHETE, CIERRA_CORCHETE, COMA, DOS_PUNTOS;

nonterminal String declaration_section, declarations, declaration, data_type, ID_list, number_list, valor_mas_cercano;
nonterminal String comparacion;
nonterminal String termino, factor;
nonterminal String constante_bool; 
nonterminal String expresion_logica;
nonterminal String expresion_simple, expresion;
nonterminal String inputs;
nonterminal String numero_literal;
nonterminal String program;
nonterminal String program_lines, program_section;
nonterminal String program_line, sentencia_de_seleccion, asignacion, sentenciaDisplay, sentencia_de_iteracion, program_line_loop, program_lines_loop;
nonterminal String any, all;

precedence left NOT;
precedence left OR;
precedence left AND;

start with program;

program ::= declaration_section:ds program_section:ps {:
        addInfo("REGLA 0.1: program -> declaractio_section program_section");
        addInfo("REGLA 0.1: program -> %s \n %s", ds, ps);
        RESULT = ds + "\n" + ps;
    :}
    | program_section:ps {:
        addInfo("REGLA 0.2: program -> program_section");
        addInfo("REGLA 0.2: program -> %s ", ps);
        RESULT = ps;
:};

declaration_section ::= DECLARE_SECTION declarations:dec ENDDECLARE_SECTION {:
        addInfo("REGLA 1.1: declaration_section -> DECLARE_SECTION declarations ENDDECLARE_SECTION");
        addInfo("REGLA 1.1: declaration_section -> DECLARE_SECTION \n\t %s\n ENDDECLARE_SECTION", dec);
        RESULT =  "DECLARE_SECTION\n\t" + dec + "\nENDDECLARE_SECTION";
:};

declarations ::= declaration:e {:
        addInfo("REGLA 2.1: declarations -> \n\tdeclaration");
        addInfo("REGLA 2.1: declarations -> \n\t%s",e);
        RESULT = e;
    :}
    |declarations:d declaration:e {:
        addInfo("REGLA 2.2: declarations -> declaration declarations");
        addInfo("REGLA 2.2: declarations -> %s\n\t%s", d, e);
        RESULT = d + "\n\t" + e;
:};

declaration ::= data_type:dt DOS_PUNTOS ID_list:idlist {:
        for (String name : idlist.split(",")) {
            registerSymbol("IDENTIFICADOR", name, dt);
        }
        addInfo("REGLA 3.1: declaration -> data_type DOS_PUNTOS ID_list");
        addInfo("REGLA 3.1: declaration ->%s: %s", dt, idlist);
        RESULT = dt + ": " + idlist ;
:};

data_type ::= ENTERO {:
        addInfo("REGLA 4.1: data_type -> ENTERO");
        RESULT = "ENTERO";
    :}
    | FLOTANTE {:
        addInfo("REGLA 4.2: data_type -> FLOAT");
        RESULT = "FLOTANTE";
    :}
    | BOOLEAN {:
        addInfo("REGLA 4.3: data_type -> BOOLEAN");
        RESULT = "BOOLEAN";
    :}
    | FLOAT_ARRAY ABRE_CORCHETE ENTERO_LITERAL:int_lit CIERRA_CORCHETE {:
        addInfo("REGLA 4.4: data_type ->  FLOAT_ARRAY ABRE_CORCHETE ENTERO_LITERAL CIERRA_CORCHETE");
        addInfo("REGLA 4.4: data_type -> FLOAT_ARRAY [ %s ]", int_lit);
        RESULT = "FLOAT_ARRAY" + "[" + int_lit + "]";
:};

ID_list ::= IDENTIFICADOR:id COMA ID_list:list {:
        addInfo("REGLA 5.2: ID_list -> IDENTIFICADOR COMA ID_list");
        addInfo("REGLA 5.2: ID_list -> %s, %s", id, list);
        RESULT = id + ", " + list;
    :}
    |IDENTIFICADOR:id {:
        addInfo("REGLA 5.1: ID_list -> IDENTIFICADOR");
        addInfo("REGLA 5.1: ID_list -> %s", id);
        RESULT = id;
:};

valor_mas_cercano ::= VALOR_MAS_CERCANO ABRE_PARENTESIS ENTERO_LITERAL:il COMA ABRE_CORCHETE number_list:nl CIERRA_CORCHETE CIERRA_PARENTESIS {:
        addInfo("REGLA 6.1: valor_mas_cercano -> VALOR_MAS_CERCANO ABRE_PARENTESIS ENTERO_LITERAL COMA ABRE_CORCHETE number_list CIERRA_CORCHETE CIERRA_PARENTESIS");
        addInfo("REGLA 6.1: valor_mas_cercano -> valor_mas_cercano( %s , [ %s ] )", il, nl);
        RESULT = "valor_mas_cercano" + "(" + il + "," + "[" + nl + "]" + ")";
    :};


all ::= ALL ABRE_PARENTESIS expresion:e COMA EQUIVALE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 7.1: all -> ALL ABRE_PARENTESIS expresion COMA EQUIVALE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.1: all -> all( %s , == , %s )", e, id);
        RESULT = "all" + "(" + e + "," + "==" + "," + id + ")";
    :}
    |ALL ABRE_PARENTESIS expresion:e COMA DIFERENTE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 7.2: all -> ALL ABRE_PARENTESIS expresion COMA DIFERENTE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.2: all -> all( %s , != , %s )", e, id);
        RESULT = "all" + "(" + e + "," + "!=" + "," + id + ")";
    :}
    |ALL ABRE_PARENTESIS expresion:e COMA MENOR_QUE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 7.3: all -> ALL ABRE_PARENTESIS expresion COMA MENOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.3: all -> all( %s , < , %s )", e, id);
        RESULT = "all" + "(" + e + "," + "<" + "," + id + ")";
    :}
    |ALL ABRE_PARENTESIS expresion:e COMA MAYOR_QUE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 7.4: all -> ALL ABRE_PARENTESIS expresion COMA MAYOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.4: all -> all( %s , > , %s )", e, id);
        RESULT = "all" + "(" + e + "," + ">" + "," + id + ")";
    :}
    |ALL ABRE_PARENTESIS expresion:e COMA MENOR_IGUAL_QUE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 7.5: all -> ALL ABRE_PARENTESIS expresion COMA MENOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.5: all -> all( %s , <= , %s )", e, id);
        RESULT = "all" + "(" + e + "," + "<=" + "," + id + ")";
    :}
    |ALL ABRE_PARENTESIS expresion:e COMA MAYOR_IGUAL_QUE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 7.6: all -> ALL ABRE_PARENTESIS expresion COMA MAYOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.6: all -> all( %s , >= , %s )", e, id);
        RESULT = "all" + "(" + e + "," + ">=" + "," + id + ")";
:};


any ::= ANY ABRE_PARENTESIS expresion:e COMA EQUIVALE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 8.1: any -> ANY ABRE_PARENTESIS expresion COMA EQUIVALE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.1: any -> any( %s , == , %s )", e, id);
        RESULT = "any" + "(" + e + "," + "==" + "," + id + ")";
    :}
    |ANY ABRE_PARENTESIS expresion:e COMA DIFERENTE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 8.2: any -> ANY ABRE_PARENTESIS expresion COMA DIFERENTE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.2: any -> any( %s , != , %s )", e, id);
        RESULT = "any" + "(" + e + "," + "!=" + "," + id + ")";
    :}
    |ANY ABRE_PARENTESIS expresion:e COMA MENOR_QUE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 8.3: any -> ANY ABRE_PARENTESIS expresion COMA MENOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.3: any -> any( %s , < , %s )", e, id);
        RESULT = "any" + "(" + e + "," + "<" + "," + id + ")";
    :}
    |ANY ABRE_PARENTESIS expresion:e COMA MAYOR_QUE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 8.4: any -> ANY ABRE_PARENTESIS expresion COMA MAYOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.4: any -> any( %s , > , %s )", e, id);
        RESULT = "any" + "(" + e + "," + ">" + "," + id + ")";
    :}
    |ANY ABRE_PARENTESIS expresion:e COMA MENOR_IGUAL_QUE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 8.5: any -> ANY ABRE_PARENTESIS expresion COMA MENOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.5: any -> any( %s , <= , %s )", e, id);
        RESULT = "any" + "(" + e + "," + "<=" + "," + id + ")";
    :}
    |ANY ABRE_PARENTESIS expresion:e COMA MAYOR_IGUAL_QUE COMA IDENTIFICADOR:id CIERRA_PARENTESIS{:
        addInfo("REGLA 8.5: any -> ANY ABRE_PARENTESIS expresion COMA MAYOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.6: any -> any( %s , >= , %s )", e, id);
        RESULT = "any" + "(" + e + "," + ">=" + "," + id + ")";
:};

number_list ::= number_list:nlist COMA ENTERO_LITERAL:il {:
        addInfo("REGLA 9.1: number_list -> number_list COMA ENTERO_LITERAL");
        addInfo("REGLA 9.1: number_list -> %s, %s", nlist, il);
        RESULT = nlist + "," + il;
    :}
    | ENTERO_LITERAL:il {:
         addInfo("REGLA 9.2: number_list -> il");
        addInfo("REGLA 9.2: number_list -> %s", il);
        RESULT = il;
:};

asignacion ::=IDENTIFICADOR:id ABRE_CORCHETE expresion:e CIERRA_CORCHETE IGUAL expresion_logica:exp_log {:
        addInfo("REGLA 10.1: asignacion -> IDENTIFICADOR ABRE_CORCHETE expresion CIERRA_CORCHETE IGUAL expresion_logica");
        addInfo("REGLA 10.1: asignacion -> %s [ %s ] = %s", id, e, exp_log);
        RESULT = id + "[" + e + "]" + "=" + exp_log; 
        :}
        |IDENTIFICADOR:id IGUAL expresion_logica:exp_log {:
        checkSymbol(id);
        addInfo("REGLA 10.2: asignacion -> IDENTIFICADOR IGUAL expresion_logica");
        addInfo("REGLA 10.2: asignacion -> %s = %s", id, exp_log);
        RESULT = id + "=" + exp_log ;
:};

expresion_logica ::= NOT expresion_logica:exp_log {:
        addInfo("REGLA 11.1: expresion_logica -> NOT expresion_logica");
        addInfo("REGLA 11.1: expresion_logica -> NOT %s", exp_log);
        RESULT = "NOT" + exp_log;
    :}
    | expresion_logica:exp_log1 OR expresion_logica:exp_log2 {:
        addInfo("REGLA 11.2: expresion_logica -> expresion_logica OR expresion_logica");
        addInfo("REGLA 11.2: expresion_logica -> %s OR %s", exp_log1, exp_log2 );
        RESULT = exp_log1 + "OR" + exp_log2 ;
    :}
    | expresion_logica:exp_log1 AND expresion_logica:exp_log2 {:
        addInfo("REGLA 11.3: expresion_logica -> expresion_logica AND expresion_logica");
        addInfo("REGLA 11.3: expresion_logica -> %s AND %s", exp_log1, exp_log2 );
        RESULT =  exp_log1 + "AND" + exp_log2 ;
    :}
    | expresion_simple:exp_simp {:
        addInfo("REGLA 11.4: expresion_logica -> expresion_simple");
        addInfo("REGLA 11.4: expresion_logica -> %s", exp_simp);
        RESULT = exp_simp;
:};

expresion_simple ::= comparacion:cond {:
    addInfo("REGLA 12.1: expresion_simple -> comparacion");
    addInfo("REGLA 12.1: expresion_simple -> %s", cond);
    RESULT = cond;
    :}
    | expresion:e {:
    addInfo("REGLA 12.2: expresion_simple -> expresion");
    addInfo("REGLA 12.2: expresion_simple -> %s",e);
    RESULT = e;
:};

comparacion ::= expresion:e1 EQUIVALE expresion:e2 {:
    addInfo("REGLA 13.1: comparacion -> expresion EQUIVALE expresion");
    addInfo("REGLA 13.1: comparacion -> %s == %s", e1, e2);
    RESULT = e1 + "==" + e2 ;
    :}
    | expresion:e1 DIFERENTE expresion:e2 {:
    addInfo("REGLA 13.2: comparacion -> expresion DIFERENTE expresion");
    addInfo("REGLA 13.2: comparacion -> %s != %s", e1, e2);
    RESULT = e1 + "!=" + e2 ;
    :}
    | expresion:e1 MENOR_QUE expresion:e2 {:
    addInfo("REGLA 13.3: comparacion -> expresion MENOR_QUE expresion");
    addInfo("REGLA 13.3: comparacion -> %s < %s", e1, e2);
    RESULT = e1 + "<" + e2 ;
    :}
    | expresion:e1 MAYOR_QUE expresion:e2 {:
    addInfo("REGLA 13.4: comparacion -> expresion MAYOR_QUE expresion");
    addInfo("REGLA 13.4: comparacion -> %s > %s", e1, e2);
    RESULT = e1 + ">" + e2 ;
    :}
    | expresion:e1 MENOR_IGUAL_QUE expresion:e2 {:
    addInfo("REGLA 13.5: comparacion -> expresion MENOR_IGUAL_QUE expresion");
    addInfo("REGLA 13.5: comparacion -> %s <= %s", e1, e2);
    RESULT = e1 + "<=" + e2 ;
    :}
    | expresion:e1 MAYOR_IGUAL_QUE expresion:e2 {:
    addInfo("REGLA 13.6: comparacion -> expresion MAYOR_IGUAL_QUE expresion");
    addInfo("REGLA 13.6: comparacion -> %s >= %s", e1, e2);
    RESULT = e1 + ">=" + e2 ;
:};

expresion ::= expresion:e MAS termino:t {:
    addInfo("REGLA 14.1: expresion -> expresion MAS termino");
    addInfo("REGLA 14.1: expresion -> %s + %s", e, t);
    RESULT = e + "+" + t;
    :}
    | expresion:e MENOS termino:t {:
    addInfo("REGLA 14.2: expresion -> expresion MENOS termino");
    addInfo("REGLA 14.2: expresion -> %s - %s", e, t);
    RESULT = e + "-" + t;
    :}
    | termino:t {:
    addInfo("REGLA 14.3: expresion -> termino");
    addInfo("REGLA 14.3: expresion -> %s", t);
    RESULT = t;
    :};


termino ::= termino:t MULT factor:f {:
    addInfo("REGLA 15.1: termino -> termino MULT factor");
    addInfo("REGLA 15.1: termino -> %s * %s", t, f);
    RESULT = t + "*" + f;
    :}
    | termino:t DIV factor:f {:
    addInfo("REGLA 15.2: termino -> termino DIV factor");
    addInfo("REGLA 15.2: termino -> %s / %s", t, f);
    RESULT = t + "/" + f;
    :}
    | factor:f {:
    addInfo("REGLA 15.3: termino -> factor");
    addInfo("REGLA 15.3: termino -> %s", f);
    RESULT = f;
:};

factor ::= MENOS factor:f {:
    addInfo("REGLA 16.1: factor -> MENOS factor");
    addInfo("REGLA 16.1: factor -> -%s", f);
    RESULT = "-"+f;
    :} %prec MENOS_UNARIO
    | ABRE_PARENTESIS expresion_logica:exp_log CIERRA_PARENTESIS {:
    addInfo("REGLA 16.2: factor -> ABRE_PARENTESIS expresion_logica CIERRA_PARENTESIS");
    addInfo("REGLA 16.2: factor -> (%s)", exp_log);
    RESULT = "(" + exp_log + ")";
    :}
    | IDENTIFICADOR:id {:
    checkSymbol(id);
    addInfo("REGLA 16.3: factor -> IDENTIFICADOR");
    addInfo("REGLA 16.3: factor -> %s", id);
    RESULT = id;
    :}
    | inputs:ip {:
    addInfo("REGLA 16.4: factor -> inputs");
    addInfo("REGLA 16.4: factor -> %s", ip);
    RESULT = ip;
    :}
    | numero_literal:nliteral {:
    addInfo("REGLA 16.5: factor -> numero_literal");
    addInfo("REGLA 16.5: factor -> %s", nliteral);
    RESULT = nliteral;
    :}
    |FLOAT_ARRAY_LITERAL:fal {:
    addInfo("REGLA 16.6: expresion -> FLOAT_ARRAY_LITERAL");
    addInfo("REGLA 16.6: expresion -> %s", fal);
    RESULT = fal;
    :}
    | constante_bool:cb {:
    addInfo("REGLA 16.7: factor -> constante_bool");
    addInfo("REGLA 16.7: factor -> %s", cb);
    RESULT = cb;
    :}
    |valor_mas_cercano:vc {:
    addInfo("REGLA 16.8: factor -> valor_mas_cercano");
    addInfo("REGLA 16.8: factor -> %s", vc);
    RESULT = vc;
    :}
    |all:al {:
    addInfo("REGLA 16.9: factor -> all");
    addInfo("REGLA 16.9: factor -> %s", al);
    RESULT = al;
    :}
    |any:an {:
    addInfo("REGLA 16.10: factor -> any");
    addInfo("REGLA 16.10: factor -> %s ", an );
    RESULT = an;
    :}
    | IDENTIFICADOR:id ABRE_CORCHETE expresion:e CIERRA_CORCHETE {:
    checkSymbol(id);
    addInfo("REGLA 16.11: factor -> IDENTIFICADOR ABRE_CORCHETE expresion CIERRA_CORCHETE");
    addInfo("REGLA 16.11: factor -> %s[ %s ]", id, e);
    RESULT = id + "[" + e + "]";
:};

constante_bool ::= TRUE {:
    addInfo("REGLA 17.1: constante_bool -> TRUE");
    RESULT = "TRUE";
    :}
    |FALSE {:
    addInfo("REGLA 17.2: constante_bool -> FALSE");
    RESULT = "FALSE";
:};

sentenciaDisplay ::= DISPLAY ABRE_PARENTESIS expresion_logica:exp_log CIERRA_PARENTESIS {:
    addInfo("REGLA 18.1: sentenciaDisplay -> DISPLAY ABRE_PARENTESIS expresion_logica CIERRA_PARENTESIS");
    addInfo("REGLA 18.1: sentenciaDisplay -> DISPLAY(%s)" ,exp_log);
    RESULT = "DISPLAY" + "(" + exp_log + ")";
    :}
    | DISPLAY ABRE_PARENTESIS STRING_LITERAL:str_lit CIERRA_PARENTESIS {:
    registerSymbol("CTE_STR", str_lit , "STRING");
    addInfo("REGLA 18.2: sentenciaDisplay -> DISPLAY ABRE_PARENTESIS STRING_LITERAL CIERRA_PARENTESIS");
    addInfo("REGLA 18.2: sentenciaDisplay -> DISPLAY(%s)" ,str_lit);
    RESULT = "DISPLAY" + "(" + str_lit + ")";
:};

inputs ::= INPUT_BOOL:ib ABRE_PARENTESIS CIERRA_PARENTESIS {:
    addInfo("REGLA 19.1: inputs -> INPUT_BOOL ABRE_PARENTESIS CIERRA_PARENTESIS");
    addInfo("REGLA 19.1: inputs -> ( %s )", ib );
    RESULT = ib + "(" + ")";
    :}
    |INPUT_INT:ii ABRE_PARENTESIS CIERRA_PARENTESIS {:
    addInfo("REGLA 19.2: inputs -> INPUT_INT ABRE_PARENTESIS CIERRA_PARENTESIS");
    addInfo("REGLA 19.2: inputs -> ( %s )", ii );
    RESULT = ii + "(" + ")";
    :}
    |INPUT_FLOAT:ifl ABRE_PARENTESIS CIERRA_PARENTESIS {:
    addInfo("REGLA 19.3: inputs -> INPUT_FLOAT ABRE_PARENTESIS CIERRA_PARENTESIS");
    addInfo("REGLA 19.3: inputs -> ( %s )", ifl );
    RESULT = ifl + "(" + ")";
    :}
    |INPUT_ARRAY:ia ABRE_PARENTESIS CIERRA_PARENTESIS {:
    addInfo("REGLA 19.4: inputs -> INPUT_ARRAY ABRE_PARENTESIS CIERRA_PARENTESIS");
    addInfo("REGLA 19.4: inputs -> ( %s )", ia );
    RESULT = ia +  "(" + ")" ;
:};

sentencia_de_seleccion ::= CONDITION expresion_logica:exp_log THEN program_lines:p END {:
    addInfo("REGLA 20.1: sentencia_de_seleccion -> CONDITION expresion_logica THEN program_lines END");
    addInfo("REGLA 20.1: sentencia_de_seleccion -> CONDITION %s THEN %s END", exp_log, p);
    RESULT = "CONDITION" + exp_log + "THEN" + p + "END";
    :}
    | CONDITION expresion_logica:exp_log THEN program_lines:p1 ELSE program_lines:p2 END {:
    addInfo("REGLA 20.2: sentencia_de_seleccion -> CONDITION expresion_logica THEN program_lines ELSE program_lines END");
    addInfo("REGLA 20.2: sentencia_de_seleccion -> CONDITION %s THEN %s ELSE %s END", exp_log, p1, p2);
    RESULT = "CONDITION" + exp_log + "THEN" + p1 + "ELSE" + p2 + "END";
    :}
    | BACKWARD_CONDITION expresion_logica:exp_log THEN program_lines:p END {:
    addInfo("REGLA 20.3: sentencia_de_seleccion -> BACKWARD_CONDITION expresion_logica THEN program_lines END");
    addInfo("REGLA 20.3: sentencia_de_seleccion -> BACKWARD_CONDITION %s THEN %s END", exp_log, p);
    RESULT = "BACKWARD_CONDITION" + exp_log + "THEN" + p + "END";
    :}
    | BACKWARD_CONDITION expresion_logica:exp_log THEN program_lines:p1 ELSE_BACKWARD program_lines:p2 END {:
    addInfo("REGLA 20.4: sentencia_de_seleccion -> CONDITION expresion_logica THEN program_lines ELSE_BACKWARD program_lines END");
    addInfo("REGLA 20.4: sentencia_de_seleccion -> CONDITION %s THEN %s ELSE_BACKWARD %s END", exp_log, p1, p2);
    RESULT = "BACKWARD_CONDITION" + exp_log + "THEN" + p1 + "ELSE_BACKWARD" + p2 + "END";
:};

program_section ::= PROGRAM_SECTION program_lines:p ENDPROGRAM_SECTION {:
    addInfo("REGLA 21.1: program_section -> PROGRAM_SECTION program_lines ENDPROGRAM_SECTION");
    addInfo("REGLA 21.1: program_section -> PROGRAM_SECTION\n\t %s\n ENDPROGRAM_SECTION", p);
    RESULT = "PROGRAM_SECTION\n\t" + p + "\nENDPROGRAM_SECTION" ;
:};

program_lines ::= program_lines:d program_line:e {:
    addInfo("REGLA 22.2: program_lines -> program_line program_lines");
    addInfo("REGLA 22.2: program_lines -> %s\n\t%s", d, e);
    RESULT = d + "\n\t" + e;
     :}
    | program_line:e {:
    addInfo("REGLA 22.1: program_lines -> program_line");
    addInfo("REGLA 22.1: program_lines -> \n\t%s", e);
    RESULT = e;
:};

program_line ::= sentenciaDisplay:s {:
    addInfo("REGLA 23.1: program_line -> sentenciaDisplay");
    addInfo("REGLA 23.1: program_line -> %s",s);
    RESULT = s;
    :}
    | asignacion:a {:
    addInfo("REGLA 23.2: program_line -> asignacion");
    addInfo("REGLA 23.2: program_line -> %s",a);
    RESULT = a;
    :}
    | sentencia_de_seleccion:ss {:
    addInfo("REGLA 23.3: program_line -> sentencia_de_seleccion");
    addInfo("REGLA 23.3: program_line -> %s",ss);
    RESULT = ss;
    :}
    | sentencia_de_iteracion:si {:
    addInfo("REGLA 24.4: program_line -> sentencia_de_iteracion");
    addInfo("REGLA 24.4: program_line -> %s",si);
    RESULT = si;
:};

numero_literal ::= FLOTANTE_LITERAL:fl {:
    addInfo("REGLA 25.1: literalNumber -> FLOTANTE_LITERAL");
    addInfo("REGLA 25.1: literalNumber -> %s", fl);
    RESULT = fl;
    :}
    |ENTERO_LITERAL:il {:
    addInfo("REGLA 25.2: literalNumber -> ENTERO_LITERAL");
    addInfo("REGLA 25.2: literalNumber -> %s", il);
    RESULT = il;
:};

sentencia_de_iteracion ::= LOOP WHEN expresion_logica:exp_log THEN program_lines_loop:p END_LOOP{:
        addInfo("REGLA 26.1: sentencia_de_iteracion -> LOOP WHEN expresion_logica THEN program_lines_loop END_LOOP");
        addInfo("REGLA 26.1: sentencia_de_iteracion -> LOOP WHEN %s THEN %s END_LOOP", exp_log, p);
        RESULT = "LOOP" + "WHEN" + exp_log + "THEN" + p + "END_LOOP";
    :}
    | BACKWARD_LOOP WHEN expresion_logica:exp_log THEN program_lines_loop:p END_LOOP{:
        addInfo("REGLA 26.2: sentencia_de_iteracion -> BACKWARD_LOOP WHEN expresion_logica THEN program_lines_loop END_LOOP");
        addInfo("REGLA 26.2: sentencia_de_iteracion -> BACKWARD_LOOP WHEN %s THEN %s END_LOOP", exp_log, p);
        RESULT = "BACKWARD_LOOP" + "WHEN" + exp_log + "THEN" + p + "END_LOOP";
    :};

program_lines_loop ::= program_lines_loop:d program_line_loop:e {:
        addInfo("REGLA 27.2: program_lines -> program_line_loop program_line_loop");
        addInfo("REGLA 27.2: program_lines_loop -> %s\n\t%s", d, e);
        RESULT = d + "\n\t" + e;
    :}
    | program_line_loop:p {:
        addInfo("REGLA 27.3: program_lines -> program_line_loop");
        addInfo("REGLA 27.3: program_lines -> %s", p);
         RESULT = p ;
    :};

program_line_loop ::= program_line:p {:
        addInfo("REGLA 28.1: program_line_loop -> program_line");
        addInfo("REGLA 28.1: program_line -> %s", p);
        RESULT = p;
    :}
    |BREAK {:
        addInfo("REGLA 28.2: program_line -> BREAK");
        RESULT = "BREAK" ;
    :}
    |CONTINUE {:
        addInfo("REGLA 28.3: program_line -> CONTINUE");
        RESULT = "CONTINUE";
:};
