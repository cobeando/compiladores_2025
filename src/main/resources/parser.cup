package ar.edu.unnoba.comp.compilertp;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.Hashtable;

class MiParser;

action code {:
    Hashtable table = new Hashtable();
:};

/* TODO: revisar si es útil para nuestro caso. Es el ejemplo del profe.*/

parser code
{:
    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

:};

    /* Definición de Simbolos */

terminal ArrayList FLOAT_ARRAY;

terminal String BOOLEAN, FALSE, TRUE, CADENA, ENTERO_LITERAL, FLOTANTE_LITERAL, CADENA_LITERAL, DUPLA_LITERAL, IDENTIFICADOR;

//Objects
terminal ENTERO, FLOTANTE;

terminal AND, OR, NOT;

terminal LOOP, WHEN, BACKWARD_LOOP, END_LOOP, CONTINUE, BREAK;

terminal CONDITION, BACKWARD_CONDITION, THEN, END, ELSE, ELSE_BACKWARD, DISPLAY;

terminal ANY, ALL;

terminal INPUT_INT, INPUT_FLOAT, INPUT_BOOL, INPUT_ARRAY;

terminal DECLARE_SECTION, ENDDECLARE_SECTION, VALOR_MAS_CERCANO;

//Operaciones

terminal IGUAL, EQUIVALE, MAS, MENOS, MENOR_IGUAL_QUE, MULT, DIV, MENOS_UNARIO;
terminal MENOR_QUE, MAS, MAYOR_IGUAL_QUE, MENOR_IGUAL_QUE, DIFERENTE;
terminal ABRE_PARENTESIS, CIERRA_PARENTESIS, ABRE_CORCHETE, CIERRA_CORCHETE, PUNTO, PUNTO_COMA, COMA, DOS_PUNTOS;

nonterminal CompareCondition  comparacion;
nonterminal Factor termino, factor;
nonterminal BooleanCondition constante_bool;
nonterminal Expression expresion_logica;
nonterminal Expression expresion_simple, expresion;
nonterminal Input inputs;
nonterminal String numberList, ID_list,  literalNumber, data_type;
nonterminal Program program;
nonterminal StatementList program_lines, declarations, declaration_section, program_section;
nonterminal DeclareStatement declaration;
nonterminal RepeatStatement sentenciaRepeat;
nonterminal Statement program_line, sentencia_de_seleccion, asignacion, sentenciaShow;

precedence left MAS, MENOS;
precedence left MULT, DIV;
precedence left MENOS_UNARIO;
precedence left AND;
precedence right NOT;

start with program;

expresion_simple ::= comparacion:cond {:
    addInfo("REGLA 16.1: expresion_simple -> comparacion");
    addInfo("REGLA 16.1: expresion_simple -> %s", cond);
    RESULT = cond;
    :}
    | expresion:e {:
    addInfo("REGLA 16.2: expresion_simple -> expresion");
    addInfo("REGLA 16.2: expresion_simple -> %s",e);
    RESULT = e;
    :};

comparacion ::= expresion:e1 EQUIVALE expresion:e2 {:
    addInfo("REGLA 17.1: comparacion -> expresion EQUIVALE expresion");
    addInfo("REGLA 17.1: comparacion -> %s == %s", e1, e2);
    RESULT = new CompareCondition(e1, "==", e2);
    :}
    | expresion:e1 DIFERENTE expresion:e2 {:
    addInfo("REGLA 17.2: comparacion -> expresion DIFERENTE expresion");
    addInfo("REGLA 17.2: comparacion -> %s != %s", e1, e2);
    RESULT = new CompareCondition(e1, "!=", e2);
    :}
    | expresion:e1 MENOR_QUE expresion:e2 {:
    addInfo("REGLA 17.3: comparacion -> expresion MENOR_QUE expresion");
    addInfo("REGLA 17.3: comparacion -> %s < %s", e1, e2);
    RESULT = new CompareCondition(e1, "<", e2);
    :}
    | expresion:e1 MAYOR_QUE expresion:e2 {:
    addInfo("REGLA 17.4: comparacion -> expresion MAYOR_QUE expresion");
    addInfo("REGLA 17.4: comparacion -> %s > %s", e1, e2);
    RESULT = new CompareCondition(e1, ">", e2);
    :}
    | expresion:e1 MENOR_IGUAL_QUE expresion:e2 {:
    addInfo("REGLA 17.5: comparacion -> expresion MENOR_IGUAL_QUE expresion");
    addInfo("REGLA 17.5: comparacion -> %s <= %s", e1, e2);
    RESULT = new CompareCondition(e1, "<=", e2);
    :}
    | expresion:e1 MAYOR_IGUAL_QUE expresion:e2 {:
    addInfo("REGLA 17.6: comparacion -> expresion MAYOR_IGUAL_QUE expresion");
    addInfo("REGLA 17.6: comparacion -> %s >= %s", e1, e2);
    RESULT = new CompareCondition(e1, ">=", e2);
    :};

expresion ::= expresion:e MAS termino:t {:
    addInfo("REGLA 18.1: expresion -> expresion MAS termino");
    addInfo("REGLA 18.1: expresion -> %s + %s", e, t);
    RESULT = new PlusOperation(e,t);
    :}
    | expresion:e MENOS termino:t {:
    addInfo("REGLA 18.2: expresion -> expresion MENOS termino");
    addInfo("REGLA 18.2: expresion -> %s - %s", e, t);
    RESULT = new MinusOperation(e,t);
    :}
    | termino:t {:
    addInfo("REGLA 18.3: expresion -> termino");
    addInfo("REGLA 18.3: expresion -> %s", t);
    RESULT = t;
    :};

termino ::= termino:t MULT factor:f {:
    addInfo("REGLA 19.1: termino -> termino MULT factor");
    addInfo("REGLA 19.1: termino -> %s * %s", t, f);
    RESULT = new MultiplyOperation(t,f);
    :}
    | termino:t DIV factor:f {:
    addInfo("REGLA 19.2: termino -> termino DIV factor");
    addInfo("REGLA 19.2: termino -> %s / %s", t, f);
    RESULT = new DivideOperation(t,f);
    :}
    | factor:f {:
    addInfo("REGLA 19.3: termino -> factor");
    addInfo("REGLA 19.3: termino -> %s", f);
    RESULT = f;
    :};