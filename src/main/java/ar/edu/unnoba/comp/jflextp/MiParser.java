
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package ar.edu.unnoba.comp.jflextp;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Hashtable;
import java.lang.StringBuilder;
import ar.edu.unnoba.comp.jflextp.utils.SymbolTable;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MiParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return MiParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public MiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\022\004\000\002\022" +
    "\003\000\002\002\005\000\002\003\003\000\002\003\004" +
    "\000\002\004\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\006\000\002\006\005\000\002" +
    "\006\003\000\002\010\012\000\002\035\012\000\002\035" +
    "\012\000\002\035\012\000\002\035\012\000\002\035\012" +
    "\000\002\035\012\000\002\034\012\000\002\034\012\000" +
    "\002\034\012\000\002\034\012\000\002\034\012\000\002" +
    "\034\012\000\002\007\005\000\002\007\003\000\002\027" +
    "\005\000\002\015\004\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\016\003\000\002\016\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\003\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\004\000" +
    "\002\013\005\000\002\013\003\000\002\013\003\000\002" +
    "\036\002\000\002\013\005\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\014\003" +
    "\000\002\014\003\000\002\030\006\000\002\030\006\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\005\000\002\026\007\000\002\026\011\000\002\026" +
    "\007\000\002\026\011\000\002\024\005\000\002\023\004" +
    "\000\002\023\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\021\006\000\002" +
    "\021\003\000\002\021\003\000\002\031\010\000\002\031" +
    "\010\000\002\033\004\000\002\033\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\045\005\047\010\001\002\000\004\002" +
    "\320\001\002\000\016\004\251\022\241\024\242\030\245" +
    "\031\244\036\240\001\002\000\004\002\uffff\001\002\000" +
    "\004\045\005\001\002\000\012\011\017\012\013\013\011" +
    "\014\015\001\002\000\004\070\027\001\002\000\014\011" +
    "\017\012\013\013\011\014\015\050\025\001\002\000\004" +
    "\073\ufff9\001\002\000\004\073\020\001\002\000\004\073" +
    "\ufff8\001\002\000\014\011\ufffd\012\ufffd\013\ufffd\014\ufffd" +
    "\050\ufffd\001\002\000\004\073\ufffa\001\002\000\004\004" +
    "\022\001\002\000\014\011\ufffb\012\ufffb\013\ufffb\014\ufffb" +
    "\050\ufffb\001\002\000\016\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\050\ufff5\072\023\001\002\000\004\004\022\001\002" +
    "\000\014\011\ufff6\012\ufff6\013\ufff6\014\ufff6\050\ufff6\001" +
    "\002\000\004\045\ufffe\001\002\000\014\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\050\ufffc\001\002\000\036\004\052\005" +
    "\042\010\047\015\050\016\040\037\046\040\033\041\037" +
    "\042\053\043\056\044\035\051\041\055\030\066\055\001" +
    "\002\000\036\004\052\005\042\010\047\015\050\016\040" +
    "\037\046\040\033\041\037\042\053\043\056\044\035\051" +
    "\041\055\030\066\055\001\002\000\074\004\uffca\017\uffca" +
    "\020\uffca\022\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\046\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\061" +
    "\uffca\062\uffca\063\uffca\064\uffca\065\uffca\067\uffca\071\uffca" +
    "\072\uffca\001\002\000\074\004\uffcf\017\uffcf\020\uffcf\022" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf" +
    "\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\046\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\064\uffcf\065\uffcf\067\uffcf\071\uffcf\072\uffcf\001" +
    "\002\000\004\066\201\001\002\000\010\054\076\055\103" +
    "\071\200\001\002\000\004\066\176\001\002\000\074\004" +
    "\uffcc\017\uffcc\020\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\uffcc\046\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\067" +
    "\uffcc\071\uffcc\072\uffcc\001\002\000\004\066\174\001\002" +
    "\000\074\004\uffc8\017\uffc8\020\uffc8\022\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\046\uffc8\053\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\057\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\067\uffc8\071\uffc8\072\uffc8\001\002\000\004\066" +
    "\162\001\002\000\004\006\uffb3\001\002\000\074\004\uffc9" +
    "\017\uffc9\020\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\046\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\065\uffc9\067\uffc9" +
    "\071\uffc9\072\uffc9\001\002\000\074\004\uffd3\017\uffd3\020" +
    "\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\046" +
    "\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\061\uffd3" +
    "\062\uffd3\063\uffd3\064\uffd3\065\uffd3\067\uffd3\071\uffd3\072" +
    "\uffd3\001\002\000\074\004\uffd6\017\uffd6\020\uffd6\022\uffd6" +
    "\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\046\uffd6\053\uffd6" +
    "\054\uffd6\055\uffd6\056\105\057\106\061\uffd6\062\uffd6\063" +
    "\uffd6\064\uffd6\065\uffd6\067\uffd6\071\uffd6\072\uffd6\001\002" +
    "\000\004\066\127\001\002\000\004\006\uffb4\001\002\000" +
    "\074\004\uffc7\017\uffc7\020\uffc7\022\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034" +
    "\uffc7\035\uffc7\036\uffc7\046\uffc7\053\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\067\uffc7\071\uffc7\072\uffc7\001\002\000\074\004\uffcb" +
    "\017\uffcb\020\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\046\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\067\uffcb" +
    "\071\uffcb\072\uffcb\001\002\000\076\004\uffd0\017\uffd0\020" +
    "\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\046" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\061\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\065\uffd0\067\uffd0\070\124\071" +
    "\uffd0\072\uffd0\001\002\000\004\066\122\001\002\000\004" +
    "\006\uffce\001\002\000\040\004\052\005\042\010\047\015" +
    "\050\016\040\021\062\037\046\040\033\041\037\042\053" +
    "\043\056\044\035\051\041\055\030\066\055\001\002\000" +
    "\004\066\057\001\002\000\004\067\060\001\002\000\074" +
    "\004\uffc4\017\uffc4\020\uffc4\022\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\035\uffc4\036\uffc4\046\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\067\uffc4\071\uffc4\072\uffc4\001\002\000\064\004\uffdf\017" +
    "\uffdf\020\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\046\uffdf\053\074\054\076\055\103\061\075\062\101" +
    "\063\100\064\077\065\102\067\uffdf\001\002\000\040\004" +
    "\052\005\042\010\047\015\050\016\040\021\062\037\046" +
    "\040\033\041\037\042\053\043\056\044\035\051\041\055" +
    "\030\066\055\001\002\000\044\004\uffe1\017\uffe1\020\uffe1" +
    "\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031" +
    "\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\046\uffe1" +
    "\067\uffe1\001\002\000\010\017\067\020\070\067\066\001" +
    "\002\000\044\004\uffe0\017\uffe0\020\uffe0\022\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033" +
    "\uffe0\034\uffe0\035\uffe0\036\uffe0\046\uffe0\067\uffe0\001\002" +
    "\000\074\004\uffd1\017\uffd1\020\uffd1\022\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\046\uffd1\053\uffd1\054\uffd1\055" +
    "\uffd1\056\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1\064\uffd1" +
    "\065\uffd1\067\uffd1\071\uffd1\072\uffd1\001\002\000\036\004" +
    "\052\005\042\010\047\015\050\016\040\037\046\040\033" +
    "\041\037\042\053\043\056\044\035\051\041\055\030\066" +
    "\055\001\002\000\036\004\052\005\042\010\047\015\050" +
    "\016\040\037\046\040\033\041\037\042\053\043\056\044" +
    "\035\051\041\055\030\066\055\001\002\000\044\004\uffe3" +
    "\017\uffe3\020\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\046\uffe3\067\uffe3\001\002\000\044\004\uffe2\017" +
    "\uffe2\020\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\046\uffe2\067\uffe2\001\002\000\044\004\uffe4\017\uffe4" +
    "\020\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4" +
    "\046\uffe4\067\uffe4\001\002\000\036\004\052\005\042\010" +
    "\047\015\050\016\040\037\046\040\033\041\037\042\053" +
    "\043\056\044\035\051\041\055\030\066\055\001\002\000" +
    "\036\004\052\005\042\010\047\015\050\016\040\037\046" +
    "\040\033\041\037\042\053\043\056\044\035\051\041\055" +
    "\030\066\055\001\002\000\036\004\052\005\042\010\047" +
    "\015\050\016\040\037\046\040\033\041\037\042\053\043" +
    "\056\044\035\051\041\055\030\066\055\001\002\000\036" +
    "\004\052\005\042\010\047\015\050\016\040\037\046\040" +
    "\033\041\037\042\053\043\056\044\035\051\041\055\030" +
    "\066\055\001\002\000\036\004\052\005\042\010\047\015" +
    "\050\016\040\037\046\040\033\041\037\042\053\043\056" +
    "\044\035\051\041\055\030\066\055\001\002\000\036\004" +
    "\052\005\042\010\047\015\050\016\040\037\046\040\033" +
    "\041\037\042\053\043\056\044\035\051\041\055\030\066" +
    "\055\001\002\000\036\004\052\005\042\010\047\015\050" +
    "\016\040\037\046\040\033\041\037\042\053\043\056\044" +
    "\035\051\041\055\030\066\055\001\002\000\036\004\052" +
    "\005\042\010\047\015\050\016\040\037\046\040\033\041" +
    "\037\042\053\043\056\044\035\051\041\055\030\066\055" +
    "\001\002\000\074\004\uffd7\017\uffd7\020\uffd7\022\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\046\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\105\057\106\061\uffd7\062\uffd7\063\uffd7" +
    "\064\uffd7\065\uffd7\067\uffd7\071\uffd7\072\uffd7\001\002\000" +
    "\036\004\052\005\042\010\047\015\050\016\040\037\046" +
    "\040\033\041\037\042\053\043\056\044\035\051\041\055" +
    "\030\066\055\001\002\000\036\004\052\005\042\010\047" +
    "\015\050\016\040\037\046\040\033\041\037\042\053\043" +
    "\056\044\035\051\041\055\030\066\055\001\002\000\074" +
    "\004\uffd4\017\uffd4\020\uffd4\022\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\046\uffd4\053\uffd4\054\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\065\uffd4" +
    "\067\uffd4\071\uffd4\072\uffd4\001\002\000\074\004\uffd5\017" +
    "\uffd5\020\uffd5\022\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\046\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\064\uffd5\065\uffd5\067\uffd5\071" +
    "\uffd5\072\uffd5\001\002\000\050\004\uffdd\017\uffdd\020\uffdd" +
    "\022\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\046\uffdd" +
    "\054\076\055\103\067\uffdd\001\002\000\050\004\uffdc\017" +
    "\uffdc\020\uffdc\022\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036" +
    "\uffdc\046\uffdc\054\076\055\103\067\uffdc\001\002\000\050" +
    "\004\uffd9\017\uffd9\020\uffd9\022\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\046\uffd9\054\076\055\103\067\uffd9\001" +
    "\002\000\050\004\uffda\017\uffda\020\uffda\022\uffda\024\uffda" +
    "\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\034\uffda\035\uffda\036\uffda\046\uffda\054\076\055\103" +
    "\067\uffda\001\002\000\074\004\uffd8\017\uffd8\020\uffd8\022" +
    "\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8" +
    "\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\046\uffd8\053" +
    "\uffd8\054\uffd8\055\uffd8\056\105\057\106\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\067\uffd8\071\uffd8\072\uffd8\001" +
    "\002\000\050\004\uffdb\017\uffdb\020\uffdb\022\uffdb\024\uffdb" +
    "\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033" +
    "\uffdb\034\uffdb\035\uffdb\036\uffdb\046\uffdb\054\076\055\103" +
    "\067\uffdb\001\002\000\050\004\uffde\017\uffde\020\uffde\022" +
    "\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\033\uffde\034\uffde\035\uffde\036\uffde\046\uffde\054" +
    "\076\055\103\067\uffde\001\002\000\004\006\121\001\002" +
    "\000\074\004\uffcd\017\uffcd\020\uffcd\022\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\046\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\057\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\067\uffcd\071\uffcd\072\uffcd\001\002\000\004\067" +
    "\123\001\002\000\074\004\uffc2\017\uffc2\020\uffc2\022\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\046\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\061\uffc2\062\uffc2\063" +
    "\uffc2\064\uffc2\065\uffc2\067\uffc2\071\uffc2\072\uffc2\001\002" +
    "\000\036\004\052\005\042\010\047\015\050\016\040\037" +
    "\046\040\033\041\037\042\053\043\056\044\035\051\041" +
    "\055\030\066\055\001\002\000\010\054\076\055\103\071" +
    "\126\001\002\000\004\006\uffb5\001\002\000\036\004\052" +
    "\005\042\010\047\015\050\016\040\037\046\040\033\041" +
    "\037\042\053\043\056\044\035\051\041\055\030\066\055" +
    "\001\002\000\010\054\076\055\103\072\131\001\002\000" +
    "\016\053\132\061\135\062\136\063\134\064\133\065\137" +
    "\001\002\000\004\072\157\001\002\000\004\072\154\001" +
    "\002\000\004\072\151\001\002\000\004\072\146\001\002" +
    "\000\004\072\143\001\002\000\004\072\140\001\002\000" +
    "\004\004\141\001\002\000\004\067\142\001\002\000\074" +
    "\004\uffec\017\uffec\020\uffec\022\uffec\024\uffec\025\uffec\026" +
    "\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec" +
    "\035\uffec\036\uffec\046\uffec\053\uffec\054\uffec\055\uffec\056" +
    "\uffec\057\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec" +
    "\067\uffec\071\uffec\072\uffec\001\002\000\004\004\144\001" +
    "\002\000\004\067\145\001\002\000\074\004\uffeb\017\uffeb" +
    "\020\uffeb\022\uffeb\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\046\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\061" +
    "\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\067\uffeb\071\uffeb" +
    "\072\uffeb\001\002\000\004\004\147\001\002\000\004\067" +
    "\150\001\002\000\074\004\uffea\017\uffea\020\uffea\022\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\046\uffea\053\uffea" +
    "\054\uffea\055\uffea\056\uffea\057\uffea\061\uffea\062\uffea\063" +
    "\uffea\064\uffea\065\uffea\067\uffea\071\uffea\072\uffea\001\002" +
    "\000\004\004\152\001\002\000\004\067\153\001\002\000" +
    "\074\004\uffe8\017\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034" +
    "\uffe8\035\uffe8\036\uffe8\046\uffe8\053\uffe8\054\uffe8\055\uffe8" +
    "\056\uffe8\057\uffe8\061\uffe8\062\uffe8\063\uffe8\064\uffe8\065" +
    "\uffe8\067\uffe8\071\uffe8\072\uffe8\001\002\000\004\004\155" +
    "\001\002\000\004\067\156\001\002\000\074\004\uffe9\017" +
    "\uffe9\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\046\uffe9\053\uffe9\054\uffe9\055\uffe9\056\uffe9\057\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\067\uffe9\071" +
    "\uffe9\072\uffe9\001\002\000\004\004\160\001\002\000\004" +
    "\067\161\001\002\000\074\004\uffed\017\uffed\020\uffed\022" +
    "\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed\046\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\057\uffed\061\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\067\uffed\071\uffed\072\uffed\001" +
    "\002\000\004\005\163\001\002\000\004\072\164\001\002" +
    "\000\004\070\165\001\002\000\004\005\167\001\002\000" +
    "\006\071\171\072\170\001\002\000\006\071\uffe6\072\uffe6" +
    "\001\002\000\004\005\173\001\002\000\004\067\172\001" +
    "\002\000\074\004\ufff4\017\ufff4\020\ufff4\022\ufff4\024\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\046\ufff4\053\ufff4\054\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\061\ufff4\062\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\067\ufff4\071\ufff4\072\ufff4\001\002\000\006" +
    "\071\uffe7\072\uffe7\001\002\000\004\067\175\001\002\000" +
    "\074\004\uffc3\017\uffc3\020\uffc3\022\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\046\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\067\uffc3\071\uffc3\072\uffc3\001\002\000\004\067\177" +
    "\001\002\000\074\004\uffc1\017\uffc1\020\uffc1\022\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\034\uffc1\035\uffc1\036\uffc1\046\uffc1\053\uffc1\054" +
    "\uffc1\055\uffc1\056\uffc1\057\uffc1\061\uffc1\062\uffc1\063\uffc1" +
    "\064\uffc1\065\uffc1\067\uffc1\071\uffc1\072\uffc1\001\002\000" +
    "\004\073\ufff7\001\002\000\036\004\052\005\042\010\047" +
    "\015\050\016\040\037\046\040\033\041\037\042\053\043" +
    "\056\044\035\051\041\055\030\066\055\001\002\000\010" +
    "\054\076\055\103\072\203\001\002\000\016\053\204\061" +
    "\206\062\210\063\205\064\207\065\211\001\002\000\004" +
    "\072\231\001\002\000\004\072\226\001\002\000\004\072" +
    "\223\001\002\000\004\072\220\001\002\000\004\072\215" +
    "\001\002\000\004\072\212\001\002\000\004\004\213\001" +
    "\002\000\004\067\214\001\002\000\074\004\ufff2\017\ufff2" +
    "\020\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\046\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\061" +
    "\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\067\ufff2\071\ufff2" +
    "\072\ufff2\001\002\000\004\004\216\001\002\000\004\067" +
    "\217\001\002\000\074\004\ufff1\017\ufff1\020\ufff1\022\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\031\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\046\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\056\ufff1\057\ufff1\061\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\067\ufff1\071\ufff1\072\ufff1\001\002" +
    "\000\004\004\221\001\002\000\004\067\222\001\002\000" +
    "\074\004\uffef\017\uffef\020\uffef\022\uffef\024\uffef\025\uffef" +
    "\026\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\046\uffef\053\uffef\054\uffef\055\uffef" +
    "\056\uffef\057\uffef\061\uffef\062\uffef\063\uffef\064\uffef\065" +
    "\uffef\067\uffef\071\uffef\072\uffef\001\002\000\004\004\224" +
    "\001\002\000\004\067\225\001\002\000\074\004\ufff0\017" +
    "\ufff0\020\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036" +
    "\ufff0\046\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\061\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\067\ufff0\071" +
    "\ufff0\072\ufff0\001\002\000\004\004\227\001\002\000\004" +
    "\067\230\001\002\000\074\004\uffee\017\uffee\020\uffee\022" +
    "\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031\uffee" +
    "\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\046\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\057\uffee\061\uffee\062\uffee" +
    "\063\uffee\064\uffee\065\uffee\067\uffee\071\uffee\072\uffee\001" +
    "\002\000\004\004\232\001\002\000\004\067\233\001\002" +
    "\000\074\004\ufff3\017\ufff3\020\ufff3\022\ufff3\024\ufff3\025" +
    "\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\046\ufff3\053\ufff3\054\ufff3\055" +
    "\ufff3\056\ufff3\057\ufff3\061\ufff3\062\ufff3\063\ufff3\064\ufff3" +
    "\065\ufff3\067\ufff3\071\ufff3\072\ufff3\001\002\000\074\004" +
    "\uffd2\017\uffd2\020\uffd2\022\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\046\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2" +
    "\057\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2\065\uffd2\067" +
    "\uffd2\071\uffd2\072\uffd2\001\002\000\004\002\000\001\002" +
    "\000\034\004\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\027" +
    "\uffb6\030\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6\036\uffb6" +
    "\046\uffb6\001\002\000\034\004\uffb9\022\uffb9\024\uffb9\025" +
    "\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\046\uffb9\001\002\000\004\066\313\001" +
    "\002\000\004\023\306\001\002\000\004\023\274\001\002" +
    "\000\034\004\uffb8\022\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\046\uffb8\001\002\000\040\004\052\005\042\010\047\015" +
    "\050\016\040\021\062\037\046\040\033\041\037\042\053" +
    "\043\056\044\035\051\041\055\030\066\055\001\002\000" +
    "\040\004\052\005\042\010\047\015\050\016\040\021\062" +
    "\037\046\040\033\041\037\042\053\043\056\044\035\051" +
    "\041\055\030\066\055\001\002\000\026\004\uffba\022\uffba" +
    "\024\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\036" +
    "\uffba\046\uffba\001\002\000\020\004\251\022\241\024\242" +
    "\030\245\031\244\036\240\046\254\001\002\000\034\004" +
    "\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\046\uffb7\001" +
    "\002\000\004\052\252\001\002\000\040\004\052\005\042" +
    "\010\047\015\050\016\040\021\062\037\046\040\033\041" +
    "\037\042\053\043\056\044\035\051\041\055\030\066\055" +
    "\001\002\000\040\004\uffe5\017\067\020\070\022\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5" +
    "\034\uffe5\035\uffe5\036\uffe5\046\uffe5\001\002\000\004\002" +
    "\uffbc\001\002\000\026\004\uffbb\022\uffbb\024\uffbb\030\uffbb" +
    "\031\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\046\uffbb\001" +
    "\002\000\010\017\067\020\070\032\257\001\002\000\016" +
    "\004\251\022\241\024\242\030\245\031\244\036\240\001" +
    "\002\000\022\004\251\022\241\024\242\030\245\031\244" +
    "\033\262\034\261\036\240\001\002\000\016\004\251\022" +
    "\241\024\242\030\245\031\244\036\240\001\002\000\034" +
    "\004\uffc0\022\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030" +
    "\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\046\uffc0" +
    "\001\002\000\020\004\251\022\241\024\242\030\245\031" +
    "\244\033\264\036\240\001\002\000\034\004\uffbf\022\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\036\uffbf\046\uffbf\001\002\000\010" +
    "\017\067\020\070\032\266\001\002\000\016\004\251\022" +
    "\241\024\242\030\245\031\244\036\240\001\002\000\022" +
    "\004\251\022\241\024\242\030\245\031\244\033\271\035" +
    "\270\036\240\001\002\000\016\004\251\022\241\024\242" +
    "\030\245\031\244\036\240\001\002\000\034\004\uffbe\022" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\046\uffbe\001\002\000" +
    "\020\004\251\022\241\024\242\030\245\031\244\033\273" +
    "\036\240\001\002\000\034\004\uffbd\022\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\036\uffbd\046\uffbd\001\002\000\040\004\052\005" +
    "\042\010\047\015\050\016\040\021\062\037\046\040\033" +
    "\041\037\042\053\043\056\044\035\051\041\055\030\066" +
    "\055\001\002\000\010\017\067\020\070\032\276\001\002" +
    "\000\022\004\251\022\241\024\242\026\302\027\303\030" +
    "\245\031\244\036\240\001\002\000\024\004\251\022\241" +
    "\024\242\025\305\026\302\027\303\030\245\031\244\036" +
    "\240\001\002\000\024\004\uffae\022\uffae\024\uffae\025\uffae" +
    "\026\uffae\027\uffae\030\uffae\031\uffae\036\uffae\001\002\000" +
    "\024\004\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\036\uffaf\001\002\000\024\004\uffac\022" +
    "\uffac\024\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac" +
    "\036\uffac\001\002\000\024\004\uffad\022\uffad\024\uffad\025" +
    "\uffad\026\uffad\027\uffad\030\uffad\031\uffad\036\uffad\001\002" +
    "\000\024\004\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\027" +
    "\uffb0\030\uffb0\031\uffb0\036\uffb0\001\002\000\034\004\uffb1" +
    "\022\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031" +
    "\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1\046\uffb1\001\002" +
    "\000\040\004\052\005\042\010\047\015\050\016\040\021" +
    "\062\037\046\040\033\041\037\042\053\043\056\044\035" +
    "\051\041\055\030\066\055\001\002\000\010\017\067\020" +
    "\070\032\310\001\002\000\022\004\251\022\241\024\242" +
    "\026\302\027\303\030\245\031\244\036\240\001\002\000" +
    "\024\004\251\022\241\024\242\025\312\026\302\027\303" +
    "\030\245\031\244\036\240\001\002\000\034\004\uffb2\022" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\036\uffb2\046\uffb2\001\002\000" +
    "\042\004\052\005\042\007\314\010\047\015\050\016\040" +
    "\021\062\037\046\040\033\041\037\042\053\043\056\044" +
    "\035\051\041\055\030\066\055\001\002\000\004\067\317" +
    "\001\002\000\010\017\067\020\070\067\316\001\002\000" +
    "\034\004\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6" +
    "\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\046" +
    "\uffc6\001\002\000\034\004\uffc5\022\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5\035" +
    "\uffc5\036\uffc5\046\uffc5\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\010\002\006\022\003\024\005\001\001\000" +
    "\002\001\001\000\016\023\246\025\245\026\247\027\242" +
    "\030\236\031\235\001\001\000\002\001\001\000\004\024" +
    "\234\001\001\000\010\003\011\004\015\005\013\001\001" +
    "\000\002\001\001\000\006\004\025\005\013\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\010\050\012\044\013\043\014\035\017\033\020\031" +
    "\021\053\034\042\035\030\001\001\000\020\010\050\013" +
    "\233\014\035\020\031\021\053\034\042\035\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\036\117\001\001\000\032\010\050\011\064\012\044\013" +
    "\043\014\035\015\063\016\062\017\060\020\031\021\053" +
    "\034\042\035\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\010\050" +
    "\011\064\012\044\013\043\014\035\015\072\016\062\017" +
    "\060\020\031\021\053\034\042\035\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\050\011\064\012\044\013\043\014\035" +
    "\016\071\017\060\020\031\021\053\034\042\035\030\001" +
    "\001\000\030\010\050\011\064\012\044\013\043\014\035" +
    "\016\070\017\060\020\031\021\053\034\042\035\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\010\050\012\044\013\043\014\035\017\116\020" +
    "\031\021\053\034\042\035\030\001\001\000\024\010\050" +
    "\012\044\013\043\014\035\017\115\020\031\021\053\034" +
    "\042\035\030\001\001\000\022\010\050\012\114\013\043" +
    "\014\035\020\031\021\053\034\042\035\030\001\001\000" +
    "\024\010\050\012\044\013\043\014\035\017\113\020\031" +
    "\021\053\034\042\035\030\001\001\000\024\010\050\012" +
    "\044\013\043\014\035\017\112\020\031\021\053\034\042" +
    "\035\030\001\001\000\024\010\050\012\044\013\043\014" +
    "\035\017\111\020\031\021\053\034\042\035\030\001\001" +
    "\000\024\010\050\012\044\013\043\014\035\017\110\020" +
    "\031\021\053\034\042\035\030\001\001\000\022\010\050" +
    "\012\103\013\043\014\035\020\031\021\053\034\042\035" +
    "\030\001\001\000\002\001\001\000\020\010\050\013\107" +
    "\014\035\020\031\021\053\034\042\035\030\001\001\000" +
    "\020\010\050\013\106\014\035\020\031\021\053\034\042" +
    "\035\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\010\050\012\044\013\043\014" +
    "\035\017\124\020\031\021\053\034\042\035\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\010\050\012" +
    "\044\013\043\014\035\017\127\020\031\021\053\034\042" +
    "\035\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\010\050\012\044\013\043\014\035\017\201" +
    "\020\031\021\053\034\042\035\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\050\011\064\012\044\013\043" +
    "\014\035\015\264\016\062\017\060\020\031\021\053\034" +
    "\042\035\030\001\001\000\032\010\050\011\064\012\044" +
    "\013\043\014\035\015\255\016\062\017\060\020\031\021" +
    "\053\034\042\035\030\001\001\000\002\001\001\000\014" +
    "\025\254\026\247\027\242\030\236\031\235\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\010\050\011\064" +
    "\012\044\013\043\014\035\015\252\016\062\017\060\020" +
    "\031\021\053\034\042\035\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\023\257\025\245\026\247\027\242\030\236\031\235" +
    "\001\001\000\014\025\254\026\247\027\242\030\236\031" +
    "\235\001\001\000\016\023\262\025\245\026\247\027\242" +
    "\030\236\031\235\001\001\000\002\001\001\000\014\025" +
    "\254\026\247\027\242\030\236\031\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\023\266\025\245\026" +
    "\247\027\242\030\236\031\235\001\001\000\014\025\254" +
    "\026\247\027\242\030\236\031\235\001\001\000\016\023" +
    "\271\025\245\026\247\027\242\030\236\031\235\001\001" +
    "\000\002\001\001\000\014\025\254\026\247\027\242\030" +
    "\236\031\235\001\001\000\002\001\001\000\032\010\050" +
    "\011\064\012\044\013\043\014\035\015\274\016\062\017" +
    "\060\020\031\021\053\034\042\035\030\001\001\000\002" +
    "\001\001\000\020\025\277\026\247\027\242\030\236\031" +
    "\235\032\300\033\276\001\001\000\016\025\277\026\247" +
    "\027\242\030\236\031\235\032\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\010\050\011" +
    "\064\012\044\013\043\014\035\015\306\016\062\017\060" +
    "\020\031\021\053\034\042\035\030\001\001\000\002\001" +
    "\001\000\020\025\277\026\247\027\242\030\236\031\235" +
    "\032\300\033\310\001\001\000\016\025\277\026\247\027" +
    "\242\030\236\031\235\032\303\001\001\000\002\001\001" +
    "\000\032\010\050\011\064\012\044\013\043\014\035\015" +
    "\314\016\062\017\060\020\031\021\053\034\042\035\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error en la linea "+ (s.left+1)+ " Columna "+ s.right+ ". Valor simbolo '"
        +s.value+"' . Simbolo n° "+s.sym+ " no reconocido." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MiParser$actions {



    SymbolTable symbolTable = new SymbolTable();
    StringBuilder stringBuilder = new StringBuilder();

    public String getParseInfo(){
        return stringBuilder.toString();
    }

    public void addInfo(String str){
        stringBuilder.append(str).append("\n");
    }

    public void addInfo(String str, Object a){
        String formatted = String.format(str,a);
        stringBuilder.append(formatted).append("\n");
    }

    public void addInfo(String str, Object a, Object b){
        String formatted = String.format(str, a, b);
        stringBuilder.append(formatted).append("\n");
    }

    public void addInfo(String str, Object a, Object b, Object c){
        String formatted = String.format(str, a, b, c);
        stringBuilder.append(formatted).append("\n");
    }

    public void registerSymbol(String token, String nombre, String tipo) throws RuntimeException{
        symbolTable.addSymbol(nombre.trim(),tipo,token);
    }

    public void checkSymbol(String nombre) throws RuntimeException{
        symbolTable.isRegistered(nombre);
    }

  private final MiParser parser;

  /** Constructor */
  CUP$MiParser$actions(MiParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action_part00000000(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiParser$result;

      /* select the action based on the action number */
      switch (CUP$MiParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		RESULT = start_val;
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiParser$parser.done_parsing();
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declaration_section program_section 
            {
              Object RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String ds = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int psleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 0.1: program -> declaractio_section program_section");
        addInfo("REGLA 0.1: program -> %s \n %s", ds, ps);
        RESULT = ds + "\n" + ps;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program_section 
            {
              Object RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int psright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ps = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 0.2: program -> program_section");
        addInfo("REGLA 0.2: program -> %s ", ps);
        RESULT = ps;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program",16, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration_section ::= DECLARE_SECTION declarations ENDDECLARE_SECTION 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 1.1: declaration_section -> DECLARE_SECTION declarations ENDDECLARE_SECTION");
        addInfo("REGLA 1.1: declaration_section -> DECLARE_SECTION \n\t %s\n ENDDECLARE_SECTION", dec);
        RESULT =  "DECLARE_SECTION\n\t" + dec + "\nENDDECLARE_SECTION";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaration_section",0, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= declaration 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 2.1: declarations -> \n\tdeclaration");
        addInfo("REGLA 2.1: declarations -> \n\t%s",e);
        RESULT = e;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= declarations declaration 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 2.2: declarations -> declaration declarations");
        addInfo("REGLA 2.2: declarations -> %s\n\t%s", d, e);
        RESULT = d + "\n\t" + e;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= data_type DOS_PUNTOS ID_list 
            {
              String RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String dt = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int idlistleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idlistright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String idlist = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        for (String name : idlist.split(",")) {
            registerSymbol("IDENTIFICADOR", name, dt);
        }
        addInfo("REGLA 3.1: declaration -> data_type DOS_PUNTOS ID_list");
        addInfo("REGLA 3.1: declaration ->%s: %s", dt, idlist);
        RESULT = dt + ": " + idlist ;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // data_type ::= ENTERO 
            {
              String RESULT =null;
		
        addInfo("REGLA 4.1: data_type -> ENTERO");
        RESULT = "ENTERO";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("data_type",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // data_type ::= FLOTANTE 
            {
              String RESULT =null;
		
        addInfo("REGLA 4.2: data_type -> FLOAT");
        RESULT = "FLOTANTE";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("data_type",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // data_type ::= BOOLEAN 
            {
              String RESULT =null;
		
        addInfo("REGLA 4.3: data_type -> BOOLEAN");
        RESULT = "BOOLEAN";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("data_type",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // data_type ::= FLOAT_ARRAY ABRE_CORCHETE expresion CIERRA_CORCHETE 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 4.4: data_type ->  FLOAT_ARRAY ABRE_CORCHETE expresion CIERRA_CORCHETE");
        addInfo("REGLA 4.4: data_type -> FLOAT_ARRAY [ %s ]", e);
        RESULT = "FLOAR_ARRAY" + "[" + e + "]";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("data_type",3, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ID_list ::= IDENTIFICADOR COMA ID_list 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String list = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 5.2: ID_list -> IDENTIFICADOR COMA ID_list");
        addInfo("REGLA 5.2: ID_list -> %s, %s", id, list);
        RESULT = id + ", " + list;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ID_list",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ID_list ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 5.1: ID_list -> IDENTIFICADOR");
        addInfo("REGLA 5.1: ID_list -> %s", id);
        RESULT = id;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("ID_list",4, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // valor_mas_cercano ::= VALOR_MAS_CERCANO ABRE_PARENTESIS ENTERO_LITERAL COMA ABRE_CORCHETE number_list CIERRA_CORCHETE CIERRA_PARENTESIS 
            {
              String RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String nl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
        addInfo("REGLA 6.1: valor_mas_cercano -> VALOR_MAS_CERCANO ABRE_PARENTESIS ENTERO_LITERAL COMA ABRE_CORCHETE number_list CIERRA_CORCHETE CIERRA_PARENTESIS");
        addInfo("REGLA 6.1: valor_mas_cercano -> valor_mas_cercano( %s , [ %s ] )", il, nl);
        RESULT = "valor_mas_cercano" + "(" + il + "," + "[" + nl + "]" + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("valor_mas_cercano",6, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // all ::= ALL ABRE_PARENTESIS expresion COMA EQUIVALE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 7.1: all -> ALL ABRE_PARENTESIS expresion COMA EQUIVALE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.1: all -> all( %s , == , %s )", e, id);
        RESULT = "all" + "(" + e + "," + "==" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("all",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // all ::= ALL ABRE_PARENTESIS expresion COMA DIFERENTE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 7.2: all -> ALL ABRE_PARENTESIS expresion COMA DIFERENTE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.2: all -> all( %s , != , %s )", e, id);
        RESULT = "all" + "(" + e + "," + "!=" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("all",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // all ::= ALL ABRE_PARENTESIS expresion COMA MENOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 7.3: all -> ALL ABRE_PARENTESIS expresion COMA MENOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.3: all -> all( %s , < , %s )", e, id);
        RESULT = "all" + "(" + e + "," + "<" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("all",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // all ::= ALL ABRE_PARENTESIS expresion COMA MAYOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 7.4: all -> ALL ABRE_PARENTESIS expresion COMA MAYOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.4: all -> all( %s , > , %s )", e, id);
        RESULT = "all" + "(" + e + "," + ">" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("all",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // all ::= ALL ABRE_PARENTESIS expresion COMA MENOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 7.5: all -> ALL ABRE_PARENTESIS expresion COMA MENOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.5: all -> all( %s , <= , %s )", e, id);
        RESULT = "all" + "(" + e + "," + "<=" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("all",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // all ::= ALL ABRE_PARENTESIS expresion COMA MAYOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 7.6: all -> ALL ABRE_PARENTESIS expresion COMA MAYOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 7.6: all -> all( %s , >= , %s )", e, id);
        RESULT = "all" + "(" + e + "," + ">=" + "," + id + ")";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("all",27, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // any ::= ANY ABRE_PARENTESIS expresion COMA EQUIVALE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 8.1: any -> ANY ABRE_PARENTESIS expresion COMA EQUIVALE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.1: any -> any( %s , == , %s )", e, id);
        RESULT = "any" + "(" + e + "," + "==" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("any",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // any ::= ANY ABRE_PARENTESIS expresion COMA DIFERENTE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 8.2: any -> ANY ABRE_PARENTESIS expresion COMA DIFERENTE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.2: any -> any( %s , != , %s )", e, id);
        RESULT = "any" + "(" + e + "," + "!=" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("any",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // any ::= ANY ABRE_PARENTESIS expresion COMA MENOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 8.3: any -> ANY ABRE_PARENTESIS expresion COMA MENOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.3: any -> any( %s , < , %s )", e, id);
        RESULT = "any" + "(" + e + "," + "<" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("any",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // any ::= ANY ABRE_PARENTESIS expresion COMA MAYOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 8.4: any -> ANY ABRE_PARENTESIS expresion COMA MAYOR_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.4: any -> any( %s , > , %s )", e, id);
        RESULT = "any" + "(" + e + "," + ">" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("any",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // any ::= ANY ABRE_PARENTESIS expresion COMA MENOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 8.5: any -> ANY ABRE_PARENTESIS expresion COMA MENOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.5: any -> any( %s , <= , %s )", e, id);
        RESULT = "any" + "(" + e + "," + "<=" + "," + id + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("any",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // any ::= ANY ABRE_PARENTESIS expresion COMA MAYOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 8.5: any -> ANY ABRE_PARENTESIS expresion COMA MAYOR_IGUAL_QUE COMA IDENTIFICADOR CIERRA_PARENTESIS");
        addInfo("REGLA 8.6: any -> any( %s , >= , %s )", e, id);
        RESULT = "any" + "(" + e + "," + ">=" + "," + id + ")";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("any",26, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // number_list ::= number_list COMA ENTERO_LITERAL 
            {
              String RESULT =null;
		int nlistleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int nlistright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String nlist = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 9.1: number_list -> number_list COMA ENTERO_LITERAL");
        addInfo("REGLA 9.1: number_list -> %s, %s", nlist, il);
        RESULT = nlist + "," + il;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("number_list",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // number_list ::= ENTERO_LITERAL 
            {
              String RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
         addInfo("REGLA 9.2: number_list -> il");
        addInfo("REGLA 9.2: number_list -> %s", il);
        RESULT = il;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("number_list",5, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // asignacion ::= IDENTIFICADOR IGUAL expresion_logica 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        checkSymbol(id);
        addInfo("REGLA 10.1: asignacion -> IDENTIFICADOR IGUAL expresion_logica");
        addInfo("REGLA 10.1: asignacion -> %s = %s", id, exp_log);
        RESULT = id + "=" + exp_log ;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("asignacion",21, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_logica ::= NOT expresion_logica 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 11.1: expresion_logica -> NOT expresion_logica");
        addInfo("REGLA 11.1: expresion_logica -> NOT %s", exp_log);
        RESULT = "NOT" + exp_log;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_logica ::= expresion_logica OR expresion_simple 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int exp_simpleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int exp_simpright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object exp_simp = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 11.2: expresion_logica -> exp_log OR expresion_simple");
        addInfo("REGLA 11.2: expresion_logica -> %s OR %s", exp_log, exp_simp);
        RESULT = exp_log + "OR" + "exp_simp";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_logica ::= expresion_logica AND expresion_simple 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int exp_simpleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int exp_simpright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object exp_simp = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 11.3: expresion_logica -> exp_log AND expresion_simple");
        addInfo("REGLA 11.3: expresion_logica -> %s AND %s", exp_log, exp_simp);
        RESULT =  exp_log + "AND" + exp_simp;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_logica ::= expresion_simple 
            {
              Object RESULT =null;
		int exp_simpleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int exp_simpright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object exp_simp = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 11.4: expresion_logica -> expresion_simple");
        addInfo("REGLA 11.4: expresion_logica -> %s", exp_simp);
        RESULT = exp_simp;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_logica",11, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion_simple ::= comparacion 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 12.1: expresion_simple -> comparacion");
    addInfo("REGLA 12.1: expresion_simple -> %s", cond);
    RESULT = cond;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_simple",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion_simple ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 12.2: expresion_simple -> expresion");
    addInfo("REGLA 12.2: expresion_simple -> %s",e);
    RESULT = e;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion_simple",12, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparacion ::= expresion EQUIVALE expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 13.1: comparacion -> expresion EQUIVALE expresion");
    addInfo("REGLA 13.1: comparacion -> %s == %s", e1, e2);
    RESULT = e1 + "==" + e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparacion ::= expresion DIFERENTE expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 13.2: comparacion -> expresion DIFERENTE expresion");
    addInfo("REGLA 13.2: comparacion -> %s != %s", e1, e2);
    RESULT = e1 + "!=" + e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparacion ::= expresion MENOR_QUE expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 13.3: comparacion -> expresion MENOR_QUE expresion");
    addInfo("REGLA 13.3: comparacion -> %s < %s", e1, e2);
    RESULT = e1 + "<" + e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparacion ::= expresion MAYOR_QUE expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 13.4: comparacion -> expresion MAYOR_QUE expresion");
    addInfo("REGLA 13.4: comparacion -> %s > %s", e1, e2);
    RESULT = e1 + ">" + e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparacion ::= expresion MENOR_IGUAL_QUE expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 13.5: comparacion -> expresion MENOR_IGUAL_QUE expresion");
    addInfo("REGLA 13.5: comparacion -> %s <= %s", e1, e2);
    RESULT = e1 + "<=" + e2 ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparacion ::= expresion MAYOR_IGUAL_QUE expresion 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 13.6: comparacion -> expresion MAYOR_IGUAL_QUE expresion");
    addInfo("REGLA 13.6: comparacion -> %s >= %s", e1, e2);
    RESULT = e1 + ">=" + e2 ;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("comparacion",7, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= expresion MAS termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 14.1: expresion -> expresion MAS termino");
    addInfo("REGLA 14.1: expresion -> %s + %s", e, t);
    RESULT = e + "+" + t;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion MENOS termino 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 14.2: expresion -> expresion MENOS termino");
    addInfo("REGLA 14.2: expresion -> %s - %s", e, t);
    RESULT = e + "-" + t;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 14.3: expresion -> termino");
    addInfo("REGLA 14.3: expresion -> %s", t);
    RESULT = t;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("expresion",13, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // termino ::= termino MULT factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 15.1: termino -> termino MULT factor");
    addInfo("REGLA 15.1: termino -> %s * %s", t, f);
    RESULT = t + "*" + f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino ::= termino DIV factor 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 15.2: termino -> termino DIV factor");
    addInfo("REGLA 15.2: termino -> %s / %s", t, f);
    RESULT = t + "/" + f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 15.3: termino -> factor");
    addInfo("REGLA 15.3: termino -> %s", f);
    RESULT = f;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("termino",8, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= MENOS factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 16.1: factor -> MENOS factor");
    addInfo("REGLA 16.1: factor -> -%s", f);
    RESULT = "-"+f;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= ABRE_PARENTESIS expresion_logica CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 16.2: factor -> ABRE_PARENTESIS expresion_logica CIERRA_PARENTESIS");
    addInfo("REGLA 16.2: factor -> (%s)", exp_log);
    RESULT = "(" + exp_log + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    checkSymbol(id);
    addInfo("REGLA 16.3: factor -> IDENTIFICADOR");
    addInfo("REGLA 16.3: factor -> %s", id);
    RESULT = id;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= inputs 
            {
              Object RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ip = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 16.4: factor -> inputs");
    addInfo("REGLA 16.4: factor -> %s", ip);
    RESULT = ip;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$0 ::= 
            {
              Object RESULT =null;
		int nliteralleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int nliteralright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object nliteral = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;

    addInfo("REGLA 16.5: factor -> numero_literal");
    addInfo("REGLA 16.5: factor -> %s", nliteral);
    RESULT = nliteral;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("NT$0",28, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= numero_literal NT$0 FLOAT_ARRAY_LITERAL 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int nliteralleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int nliteralright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object nliteral = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		int falleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int falright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String fal = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 16.6: expresion -> FLOAT_ARRAY_LITERAL");
    addInfo("REGLA 16.6: expresion -> %s", fal);
    RESULT = fal;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= constante_bool 
            {
              Object RESULT =null;
		int cbleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int cbright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object cb = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 16.7: factor -> constante_bool");
    addInfo("REGLA 16.7: factor -> %s", cb);
    RESULT = cb;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= valor_mas_cercano 
            {
              Object RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String vc = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 16.8: factor -> valor_mas_cercano");
    addInfo("REGLA 16.8: factor -> %s", vc);
    RESULT = vc;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= all 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int alright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 16.9: factor -> all");
    addInfo("REGLA 16.9: factor -> %s", al);
    RESULT = al;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= any 
            {
              Object RESULT =null;
		int anleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int anright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object an = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 16.10: factor -> any");
    addInfo("REGLA 16.10: factor -> %s ", an );
    RESULT = an;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("factor",9, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // constante_bool ::= TRUE 
            {
              Object RESULT =null;
		
    addInfo("REGLA 17.1: constante_bool -> TRUE");
    RESULT = "TRUE";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante_bool",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // constante_bool ::= FALSE 
            {
              Object RESULT =null;
		
    addInfo("REGLA 17.2: constante_bool -> FALSE");
    RESULT = "FALSE";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("constante_bool",10, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentenciaDisplay ::= DISPLAY ABRE_PARENTESIS expresion_logica CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 18.1: sentenciaDisplay -> DISPLAY ABRE_PARENTESIS expresion_logica CIERRA_PARENTESIS");
    addInfo("REGLA 18.1: sentenciaDisplay -> DISPLAY(%s)" ,exp_log);
    RESULT = "DISPLAY" + "(" + exp_log + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentenciaDisplay",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentenciaDisplay ::= DISPLAY ABRE_PARENTESIS STRING_LITERAL CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int str_litleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int str_litright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		String str_lit = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    registerSymbol("CTE_STR", str_lit , "STRING");
    addInfo("REGLA 18.2: sentenciaDisplay -> DISPLAY ABRE_PARENTESIS STRING_LITERAL CIERRA_PARENTESIS");
    addInfo("REGLA 18.2: sentenciaDisplay -> DISPLAY(%s)" ,str_lit);
    RESULT = "DISPLAY" + "(" + str_lit + ")";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentenciaDisplay",22, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // inputs ::= INPUT_BOOL ABRE_PARENTESIS CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int ibleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int ibright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ib = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
    addInfo("REGLA 19.1: inputs -> INPUT_BOOL ABRE_PARENTESIS CIERRA_PARENTESIS");
    addInfo("REGLA 19.1: inputs -> ( %s )", ib );
    RESULT = ib + "(" + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("inputs",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // inputs ::= INPUT_INT ABRE_PARENTESIS CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int iileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iiright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ii = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
    addInfo("REGLA 19.2: inputs -> INPUT_INT ABRE_PARENTESIS CIERRA_PARENTESIS");
    addInfo("REGLA 19.2: inputs -> ( %s )", ii );
    RESULT = ii + "(" + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("inputs",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // inputs ::= INPUT_FLOAT ABRE_PARENTESIS CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int iflleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iflright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ifl = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
    addInfo("REGLA 19.3: inputs -> INPUT_FLOAT ABRE_PARENTESIS CIERRA_PARENTESIS");
    addInfo("REGLA 19.3: inputs -> ( %s )", ifl );
    RESULT = ifl + "(" + ")";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("inputs",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // inputs ::= INPUT_ARRAY ABRE_PARENTESIS CIERRA_PARENTESIS 
            {
              Object RESULT =null;
		int ialeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).left;
		int iaright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).right;
		Object ia = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)).value;
		
    addInfo("REGLA 19.4: inputs -> INPUT_ARRAY ABRE_PARENTESIS CIERRA_PARENTESIS");
    addInfo("REGLA 19.4: inputs -> ( %s )", ia );
    RESULT = ia +  "(" + ")" ;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("inputs",14, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencia_de_seleccion ::= CONDITION expresion_logica THEN program_lines END 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 20.1: sentencia_de_seleccion -> CONDITION expresion_logica THEN program_lines END");
    addInfo("REGLA 20.1: sentencia_de_seleccion -> CONDITION %s THEN %s END", exp_log, p);
    RESULT = "CONDITION" + exp_log + "THEN" + p + "END";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_de_seleccion",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_de_seleccion ::= CONDITION expresion_logica THEN program_lines ELSE program_lines END 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 20.2: sentencia_de_seleccion -> CONDITION expresion_logica THEN program_lines ELSE program_lines END");
    addInfo("REGLA 20.2: sentencia_de_seleccion -> CONDITION %s THEN %s ELSE %s END", exp_log, p1, p2);
    RESULT = "CONDITION" + exp_log + "THEN" + p1 + "ELSE" + p2 + "END";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_de_seleccion",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia_de_seleccion ::= BACKWARD_CONDITION expresion_logica THEN program_lines END 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 20.3: sentencia_de_seleccion -> BACKWARD_CONDITION expresion_logica THEN program_lines END");
    addInfo("REGLA 20.3: sentencia_de_seleccion -> BACKWARD_CONDITION %s THEN %s END", exp_log, p);
    RESULT = "BACKWARD_CONDITION" + exp_log + "THEN" + p + "END";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_de_seleccion",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia_de_seleccion ::= BACKWARD_CONDITION expresion_logica THEN program_lines ELSE_BACKWARD program_lines END 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)).value;
		int p1left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int p1right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object p1 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 20.4: sentencia_de_seleccion -> CONDITION expresion_logica THEN program_lines ELSE_BACKWARD program_lines END");
    addInfo("REGLA 20.4: sentencia_de_seleccion -> CONDITION %s THEN %s ELSE_BACKWARD %s END", exp_log, p1, p2);
    RESULT = "BACKWARD_CONDITION" + exp_log + "THEN" + p1 + "ELSE_BACKWARD" + p2 + "END";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_de_seleccion",20, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // program_section ::= PROGRAM_SECTION program_lines ENDPROGRAM_SECTION 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 21.1: program_section -> PROGRAM_SECTION program_lines ENDPROGRAM_SECTION");
    addInfo("REGLA 21.1: program_section -> PROGRAM_SECTION\n\t %s\n ENDPROGRAM_SECTION", p);
    RESULT = p ;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_section",18, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // program_lines ::= program_lines program_line 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 22.2: program_lines -> program_line program_lines");
    addInfo("REGLA 22.2: program_lines -> %s\n\t%s", d, e);
    RESULT = d + "\n\t" + e;
     
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_lines",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // program_lines ::= program_line 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 22.1: program_lines -> program_line");
    addInfo("REGLA 22.1: program_lines -> \n\t%s", e);
    RESULT = e;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_lines",17, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // program_line ::= sentenciaDisplay 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 23.1: program_line -> sentenciaDisplay");
    addInfo("REGLA 23.1: program_line -> %s",s);
    RESULT = s;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // program_line ::= asignacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 23.2: program_line -> asignacion");
    addInfo("REGLA 23.2: program_line -> %s",a);
    RESULT = a;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // program_line ::= sentencia_de_seleccion 
            {
              Object RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object ss = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 23.3: program_line -> sentencia_de_seleccion");
    addInfo("REGLA 23.3: program_line -> %s",ss);
    RESULT = ss;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // program_line ::= sentencia_de_iteracion 
            {
              Object RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object si = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 24.4: program_line -> sentencia_de_iteracion");
    addInfo("REGLA 24.4: program_line -> %s",si);
    RESULT = si;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line",19, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // numero_literal ::= IDENTIFICADOR ABRE_CORCHETE expresion CIERRA_CORCHETE 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
    addInfo("REGLA 25.1: literalNumber -> IDENTIFICADOR ABRE_CORCHETE expresion CIERRA_CORCHETE");
    RESULT = "[" + e + "]";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("numero_literal",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // numero_literal ::= FLOTANTE_LITERAL 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String fl = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 25.2: literalNumber -> FLOTANTE_LITERAL");
    addInfo("REGLA 25.2: literalNumber -> %s", fl);
    RESULT = fl;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("numero_literal",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // numero_literal ::= ENTERO_LITERAL 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
    addInfo("REGLA 25.3: literalNumber -> ENTERO_LITERAL");
    addInfo("REGLA 25.3: literalNumber -> %s", il);
    RESULT = il;

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("numero_literal",15, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_de_iteracion ::= LOOP WHEN expresion_logica THEN program_lines_loop END_LOOP 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 26.1: sentencia_de_iteracion -> LOOP WHEN expresion_logica THEN program_lines_loop END_LOOP");
        addInfo("REGLA 26.1: sentencia_de_iteracion -> LOOP WHEN %s THEN %s END_LOOP", exp_log, p);
        RESULT = "LOOP" + "WHEN" + exp_log + "THEN" + p + "END_LOOP";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_de_iteracion",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // sentencia_de_iteracion ::= BACKWARD_LOOP WHEN expresion_logica THEN program_lines_loop END_LOOP 
            {
              Object RESULT =null;
		int exp_logleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).left;
		int exp_logright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).right;
		Object exp_log = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		
        addInfo("REGLA 26.2: sentencia_de_iteracion -> BACKWARD_LOOP WHEN expresion_logica THEN program_lines_loop END_LOOP");
        addInfo("REGLA 26.2: sentencia_de_iteracion -> BACKWARD_LOOP WHEN %s THEN %s END_LOOP", exp_log, p);
        RESULT = "BACKWARD_LOOP" + "WHEN" + exp_log + "THEN" + p + "END_LOOP";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("sentencia_de_iteracion",23, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // program_lines_loop ::= program_lines_loop program_line_loop 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 27.2: program_lines -> program_line_loop program_line_loop");
        addInfo("REGLA 27.2: program_lines_loop -> %s\n\t%s", d, e);
        RESULT = d + "\n\t" + "e";
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_lines_loop",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.elementAt(CUP$MiParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // program_lines_loop ::= program_line_loop 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 27.3: program_lines -> program_line_loop");
        addInfo("REGLA 27.3: program_lines -> %s", p);
         RESULT = p ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_lines_loop",25, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // program_line_loop ::= program_line 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$MiParser$stack.peek()).value;
		
        addInfo("REGLA 28.1: program_line_loop -> program_line");
        addInfo("REGLA 28.1: program_line -> %s", p);
        RESULT = p;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line_loop",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // program_line_loop ::= BREAK 
            {
              Object RESULT =null;
		
        addInfo("REGLA 28.2: program_line -> BREAK");
        RESULT = "BREAK" ;
    
              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line_loop",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // program_line_loop ::= CONTINUE 
            {
              Object RESULT =null;
		
        addInfo("REGLA 28.3: program_line -> CONTINUE");
        RESULT = "CONTINUE";

              CUP$MiParser$result = parser.getSymbolFactory().newSymbol("program_line_loop",24, ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiParser$stack.peek()), RESULT);
            }
          return CUP$MiParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MiParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MiParser$do_action(
    int                        CUP$MiParser$act_num,
    java_cup.runtime.lr_parser CUP$MiParser$parser,
    java.util.Stack            CUP$MiParser$stack,
    int                        CUP$MiParser$top)
    throws java.lang.Exception
    {
              return CUP$MiParser$do_action_part00000000(
                               CUP$MiParser$act_num,
                               CUP$MiParser$parser,
                               CUP$MiParser$stack,
                               CUP$MiParser$top);
    }
}

}
