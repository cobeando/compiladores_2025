// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: target/classes/lexico.flex


package ar.edu.unnoba.comp.jflextp;

import java_cup.runtime.*;
import java_cup.sym;
import java.util.ArrayList;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;
  public static final int COMENTARIO = 4;
  public static final int COMENTARIOBRACKETS = 6;
  public static final int COMENTARIOCURLYBRACKET = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\2\u1f00\1\u2100\4\u1f00\1\u2200"+
    "\1\u2300\1\u2400\1\u1f00\1\u2500\1\u2600\1\u2700\1\u1f00\31\u0100"+
    "\1\u2800\121\u0100\1\u2900\4\u0100\1\u2a00\1\u0100\1\u2b00\1\u2c00"+
    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\53\u0100\1\u3100\10\u3200\31\u1f00"+
    "\1\u0100\1\u3300\1\u3400\1\u0100\1\u3500\1\u3600\1\u3700\1\u3800"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u0100\1\u3e00\1\u3f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00"+
    "\1\u5000\1\u5100\1\u1f00\1\u5200\1\u5300\1\u5400\1\u5500\3\u0100"+
    "\1\u5600\1\u5700\1\u5800\12\u1f00\4\u0100\1\u5900\17\u1f00\2\u0100"+
    "\1\u5a00\41\u1f00\2\u0100\1\u5b00\1\u5c00\2\u1f00\1\u5d00\1\u5e00"+
    "\27\u0100\1\u5f00\2\u0100\1\u6000\45\u1f00\1\u0100\1\u6100\1\u6200"+
    "\11\u1f00\1\u6300\25\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\1\u6800"+
    "\1\u6900\11\u1f00\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
    "\1\u6e00\1\u6f00\1\u7000\2\u1f00\1\u7100\16\u1f00\246\u0100\1\u7200"+
    "\20\u0100\1\u7300\1\u7400\25\u0100\1\u7500\34\u0100\1\u7600\14\u1f00"+
    "\2\u0100\1\u7700\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\0\1\11\3\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\12\22\1\23\1\24"+
    "\1\25\1\26\1\27\2\0\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\41\1\50\1\51\1\52"+
    "\1\53\1\41\1\54\1\41\1\55\1\41\1\56\1\57"+
    "\1\60\1\0\1\61\1\0\1\62\1\41\1\63\1\41"+
    "\1\64\6\41\1\65\1\66\1\67\1\70\2\41\1\71"+
    "\1\72\2\41\1\73\2\41\1\74\1\41\1\75\1\0"+
    "\1\76\7\0\1\3\32\0\1\77\11\0\1\41\7\0"+
    "\2\100\1\0\1\41\3\0\1\100\1\41\1\0\3\100"+
    "\1\0\27\41\1\0\37\41\1\0\u01ca\41\4\0\14\41"+
    "\16\0\5\41\7\0\1\41\1\0\1\41\201\0\5\41"+
    "\1\0\2\41\2\0\4\41\1\0\1\41\6\0\1\41"+
    "\1\0\3\41\1\0\1\41\1\0\24\41\1\0\123\41"+
    "\1\0\213\41\10\0\246\41\1\0\46\41\2\0\1\41"+
    "\6\0\51\41\107\0\33\41\4\0\4\41\55\0\53\41"+
    "\25\0\12\100\4\0\2\41\1\0\143\41\1\0\1\41"+
    "\17\0\2\41\7\0\2\41\12\100\3\41\2\0\1\41"+
    "\20\0\1\41\1\0\36\41\35\0\131\41\13\0\1\41"+
    "\16\0\12\100\41\41\11\0\2\41\4\0\1\41\5\0"+
    "\26\41\4\0\1\41\11\0\1\41\3\0\1\41\27\0"+
    "\31\41\7\0\13\41\65\0\25\41\1\0\10\41\106\0"+
    "\66\41\3\0\1\41\22\0\1\41\7\0\12\41\4\0"+
    "\12\100\1\0\20\41\4\0\10\41\2\0\2\41\2\0"+
    "\26\41\1\0\7\41\1\0\1\41\3\0\4\41\3\0"+
    "\1\41\20\0\1\41\15\0\2\41\1\0\3\41\4\0"+
    "\12\100\2\41\2\0\6\100\2\0\1\41\10\0\6\41"+
    "\4\0\2\41\2\0\26\41\1\0\7\41\1\0\2\41"+
    "\1\0\2\41\1\0\2\41\37\0\4\41\1\0\1\41"+
    "\7\0\12\100\2\0\3\41\20\0\11\41\1\0\3\41"+
    "\1\0\26\41\1\0\7\41\1\0\2\41\1\0\5\41"+
    "\3\0\1\41\22\0\1\41\17\0\2\41\4\0\12\100"+
    "\11\0\1\41\13\0\10\41\2\0\2\41\2\0\26\41"+
    "\1\0\7\41\1\0\2\41\1\0\5\41\3\0\1\41"+
    "\36\0\2\41\1\0\3\41\4\0\12\100\1\0\1\41"+
    "\6\100\13\0\1\41\1\0\6\41\3\0\3\41\1\0"+
    "\4\41\3\0\2\41\1\0\1\41\1\0\2\41\3\0"+
    "\2\41\3\0\3\41\3\0\14\41\26\0\1\41\25\0"+
    "\15\100\22\0\10\41\1\0\3\41\1\0\27\41\1\0"+
    "\20\41\3\0\1\41\32\0\3\41\5\0\2\41\4\0"+
    "\12\100\10\0\7\100\1\0\1\41\4\0\10\41\1\0"+
    "\3\41\1\0\27\41\1\0\12\41\1\0\5\41\3\0"+
    "\1\41\40\0\1\41\1\0\2\41\4\0\12\100\1\0"+
    "\2\41\22\0\10\41\1\0\3\41\1\0\51\41\2\0"+
    "\1\41\20\0\1\41\5\0\3\41\1\0\7\100\3\41"+
    "\4\0\23\100\1\0\6\41\5\0\22\41\3\0\30\41"+
    "\1\0\11\41\1\0\1\41\2\0\7\41\37\0\12\100"+
    "\21\0\60\41\1\0\2\41\14\0\7\41\11\0\12\100"+
    "\47\0\2\41\1\0\1\41\1\0\5\41\1\0\30\41"+
    "\1\0\1\41\1\0\12\41\1\0\2\41\11\0\1\41"+
    "\2\0\5\41\1\0\1\41\11\0\12\100\2\0\4\41"+
    "\40\0\1\41\37\0\24\100\14\0\10\41\1\0\44\41"+
    "\33\0\5\41\163\0\53\41\24\0\1\41\12\100\6\0"+
    "\6\41\4\0\4\41\3\0\1\41\3\0\2\41\7\0"+
    "\3\41\4\0\15\41\14\0\1\41\1\0\12\100\6\0"+
    "\46\41\1\0\1\41\5\0\1\41\2\0\53\41\1\0"+
    "\115\41\1\0\4\41\2\0\7\41\1\0\1\41\1\0"+
    "\4\41\2\0\51\41\1\0\4\41\2\0\41\41\1\0"+
    "\4\41\2\0\7\41\1\0\1\41\1\0\4\41\2\0"+
    "\17\41\1\0\71\41\1\0\4\41\2\0\103\41\16\0"+
    "\24\100\3\0\20\41\20\0\126\41\2\0\6\41\3\0"+
    "\u016c\41\2\0\21\41\1\77\32\41\5\0\113\41\3\0"+
    "\3\100\10\41\7\0\15\41\1\0\4\41\16\0\22\41"+
    "\16\0\22\41\16\0\15\41\1\0\3\41\17\0\64\41"+
    "\43\0\1\41\4\0\1\41\3\0\12\100\6\0\12\100"+
    "\26\0\12\100\6\0\131\41\7\0\5\41\2\0\42\41"+
    "\1\0\1\41\5\0\106\41\12\0\37\41\47\0\12\100"+
    "\36\41\2\0\5\41\13\0\54\41\4\0\32\41\6\0"+
    "\13\100\45\0\27\41\11\0\65\41\53\0\12\100\6\0"+
    "\12\100\15\0\1\41\135\0\57\41\21\0\7\41\4\0"+
    "\12\100\51\0\36\41\15\0\2\41\12\100\54\41\32\0"+
    "\44\41\34\0\12\100\3\0\3\41\12\100\44\41\2\0"+
    "\11\41\7\0\53\41\2\0\3\41\51\0\4\41\1\0"+
    "\6\41\1\0\2\41\3\0\1\41\5\0\300\41\100\0"+
    "\26\41\2\0\6\41\2\0\46\41\2\0\6\41\2\0"+
    "\10\41\1\0\1\41\1\0\1\41\1\0\1\41\1\0"+
    "\37\41\2\0\65\41\1\0\7\41\1\0\1\41\3\0"+
    "\3\41\1\0\7\41\3\0\4\41\2\0\6\41\4\0"+
    "\15\41\5\0\3\41\1\0\7\41\3\0\13\77\35\0"+
    "\2\3\5\0\1\77\57\0\1\77\20\0\1\100\1\41"+
    "\2\0\6\100\5\0\1\41\12\100\6\0\15\41\145\0"+
    "\1\41\4\0\1\41\2\0\12\41\1\0\1\41\3\0"+
    "\5\41\6\0\1\41\1\0\1\41\1\0\1\41\1\0"+
    "\4\41\1\0\13\41\2\0\4\41\5\0\5\41\4\0"+
    "\1\41\1\0\63\100\2\41\5\100\u01d6\0\74\100\116\0"+
    "\26\100\166\0\36\100\154\0\57\41\1\0\57\41\1\0"+
    "\205\41\6\0\4\41\3\0\2\41\11\0\1\100\2\0"+
    "\46\41\1\0\1\41\5\0\1\41\2\0\70\41\7\0"+
    "\1\41\20\0\27\41\11\0\7\41\1\0\7\41\1\0"+
    "\7\41\1\0\7\41\1\0\7\41\1\0\7\41\1\0"+
    "\7\41\1\0\7\41\120\0\1\41\320\0\1\77\4\0"+
    "\2\41\1\100\31\0\11\100\7\0\5\41\2\0\3\100"+
    "\2\41\4\0\126\41\6\0\3\41\1\0\132\41\1\0"+
    "\4\41\5\0\53\41\1\0\136\41\3\0\4\100\12\0"+
    "\33\41\65\0\20\41\40\0\12\100\36\0\10\100\1\0"+
    "\17\100\40\0\12\100\47\0\17\100\100\0\266\41\112\0"+
    "\360\41\20\0\215\41\103\0\56\41\2\0\15\41\3\0"+
    "\20\41\12\100\2\41\24\0\57\41\20\0\37\41\2\0"+
    "\106\41\12\100\47\0\11\41\2\0\147\41\2\0\65\41"+
    "\2\0\5\41\60\0\13\41\1\0\3\41\1\0\4\41"+
    "\1\0\27\41\15\0\6\100\12\0\64\41\16\0\62\41"+
    "\34\0\12\100\30\0\6\41\3\0\1\41\1\0\2\41"+
    "\1\0\12\100\34\41\12\0\27\41\31\0\35\41\7\0"+
    "\57\41\34\0\1\41\12\100\6\0\5\41\1\0\12\41"+
    "\12\100\5\41\1\0\51\41\27\0\3\41\1\0\10\41"+
    "\4\0\12\100\6\0\27\41\3\0\1\41\3\0\62\41"+
    "\1\0\1\41\3\0\2\41\2\0\5\41\2\0\1\41"+
    "\1\0\1\41\30\0\3\41\2\0\13\41\7\0\3\41"+
    "\14\0\6\41\2\0\6\41\2\0\6\41\11\0\7\41"+
    "\1\0\7\41\1\0\53\41\1\0\14\41\10\0\163\41"+
    "\15\0\12\100\6\0\244\41\14\0\27\41\4\0\61\41"+
    "\4\0\u0100\101\156\41\2\0\152\41\46\0\7\41\14\0"+
    "\5\41\5\0\1\41\1\0\12\41\1\0\15\41\1\0"+
    "\5\41\1\0\1\41\1\0\2\41\1\0\2\41\1\0"+
    "\154\41\41\0\153\41\22\0\100\41\2\0\66\41\50\0"+
    "\14\41\164\0\5\41\1\0\207\41\23\0\12\100\7\0"+
    "\32\41\6\0\32\41\13\0\131\41\3\0\6\41\2\0"+
    "\6\41\2\0\6\41\2\0\3\41\43\0\14\41\1\0"+
    "\32\41\1\0\23\41\1\0\2\41\1\0\17\41\2\0"+
    "\16\41\42\0\173\41\14\0\55\100\14\0\71\100\21\0"+
    "\2\100\364\0\35\41\3\0\61\41\20\0\33\100\4\0"+
    "\40\41\4\100\11\0\24\41\1\100\10\41\1\100\5\0"+
    "\46\41\12\0\36\41\2\0\44\41\4\0\10\41\1\0"+
    "\5\100\52\0\236\41\2\0\12\100\6\0\44\41\4\0"+
    "\44\41\4\0\50\41\10\0\64\41\234\0\67\41\11\0"+
    "\26\41\12\0\10\41\230\0\6\41\2\0\1\41\1\0"+
    "\54\41\1\0\2\41\3\0\1\41\2\0\27\41\2\0"+
    "\10\100\27\41\2\0\7\100\37\41\10\0\11\100\60\0"+
    "\23\41\1\0\2\41\5\0\5\100\26\41\6\100\4\0"+
    "\32\41\106\0\70\41\4\0\2\100\2\41\20\100\2\0"+
    "\56\100\1\41\17\0\4\41\1\0\3\41\1\0\35\41"+
    "\12\0\11\100\27\0\35\41\2\100\1\0\35\41\3\100"+
    "\40\0\10\41\1\0\34\41\6\0\5\100\20\0\66\41"+
    "\12\0\26\41\2\0\10\100\23\41\5\0\10\100\22\41"+
    "\27\0\7\100\120\0\111\41\67\0\63\41\15\0\63\41"+
    "\7\0\6\100\44\41\14\0\12\100\u0126\0\37\100\201\0"+
    "\35\41\12\100\1\41\10\0\26\41\13\0\4\100\213\0"+
    "\27\41\14\0\65\41\32\0\36\100\23\0\55\41\40\0"+
    "\31\41\7\0\12\100\11\0\44\41\17\0\12\100\4\0"+
    "\1\41\13\0\43\41\3\0\1\41\14\0\60\41\16\0"+
    "\4\41\13\0\12\100\1\41\1\0\1\41\4\0\24\100"+
    "\13\0\22\41\1\0\31\41\124\0\7\41\1\0\1\41"+
    "\1\0\4\41\1\0\17\41\1\0\12\41\7\0\57\41"+
    "\21\0\12\100\13\0\10\41\2\0\2\41\2\0\26\41"+
    "\1\0\7\41\1\0\2\41\1\0\5\41\3\0\1\41"+
    "\22\0\1\41\14\0\5\41\236\0\65\41\22\0\4\41"+
    "\5\0\12\100\5\0\1\41\40\0\60\41\24\0\2\41"+
    "\1\0\1\41\10\0\12\100\246\0\57\41\51\0\4\41"+
    "\44\0\60\41\24\0\1\41\13\0\12\100\46\0\53\41"+
    "\15\0\1\41\7\0\12\100\66\0\33\41\25\0\14\100"+
    "\304\0\54\41\164\0\100\41\23\100\14\0\1\41\240\0"+
    "\10\41\2\0\47\41\20\0\1\41\1\0\1\41\34\0"+
    "\1\41\12\0\50\41\7\0\1\41\25\0\1\41\13\0"+
    "\56\41\23\0\1\41\42\0\71\41\7\0\11\41\1\0"+
    "\45\41\21\0\1\41\17\0\35\100\5\0\36\41\160\0"+
    "\7\41\1\0\2\41\1\0\46\41\25\0\1\41\11\0"+
    "\12\100\6\0\6\41\1\0\2\41\1\0\40\41\16\0"+
    "\1\41\7\0\12\100\u0136\0\23\41\315\0\25\100\53\0"+
    "\232\41\146\0\157\100\21\0\304\41\274\0\57\41\321\0"+
    "\107\41\271\0\71\41\7\0\37\41\1\0\12\100\146\0"+
    "\36\41\22\0\60\41\20\0\4\41\14\0\12\100\1\0"+
    "\7\100\1\0\25\41\5\0\23\41\260\0\100\41\27\100"+
    "\151\0\113\41\5\0\1\41\102\0\15\41\100\0\2\41"+
    "\1\0\1\41\34\0\370\41\10\0\363\41\15\0\37\41"+
    "\61\0\3\41\21\0\4\41\10\0\u018c\41\4\0\153\41"+
    "\5\0\15\41\3\0\11\41\7\0\12\41\u0146\0\24\100"+
    "\154\0\31\100\207\0\125\41\1\0\107\41\1\0\2\41"+
    "\2\0\1\41\2\0\2\41\2\0\4\41\1\0\14\41"+
    "\1\0\1\41\1\0\7\41\1\0\101\41\1\0\4\41"+
    "\2\0\10\41\1\0\7\41\1\0\34\41\1\0\4\41"+
    "\1\0\5\41\1\0\1\41\3\0\7\41\1\0\u0154\41"+
    "\2\0\31\41\1\0\31\41\1\0\37\41\1\0\31\41"+
    "\1\0\37\41\1\0\31\41\1\0\37\41\1\0\31\41"+
    "\1\0\37\41\1\0\31\41\1\0\10\41\2\0\62\100"+
    "\55\41\12\0\7\41\2\0\12\100\4\0\1\41\u0171\0"+
    "\54\41\4\0\12\100\6\0\305\41\2\0\11\100\60\0"+
    "\104\41\7\0\1\41\4\0\12\100\u0117\0\73\100\1\0"+
    "\3\100\1\0\4\100\114\0\55\100\1\0\17\100\302\0"+
    "\4\41\1\0\33\41\1\0\2\41\1\0\1\41\2\0"+
    "\1\41\1\0\12\41\1\0\4\41\1\0\1\41\1\0"+
    "\1\41\6\0\1\41\4\0\1\41\1\0\1\41\1\0"+
    "\1\41\1\0\3\41\1\0\2\41\1\0\1\41\2\0"+
    "\1\41\1\0\1\41\1\0\1\41\1\0\1\41\1\0"+
    "\1\41\1\0\2\41\1\0\1\41\2\0\4\41\1\0"+
    "\7\41\1\0\4\41\1\0\4\41\1\0\1\41\1\0"+
    "\12\41\1\0\21\41\5\0\3\41\1\0\5\41\1\0"+
    "\21\41\104\0\15\100\363\0\327\41\51\0\65\41\13\0"+
    "\336\41\2\0\u0182\41\16\0\u0131\41\37\0\36\41\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30720];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\1\1\3\1\2\1\4\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\17\22\1\23\1\24\2\22"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\6\2\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\16\22\1\42"+
    "\5\22\3\0\3\22\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\7\22\1\53\3\22\1\54\1\22"+
    "\1\55\5\22\1\0\1\56\1\57\1\60\10\22\1\61"+
    "\6\22\1\62\2\22\1\63\1\64\1\65\3\22\1\66"+
    "\10\22\1\67\1\70\21\22\1\71\2\22\1\72\3\22"+
    "\1\73\15\22\1\74\1\0\3\22\1\75\5\22\1\0"+
    "\2\22\1\76\1\0\7\22\1\77\1\0\3\22\1\0"+
    "\5\22\1\100\1\22\1\0\3\22\1\0\1\22\2\0"+
    "\1\101\1\102\1\103\1\0\3\22\1\0\1\22\3\0"+
    "\2\22\1\104\1\0\1\105\3\0\2\22\4\0\2\22"+
    "\1\106\2\0\1\107\2\22\2\0\2\22\2\0\1\110"+
    "\1\111\1\112\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\u014a\0\u018c"+
    "\0\u01ce\0\u014a\0\u0210\0\u0252\0\u014a\0\u0294\0\u014a\0\u014a"+
    "\0\u014a\0\u02d6\0\u014a\0\u0318\0\u014a\0\u014a\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc"+
    "\0\u07fe\0\u014a\0\u0840\0\u0882\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u014a\0\u08c4\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e\0\u0a50"+
    "\0\u014a\0\u014a\0\u014a\0\u02d6\0\u014a\0\u014a\0\u014a\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\u05ac\0\u0e2e\0\u0e70"+
    "\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e\0\u1080"+
    "\0\u10c2\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a\0\u014a"+
    "\0\u05ac\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290"+
    "\0\u12d2\0\u1314\0\u1356\0\u1398\0\u05ac\0\u13da\0\u05ac\0\u141c"+
    "\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u014a\0\u05ac\0\u05ac"+
    "\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944\0\u05ac"+
    "\0\u1986\0\u19c8\0\u05ac\0\u05ac\0\u05ac\0\u1a0a\0\u1a4c\0\u1a8e"+
    "\0\u05ac\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c"+
    "\0\u1c9e\0\u05ac\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a"+
    "\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a"+
    "\0\u207c\0\u20be\0\u2100\0\u2142\0\u05ac\0\u2184\0\u21c6\0\u05ac"+
    "\0\u2208\0\u224a\0\u228c\0\u05ac\0\u22ce\0\u2310\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u2520\0\u2562\0\u25a4"+
    "\0\u25e6\0\u05ac\0\u2628\0\u266a\0\u26ac\0\u26ee\0\u05ac\0\u2730"+
    "\0\u2772\0\u27b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u05ac"+
    "\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u05ac\0\u2b50\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc"+
    "\0\u2d1e\0\u2d60\0\u2da2\0\u05ac\0\u2de4\0\u2e26\0\u2e68\0\u2eaa"+
    "\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2\0\u2ff4\0\u05ac\0\u05ac\0\u05ac"+
    "\0\u3036\0\u3078\0\u30ba\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204"+
    "\0\u3246\0\u3288\0\u32ca\0\u05ac\0\u330c\0\u05ac\0\u334e\0\u3390"+
    "\0\u33d2\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0"+
    "\0\u35e2\0\u014a\0\u3624\0\u3666\0\u014a\0\u36a8\0\u36ea\0\u372c"+
    "\0\u376e\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u05ac\0\u05ac\0\u014a"+
    "\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\2\7\1\6\1\7\1\10\1\7\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\2\40\1\41\2\40"+
    "\1\42\1\40\1\43\1\44\1\45\1\40\1\46\1\47"+
    "\1\40\1\50\1\40\1\51\1\6\1\52\1\6\1\53"+
    "\10\40\1\54\1\40\5\6\1\55\1\56\1\57\2\55"+
    "\1\60\2\55\1\61\46\55\1\62\22\55\14\7\1\63"+
    "\41\7\1\64\37\7\1\65\60\7\1\66\16\7\1\67"+
    "\1\7\1\70\65\7\104\0\1\7\125\0\1\71\53\0"+
    "\2\13\1\7\2\0\1\10\73\13\15\0\1\72\100\0"+
    "\1\73\110\0\1\74\77\0\1\74\1\0\1\24\105\0"+
    "\1\75\101\0\1\76\101\0\1\77\75\0\1\40\5\0"+
    "\15\40\1\100\10\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\1\101\15\40\1\102\1\40\1\103\5\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\16\40"+
    "\1\104\7\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\4\40\1\105\3\40\1\106\15\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\13\40\1\107\1\40"+
    "\1\110\10\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\1\111\12\40\1\112\12\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\26\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\15\40\1\113\10\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\16\40\1\114"+
    "\7\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\16\40\1\115\7\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\20\40\1\116\5\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\20\40\1\117\5\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\22\40\1\120"+
    "\3\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\7\40\1\121\10\40\1\122\5\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\7\40\1\123\16\40\3\0"+
    "\14\40\3\0\1\40\2\0\6\124\10\0\1\124\1\125"+
    "\1\0\1\126\54\0\1\124\24\0\1\40\5\0\26\40"+
    "\3\0\4\40\1\127\1\40\1\130\5\40\3\0\1\40"+
    "\23\0\1\40\5\0\26\40\3\0\1\40\1\131\12\40"+
    "\3\0\1\40\11\0\1\132\104\0\1\133\102\0\1\134"+
    "\145\0\1\135\35\0\1\136\101\0\1\137\163\0\1\140"+
    "\25\0\1\40\5\0\3\40\1\141\22\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\2\40\1\142\23\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\16\40"+
    "\1\143\7\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\4\40\1\144\21\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\15\40\1\145\10\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\2\40\1\146\23\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\21\40"+
    "\1\147\4\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\21\40\1\150\4\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\3\40\1\151\22\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\13\40\1\152\12\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\16\40"+
    "\1\153\7\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\17\40\1\154\2\40\1\155\3\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\16\40\1\156\7\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\22\40"+
    "\1\157\3\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\16\40\1\160\7\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\20\40\1\161\5\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\4\40\1\162\21\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\23\40"+
    "\1\163\2\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\4\40\1\164\21\40\3\0\14\40\3\0\1\40"+
    "\2\0\6\124\11\0\1\125\1\0\1\126\54\0\1\124"+
    "\3\0\6\124\7\0\1\165\1\124\1\125\1\0\1\125"+
    "\35\0\1\166\16\0\1\124\22\0\1\125\1\0\1\126"+
    "\101\0\1\40\5\0\26\40\3\0\4\40\1\167\7\40"+
    "\3\0\1\40\23\0\1\40\5\0\26\40\3\0\13\40"+
    "\1\170\3\0\1\40\23\0\1\40\5\0\26\40\3\0"+
    "\4\40\1\171\7\40\3\0\1\40\23\0\1\40\5\0"+
    "\12\40\1\172\13\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\13\40\1\173\12\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\1\174\25\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\3\40\1\175\16\40"+
    "\1\176\3\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\13\40\1\177\12\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\17\40\1\200\6\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\4\40\1\201\21\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\3\40"+
    "\1\202\13\40\1\203\6\40\3\0\1\204\13\40\3\0"+
    "\1\40\23\0\1\40\5\0\21\40\1\205\4\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\1\206\25\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\23\40"+
    "\1\207\2\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\17\40\1\210\6\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\6\40\1\211\17\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\10\40\1\212\15\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\15\40"+
    "\1\213\10\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\4\40\1\214\21\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\15\40\1\215\10\40\3\0\14\40"+
    "\3\0\1\40\2\0\6\124\7\0\1\165\1\124\1\125"+
    "\1\0\1\126\54\0\1\124\24\0\1\40\5\0\26\40"+
    "\3\0\7\40\1\216\4\40\3\0\1\40\23\0\1\40"+
    "\5\0\24\40\1\217\1\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\4\40\1\220\21\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\12\40\1\221\13\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\10\40"+
    "\1\222\15\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\10\40\1\223\15\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\1\224\25\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\13\40\1\225\12\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\26\40\3\0"+
    "\1\226\13\40\3\0\1\40\23\0\1\40\5\0\4\40"+
    "\1\227\21\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\20\40\1\230\5\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\13\40\1\231\12\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\4\40\1\232\21\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\22\40"+
    "\1\233\3\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\22\40\1\234\3\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\20\40\1\235\5\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\15\40\1\236\10\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\26\40"+
    "\3\0\10\40\1\237\3\40\3\0\1\40\23\0\1\40"+
    "\5\0\1\240\25\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\1\241\25\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\22\40\1\242\3\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\15\40\1\243\10\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\20\40"+
    "\1\244\5\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\1\245\25\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\1\40\1\246\24\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\2\40\1\247\23\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\16\40\1\250"+
    "\7\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\16\40\1\251\7\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\26\40\3\0\1\252\13\40\3\0\1\40"+
    "\23\0\1\40\5\0\26\40\3\0\1\253\13\40\3\0"+
    "\1\40\23\0\1\40\5\0\1\254\25\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\6\40\1\255\17\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\26\40"+
    "\3\0\1\256\13\40\3\0\1\40\23\0\1\40\5\0"+
    "\20\40\1\257\5\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\15\40\1\260\10\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\10\40\1\261\15\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\23\40\1\262"+
    "\2\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\4\40\1\263\21\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\25\40\1\264\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\1\265\25\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\13\40\1\266\12\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\6\40\1\267"+
    "\17\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\16\40\1\270\7\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\1\271\25\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\1\272\1\273\3\40\1\274\2\40"+
    "\1\275\15\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\14\40\1\276\11\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\26\40\3\0\5\40\1\277\6\40"+
    "\3\0\1\40\23\0\1\40\5\0\3\40\1\300\22\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\16\40"+
    "\1\301\7\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\4\40\1\302\21\40\3\0\14\40\3\0\1\40"+
    "\21\0\1\303\1\0\1\40\5\0\26\40\3\0\14\40"+
    "\3\0\1\40\23\0\1\40\5\0\2\40\1\304\23\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\1\305"+
    "\25\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\20\40\1\306\5\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\17\40\1\307\6\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\20\40\1\310\5\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\20\40\1\311"+
    "\5\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\16\40\1\312\7\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\13\40\1\313\12\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\15\40\1\314\10\40\3\0"+
    "\14\40\3\0\1\40\21\0\1\315\1\0\1\40\5\0"+
    "\26\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\26\40\3\0\1\40\1\316\12\40\3\0\1\40\23\0"+
    "\1\40\5\0\26\40\3\0\1\317\13\40\3\0\1\40"+
    "\23\0\1\40\5\0\15\40\1\320\10\40\3\0\14\40"+
    "\3\0\1\40\52\0\1\321\52\0\1\40\5\0\12\40"+
    "\1\322\13\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\20\40\1\323\5\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\1\324\25\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\20\40\1\325\5\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\20\40\1\326"+
    "\5\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\16\40\1\327\7\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\16\40\1\330\7\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\22\40\1\331\3\40\3\0"+
    "\14\40\3\0\1\40\52\0\1\332\52\0\1\40\5\0"+
    "\26\40\3\0\11\40\1\333\2\40\3\0\1\40\23\0"+
    "\1\40\5\0\2\40\1\334\10\40\1\335\12\40\3\0"+
    "\14\40\3\0\1\40\35\0\1\336\67\0\1\40\5\0"+
    "\24\40\1\337\1\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\4\40\1\340\21\40\3\0\14\40\3\0"+
    "\1\40\23\0\1\40\5\0\14\40\1\341\11\40\3\0"+
    "\14\40\3\0\1\40\23\0\1\40\5\0\1\342\25\40"+
    "\3\0\14\40\3\0\1\40\23\0\1\40\5\0\1\343"+
    "\25\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\13\40\1\344\12\40\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\1\345\25\40\3\0\14\40\3\0\1\40"+
    "\35\0\1\346\67\0\1\40\5\0\26\40\3\0\1\347"+
    "\13\40\3\0\1\40\23\0\1\40\5\0\16\40\1\350"+
    "\7\40\3\0\14\40\3\0\1\40\23\0\1\40\5\0"+
    "\16\40\1\351\7\40\3\0\14\40\3\0\1\40\33\0"+
    "\1\352\71\0\1\40\5\0\1\353\25\40\3\0\14\40"+
    "\3\0\1\40\21\0\1\354\1\0\1\40\5\0\26\40"+
    "\3\0\14\40\3\0\1\40\21\0\1\355\1\0\1\40"+
    "\5\0\26\40\3\0\14\40\3\0\1\40\23\0\1\40"+
    "\5\0\25\40\1\356\3\0\14\40\3\0\1\40\23\0"+
    "\1\40\5\0\25\40\1\357\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\22\40\1\360\3\40\3\0\14\40"+
    "\3\0\1\40\33\0\1\361\71\0\1\40\5\0\26\40"+
    "\3\0\2\40\1\362\11\40\3\0\1\40\23\0\1\40"+
    "\5\0\15\40\1\363\10\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\16\40\1\364\7\40\3\0\14\40"+
    "\3\0\1\40\53\0\1\365\51\0\1\40\5\0\20\40"+
    "\1\366\5\40\3\0\14\40\3\0\1\40\52\0\1\367"+
    "\101\0\1\370\102\0\1\371\51\0\1\40\5\0\26\40"+
    "\3\0\3\40\1\372\10\40\3\0\1\40\23\0\1\40"+
    "\5\0\3\40\1\373\22\40\3\0\14\40\3\0\1\40"+
    "\23\0\1\40\5\0\17\40\1\374\6\40\3\0\14\40"+
    "\3\0\1\40\41\0\1\375\63\0\1\40\5\0\3\40"+
    "\1\376\22\40\3\0\14\40\3\0\1\40\35\0\1\377"+
    "\101\0\1\u0100\105\0\1\u0101\63\0\1\40\5\0\26\40"+
    "\3\0\10\40\1\u0102\3\40\3\0\1\40\23\0\1\40"+
    "\5\0\10\40\1\u0103\15\40\3\0\14\40\3\0\1\40"+
    "\47\0\1\u0104\65\0\1\u0105\101\0\1\u0106\115\0\1\u0107"+
    "\55\0\1\40\5\0\26\40\3\0\2\40\1\u0108\11\40"+
    "\3\0\1\40\23\0\1\40\5\0\22\40\1\u0109\3\40"+
    "\3\0\14\40\3\0\1\40\46\0\1\u010a\106\0\1\u010b"+
    "\101\0\1\u010c\74\0\1\u010d\56\0\1\40\5\0\26\40"+
    "\3\0\1\40\1\u010e\12\40\3\0\1\40\23\0\1\40"+
    "\5\0\10\40\1\u010f\15\40\3\0\14\40\3\0\1\40"+
    "\41\0\1\u0110\101\0\1\u0111\63\0\1\40\5\0\26\40"+
    "\3\0\6\40\1\u0112\5\40\3\0\1\40\23\0\1\40"+
    "\5\0\16\40\1\u0113\7\40\3\0\14\40\3\0\1\40"+
    "\47\0\1\u0114\101\0\1\u0115\55\0\1\40\5\0\26\40"+
    "\3\0\7\40\1\u0116\4\40\3\0\1\40\23\0\1\40"+
    "\5\0\15\40\1\u0117\10\40\3\0\14\40\3\0\1\40"+
    "\46\0\1\u0118\101\0\1\u0119\34\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\2\11\2\1\1\11\2\1\1\11\1\1\3\11"+
    "\1\1\1\11\1\1\2\11\23\1\1\11\2\1\5\11"+
    "\7\1\3\11\1\1\3\11\24\1\3\0\3\1\7\11"+
    "\24\1\1\0\1\11\114\1\1\0\11\1\1\0\3\1"+
    "\1\0\10\1\1\0\3\1\1\0\7\1\1\0\3\1"+
    "\1\0\1\1\2\0\3\1\1\0\3\1\1\0\1\1"+
    "\3\0\3\1\1\0\1\1\3\0\2\1\4\0\2\1"+
    "\1\11\2\0\1\11\2\1\2\0\2\1\2\0\2\1"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[281];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    /*************************************************************************
    * En esta sección se puede incluir código que se copiará textualmente
    * como parte de la definición de la clase del analizador léxico.
    * Típicamente serán variables de instancia o nuevos métodos de la clase.
    *************************************************************************/

    public ArrayList<MiToken> tablaDeSimbolos = new ArrayList<>();


    /* Variables para reconocer Strings */
    StringBuffer string = new StringBuffer();
    int string_yyline = 0;
    int string_yycolumn = 0;
    int comment_count = 0;

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MiLexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case CADENA: {
              throw new ar.edu.unnoba.comp.jflextp.exceptions.EOFLexerException("Fin de archivo dentro de la cadena: \n" +
                                               string.toString());
            }  // fall though
            case 282: break;
            case COMENTARIO: {
              throw new ar.edu.unnoba.comp.jflextp.exceptions.EOFLexerException("Comentario sin balancear: "+ yytext());
            }  // fall though
            case 283: break;
            case COMENTARIOBRACKETS: {
              throw new ar.edu.unnoba.comp.jflextp.exceptions.EOFLexerException("Comentario sin balancear: "+ yytext());
            }  // fall though
            case 284: break;
            case COMENTARIOCURLYBRACKET: {
              throw new ar.edu.unnoba.comp.jflextp.exceptions.EOFLexerException("Comentario sin balancear: "+ yytext());
            }  // fall though
            case 285: break;
            default:
          { return new java_cup.runtime.Symbol(sym.EOF); }
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new ar.edu.unnoba.comp.jflextp.exceptions.LexerException("Carácter inválido <"+yytext()+">");
            }
            // fall through
          case 76: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 77: break;
          case 3:
            { string.setLength(0);
                         string_yyline = this.yyline;
                         string_yycolumn = this.yycolumn;
                         yybegin(CADENA);
            }
            // fall through
          case 78: break;
          case 4:
            { return token("ABRE_PARENTESIS", yytext());
            }
            // fall through
          case 79: break;
          case 5:
            { return token("CIERRA_PARENTESIS", yytext());
            }
            // fall through
          case 80: break;
          case 6:
            { return token("MULT", yytext());
            }
            // fall through
          case 81: break;
          case 7:
            { return token("MAS", yytext());
            }
            // fall through
          case 82: break;
          case 8:
            { return token("COMA", yytext());
            }
            // fall through
          case 83: break;
          case 9:
            { return token("MENOS", yytext());
            }
            // fall through
          case 84: break;
          case 10:
            { return token("PUNTO");
            }
            // fall through
          case 85: break;
          case 11:
            { return token("DIV", yytext());
            }
            // fall through
          case 86: break;
          case 12:
            { return token("ENTERO_LITERAL", yytext());
            }
            // fall through
          case 87: break;
          case 13:
            { return token("DOS_PUNTOS", yytext());
            }
            // fall through
          case 88: break;
          case 14:
            { return token("PUNTO_COMA", yytext());
            }
            // fall through
          case 89: break;
          case 15:
            { return token("MENOR_QUE", yytext());
            }
            // fall through
          case 90: break;
          case 16:
            { return token("IGUAL",  yytext());
            }
            // fall through
          case 91: break;
          case 17:
            { return token("MAYOR_QUE", yytext());
            }
            // fall through
          case 92: break;
          case 18:
            { return token("IDENTIFICADOR", yytext());
            }
            // fall through
          case 93: break;
          case 19:
            { return token("ABRE_CORCHETE", yytext());
            }
            // fall through
          case 94: break;
          case 20:
            { return token("CIERRA_CORCHETE", yytext());
            }
            // fall through
          case 95: break;
          case 21:
            { string.append(yytext());
            }
            // fall through
          case 96: break;
          case 22:
            { string.append("\t");
            }
            // fall through
          case 97: break;
          case 23:
            { string.append("\n");
            }
            // fall through
          case 98: break;
          case 24:
            { string.append("\r");
            }
            // fall through
          case 99: break;
          case 25:
            { yybegin(YYINITIAL);
                         return token("STRING_LITERAL",
                                      string_yyline, string_yycolumn,
                                      string.toString());
            }
            // fall through
          case 100: break;
          case 26:
            { string.append("\\");
            }
            // fall through
          case 101: break;
          case 27:
            { return token("DIFERENTE", yytext());
            }
            // fall through
          case 102: break;
          case 28:
            { comment_count = 1;
                            yybegin(COMENTARIO);
            }
            // fall through
          case 103: break;
          case 29:
            { throw new ar.edu.unnoba.comp.jflextp.exceptions.CloseCommentException("Cierre de comentario inválido \n");
            }
            // fall through
          case 104: break;
          case 30:
            { return token("FLOTANTE_LITERAL", yytext());
            }
            // fall through
          case 105: break;
          case 31:
            { return token("MENOR_IGUAL_QUE", yytext());
            }
            // fall through
          case 106: break;
          case 32:
            { return token("EQUIVALE", yytext());
            }
            // fall through
          case 107: break;
          case 33:
            { return token("MAYOR_IGUAL_QUE", yytext());
            }
            // fall through
          case 108: break;
          case 34:
            { return token("OR", yytext());
            }
            // fall through
          case 109: break;
          case 35:
            { string.append("\"");
            }
            // fall through
          case 110: break;
          case 36:
            { comment_count = comment_count - 1;
                                      if (comment_count == 0){
                                        yybegin(YYINITIAL);
                                        }
                                        else{yybegin(COMENTARIOCURLYBRACKET);}
            }
            // fall through
          case 111: break;
          case 37:
            { yybegin(COMENTARIOBRACKETS);
            }
            // fall through
          case 112: break;
          case 38:
            { yybegin(COMENTARIO);
                                      ;
            }
            // fall through
          case 113: break;
          case 39:
            { yybegin(COMENTARIOCURLYBRACKET);
            }
            // fall through
          case 114: break;
          case 40:
            { comment_count = comment_count + 1;   
                                      yybegin(COMENTARIO);
            }
            // fall through
          case 115: break;
          case 41:
            { yybegin(COMENTARIOBRACKETS);
                                      ;
            }
            // fall through
          case 116: break;
          case 42:
            { return token("AND", yytext());
            }
            // fall through
          case 117: break;
          case 43:
            { return token("END", yytext());
            }
            // fall through
          case 118: break;
          case 44:
            { return token("ENTERO", yytext());
            }
            // fall through
          case 119: break;
          case 45:
            { return token("NOT", yytext());
            }
            // fall through
          case 120: break;
          case 46:
            { return token("FLOAT_ARRAY_LITERAL", yytext());
            }
            // fall through
          case 121: break;
          case 47:
            { return token("ALL", yytext());
            }
            // fall through
          case 122: break;
          case 48:
            { return token("ANY", yytext());
            }
            // fall through
          case 123: break;
          case 49:
            { return token("ELSE", yytext());
            }
            // fall through
          case 124: break;
          case 50:
            { return token("LOOP", yytext());
            }
            // fall through
          case 125: break;
          case 51:
            { return token("THEN", yytext());
            }
            // fall through
          case 126: break;
          case 52:
            { return token("TRUE", yytext());
            }
            // fall through
          case 127: break;
          case 53:
            { return token("WHEN", yytext());
            }
            // fall through
          case 128: break;
          case 54:
            { return token("BREAK", yytext());
            }
            // fall through
          case 129: break;
          case 55:
            { return token("FALSE", yytext());
            }
            // fall through
          case 130: break;
          case 56:
            { return token("FLOTANTE", yytext());
            }
            // fall through
          case 131: break;
          case 57:
            { return token("CADENA");
            }
            // fall through
          case 132: break;
          case 58:
            { return token("BOOLEAN", yytext());
            }
            // fall through
          case 133: break;
          case 59:
            { return token("DISPLAY", yytext());
            }
            // fall through
          case 134: break;
          case 60:
            { return token("CONTINUE", yytext());
            }
            // fall through
          case 135: break;
          case 61:
            { return token("END_LOOP", yytext());
            }
            // fall through
          case 136: break;
          case 62:
            { return token("CONDITION", yytext());
            }
            // fall through
          case 137: break;
          case 63:
            { return token("INPUT_INT", yytext());
            }
            // fall through
          case 138: break;
          case 64:
            { return token("INPUT_BOOL", yytext());
            }
            // fall through
          case 139: break;
          case 65:
            { return token("FLOAT_ARRAY", yytext());
            }
            // fall through
          case 140: break;
          case 66:
            { return token("INPUT_ARRAY", yytext());
            }
            // fall through
          case 141: break;
          case 67:
            { return token("INPUT_FLOAT", yytext());
            }
            // fall through
          case 142: break;
          case 68:
            { return token("BACKWARD_LOOP", yytext());
            }
            // fall through
          case 143: break;
          case 69:
            { return token("ELSE_BACKWARD", yytext());
            }
            // fall through
          case 144: break;
          case 70:
            { return token("DECLARE_SECTION");
            }
            // fall through
          case 145: break;
          case 71:
            { return token("PROGRAM_SECTION", yytext());
            }
            // fall through
          case 146: break;
          case 72:
            { return token("VALOR_MAS_CERCANO", yytext());
            }
            // fall through
          case 147: break;
          case 73:
            { return token("BACKWARD_CONDITION", yytext());
            }
            // fall through
          case 148: break;
          case 74:
            { return token("ENDDECLARE_SECTION", yytext());
            }
            // fall through
          case 149: break;
          case 75:
            { return token("ENDPROGRAM_SECTION", yytext());
            }
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
