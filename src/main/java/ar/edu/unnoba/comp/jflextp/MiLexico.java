// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: target/classes/lexico.flex

package ar.edu.unnoba.comp.jflextp;

@SuppressWarnings("fallthrough")
public class MiLexico {

    /** This character denotes the end of file. */
    public static final int YYEOF = -1;

    /** Initial size of the lookahead buffer. */
    private static final int ZZ_BUFFERSIZE = 16384;

    // Lexical states.
    public static final int YYINITIAL = 0;
    public static final int CADENA = 2;
    public static final int COMENTARIO = 4;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0,  0,  1,  1,  2, 2
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
                    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
                    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
                    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
                    "\1\u2e00\10\u2f00\31\u1f00\1\u0100\1\u3000\1\u3100\1\u0100\1\u3200"+
                    "\1\u3300\1\u3400\1\u3500\1\u1f00\1\u3600\1\u3700\1\u3800\1\u3900"+
                    "\1\u0100\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
                    "\1\u1f00\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u1f00\1\u4d00\1\u4e00"+
                    "\1\u4f00\1\u1f00\3\u0100\1\u5000\1\u5100\1\u5200\12\u1f00\4\u0100"+
                    "\1\u5300\17\u1f00\2\u0100\1\u5400\41\u1f00\2\u0100\1\u5500\1\u5600"+
                    "\2\u1f00\1\u5700\1\u5800\27\u0100\1\u5900\2\u0100\1\u5a00\45\u1f00"+
                    "\1\u0100\1\u5b00\1\u5c00\11\u1f00\1\u5d00\27\u1f00\1\u5e00\1\u5f00"+
                    "\1\u6000\1\u6100\11\u1f00\1\u6200\1\u6300\5\u1f00\1\u6400\1\u6500"+
                    "\4\u1f00\1\u6600\21\u1f00\246\u0100\1\u6700\20\u0100\1\u6800\1\u6900"+
                    "\25\u0100\1\u6a00\34\u0100\1\u6b00\14\u1f00\2\u0100\1\u6c00\u0e05\u1f00";

    private static int [] zzUnpackcmap_top() {
        int [] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
                    "\1\6\1\7\1\10\4\0\1\11\1\12\1\13\1\14"+
                    "\1\15\1\16\1\17\1\20\1\21\11\22\1\23\1\24"+
                    "\1\25\1\26\1\27\2\0\1\30\1\31\1\32\1\33"+
                    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
                    "\1\44\1\45\1\46\1\47\1\41\1\50\1\51\1\52"+
                    "\1\53\1\41\1\54\3\41\1\55\1\56\1\57\1\0"+
                    "\1\60\1\0\1\61\1\62\1\63\1\64\1\65\1\66"+
                    "\1\67\1\70\1\71\1\41\1\72\1\73\1\74\1\75"+
                    "\1\76\1\77\1\41\1\100\1\101\1\102\1\103\1\41"+
                    "\1\104\3\41\1\105\1\0\1\106\7\0\1\3\44\0"+
                    "\1\41\12\0\1\41\4\0\1\41\5\0\27\41\1\0"+
                    "\37\41\1\0\u01ca\41\4\0\14\41\16\0\5\41\7\0"+
                    "\1\41\1\0\1\41\201\0\5\41\1\0\2\41\2\0"+
                    "\4\41\1\0\1\41\6\0\1\41\1\0\3\41\1\0"+
                    "\1\41\1\0\24\41\1\0\123\41\1\0\213\41\10\0"+
                    "\246\41\1\0\46\41\2\0\1\41\6\0\51\41\107\0"+
                    "\33\41\4\0\4\41\55\0\53\41\25\0\12\107\4\0"+
                    "\2\41\1\0\143\41\1\0\1\41\17\0\2\41\7\0"+
                    "\2\41\12\107\3\41\2\0\1\41\20\0\1\41\1\0"+
                    "\36\41\35\0\131\41\13\0\1\41\16\0\12\107\41\41"+
                    "\11\0\2\41\4\0\1\41\5\0\26\41\4\0\1\41"+
                    "\11\0\1\41\3\0\1\41\27\0\31\41\7\0\13\41"+
                    "\65\0\25\41\1\0\10\41\106\0\66\41\3\0\1\41"+
                    "\22\0\1\41\7\0\12\41\4\0\12\107\1\0\20\41"+
                    "\4\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41"+
                    "\1\0\1\41\3\0\4\41\3\0\1\41\20\0\1\41"+
                    "\15\0\2\41\1\0\3\41\4\0\12\107\2\41\12\0"+
                    "\1\41\10\0\6\41\4\0\2\41\2\0\26\41\1\0"+
                    "\7\41\1\0\2\41\1\0\2\41\1\0\2\41\37\0"+
                    "\4\41\1\0\1\41\7\0\12\107\2\0\3\41\20\0"+
                    "\11\41\1\0\3\41\1\0\26\41\1\0\7\41\1\0"+
                    "\2\41\1\0\5\41\3\0\1\41\22\0\1\41\17\0"+
                    "\2\41\4\0\12\107\11\0\1\41\13\0\10\41\2\0"+
                    "\2\41\2\0\26\41\1\0\7\41\1\0\2\41\1\0"+
                    "\5\41\3\0\1\41\36\0\2\41\1\0\3\41\4\0"+
                    "\12\107\1\0\1\41\21\0\1\41\1\0\6\41\3\0"+
                    "\3\41\1\0\4\41\3\0\2\41\1\0\1\41\1\0"+
                    "\2\41\3\0\2\41\3\0\3\41\3\0\14\41\26\0"+
                    "\1\41\25\0\12\107\25\0\10\41\1\0\3\41\1\0"+
                    "\27\41\1\0\20\41\3\0\1\41\32\0\3\41\5\0"+
                    "\2\41\4\0\12\107\20\0\1\41\4\0\10\41\1\0"+
                    "\3\41\1\0\27\41\1\0\12\41\1\0\5\41\3\0"+
                    "\1\41\40\0\1\41\1\0\2\41\4\0\12\107\1\0"+
                    "\2\41\22\0\10\41\1\0\3\41\1\0\51\41\2\0"+
                    "\1\41\20\0\1\41\5\0\3\41\10\0\3\41\4\0"+
                    "\12\107\12\0\6\41\5\0\22\41\3\0\30\41\1\0"+
                    "\11\41\1\0\1\41\2\0\7\41\37\0\12\107\21\0"+
                    "\60\41\1\0\2\41\14\0\7\41\11\0\12\107\47\0"+
                    "\2\41\1\0\1\41\1\0\5\41\1\0\30\41\1\0"+
                    "\1\41\1\0\12\41\1\0\2\41\11\0\1\41\2\0"+
                    "\5\41\1\0\1\41\11\0\12\107\2\0\4\41\40\0"+
                    "\1\41\37\0\12\107\26\0\10\41\1\0\44\41\33\0"+
                    "\5\41\163\0\53\41\24\0\1\41\12\107\6\0\6\41"+
                    "\4\0\4\41\3\0\1\41\3\0\2\41\7\0\3\41"+
                    "\4\0\15\41\14\0\1\41\1\0\12\107\6\0\46\41"+
                    "\1\0\1\41\5\0\1\41\2\0\53\41\1\0\115\41"+
                    "\1\0\4\41\2\0\7\41\1\0\1\41\1\0\4\41"+
                    "\2\0\51\41\1\0\4\41\2\0\41\41\1\0\4\41"+
                    "\2\0\7\41\1\0\1\41\1\0\4\41\2\0\17\41"+
                    "\1\0\71\41\1\0\4\41\2\0\103\41\45\0\20\41"+
                    "\20\0\126\41\2\0\6\41\3\0\u016c\41\2\0\21\41"+
                    "\1\0\32\41\5\0\113\41\6\0\10\41\7\0\15\41"+
                    "\1\0\4\41\16\0\22\41\16\0\22\41\16\0\15\41"+
                    "\1\0\3\41\17\0\64\41\43\0\1\41\4\0\1\41"+
                    "\3\0\12\107\46\0\12\107\6\0\131\41\7\0\5\41"+
                    "\2\0\42\41\1\0\1\41\5\0\106\41\12\0\37\41"+
                    "\47\0\12\107\36\41\2\0\5\41\13\0\54\41\4\0"+
                    "\32\41\6\0\12\107\46\0\27\41\11\0\65\41\53\0"+
                    "\12\107\6\0\12\107\15\0\1\41\135\0\57\41\21\0"+
                    "\7\41\4\0\12\107\51\0\36\41\15\0\2\41\12\107"+
                    "\54\41\32\0\44\41\34\0\12\107\3\0\3\41\12\107"+
                    "\44\41\2\0\11\41\7\0\53\41\2\0\3\41\51\0"+
                    "\4\41\1\0\6\41\1\0\2\41\3\0\1\41\5\0"+
                    "\300\41\100\0\26\41\2\0\6\41\2\0\46\41\2\0"+
                    "\6\41\2\0\10\41\1\0\1\41\1\0\1\41\1\0"+
                    "\1\41\1\0\37\41\2\0\65\41\1\0\7\41\1\0"+
                    "\1\41\3\0\3\41\1\0\7\41\3\0\4\41\2\0"+
                    "\6\41\4\0\15\41\5\0\3\41\1\0\7\41\53\0"+
                    "\2\3\107\0\1\41\15\0\1\41\20\0\15\41\145\0"+
                    "\1\41\4\0\1\41\2\0\12\41\1\0\1\41\3\0"+
                    "\5\41\6\0\1\41\1\0\1\41\1\0\1\41\1\0"+
                    "\4\41\1\0\13\41\2\0\4\41\5\0\5\41\4\0"+
                    "\1\41\64\0\2\41\u017b\0\57\41\1\0\57\41\1\0"+
                    "\205\41\6\0\4\41\3\0\2\41\14\0\46\41\1\0"+
                    "\1\41\5\0\1\41\2\0\70\41\7\0\1\41\20\0"+
                    "\27\41\11\0\7\41\1\0\7\41\1\0\7\41\1\0"+
                    "\7\41\1\0\7\41\1\0\7\41\1\0\7\41\1\0"+
                    "\7\41\120\0\1\41\325\0\2\41\52\0\5\41\5\0"+
                    "\2\41\4\0\126\41\6\0\3\41\1\0\132\41\1\0"+
                    "\4\41\5\0\53\41\1\0\136\41\21\0\33\41\65\0"+
                    "\306\41\112\0\360\41\20\0\215\41\103\0\56\41\2\0"+
                    "\15\41\3\0\20\41\12\107\2\41\24\0\57\41\20\0"+
                    "\37\41\2\0\106\41\61\0\11\41\2\0\147\41\2\0"+
                    "\65\41\2\0\5\41\60\0\13\41\1\0\3\41\1\0"+
                    "\4\41\1\0\27\41\35\0\64\41\16\0\62\41\34\0"+
                    "\12\107\30\0\6\41\3\0\1\41\1\0\2\41\1\0"+
                    "\12\107\34\41\12\0\27\41\31\0\35\41\7\0\57\41"+
                    "\34\0\1\41\12\107\6\0\5\41\1\0\12\41\12\107"+
                    "\5\41\1\0\51\41\27\0\3\41\1\0\10\41\4\0"+
                    "\12\107\6\0\27\41\3\0\1\41\3\0\62\41\1\0"+
                    "\1\41\3\0\2\41\2\0\5\41\2\0\1\41\1\0"+
                    "\1\41\30\0\3\41\2\0\13\41\7\0\3\41\14\0"+
                    "\6\41\2\0\6\41\2\0\6\41\11\0\7\41\1\0"+
                    "\7\41\1\0\53\41\1\0\14\41\10\0\163\41\15\0"+
                    "\12\107\6\0\244\41\14\0\27\41\4\0\61\41\4\0"+
                    "\u0100\3\156\41\2\0\152\41\46\0\7\41\14\0\5\41"+
                    "\5\0\1\41\1\0\12\41\1\0\15\41\1\0\5\41"+
                    "\1\0\1\41\1\0\2\41\1\0\2\41\1\0\154\41"+
                    "\41\0\153\41\22\0\100\41\2\0\66\41\50\0\14\41"+
                    "\164\0\5\41\1\0\207\41\23\0\12\107\7\0\32\41"+
                    "\6\0\32\41\13\0\131\41\3\0\6\41\2\0\6\41"+
                    "\2\0\6\41\2\0\3\41\43\0\14\41\1\0\32\41"+
                    "\1\0\23\41\1\0\2\41\1\0\17\41\2\0\16\41"+
                    "\42\0\173\41\205\0\35\41\3\0\61\41\57\0\40\41"+
                    "\15\0\24\41\1\0\10\41\6\0\46\41\12\0\36\41"+
                    "\2\0\44\41\4\0\10\41\60\0\236\41\2\0\12\107"+
                    "\6\0\44\41\4\0\44\41\4\0\50\41\10\0\64\41"+
                    "\234\0\67\41\11\0\26\41\12\0\10\41\230\0\6\41"+
                    "\2\0\1\41\1\0\54\41\1\0\2\41\3\0\1\41"+
                    "\2\0\27\41\12\0\27\41\11\0\37\41\101\0\23\41"+
                    "\1\0\2\41\12\0\26\41\12\0\32\41\106\0\70\41"+
                    "\6\0\2\41\100\0\1\41\17\0\4\41\1\0\3\41"+
                    "\1\0\35\41\52\0\35\41\3\0\35\41\43\0\10\41"+
                    "\1\0\34\41\33\0\66\41\12\0\26\41\12\0\23\41"+
                    "\15\0\22\41\156\0\111\41\67\0\63\41\15\0\63\41"+
                    "\15\0\44\41\14\0\12\107\306\0\35\41\12\0\1\41"+
                    "\10\0\26\41\232\0\27\41\14\0\65\41\56\0\12\107"+
                    "\23\0\55\41\40\0\31\41\7\0\12\107\11\0\44\41"+
                    "\17\0\12\107\4\0\1\41\13\0\43\41\3\0\1\41"+
                    "\14\0\60\41\16\0\4\41\13\0\12\107\1\41\1\0"+
                    "\1\41\43\0\22\41\1\0\31\41\124\0\7\41\1\0"+
                    "\1\41\1\0\4\41\1\0\17\41\1\0\12\41\7\0"+
                    "\57\41\21\0\12\107\13\0\10\41\2\0\2\41\2\0"+
                    "\26\41\1\0\7\41\1\0\2\41\1\0\5\41\3\0"+
                    "\1\41\22\0\1\41\14\0\5\41\236\0\65\41\22\0"+
                    "\4\41\5\0\12\107\5\0\1\41\40\0\60\41\24\0"+
                    "\2\41\1\0\1\41\10\0\12\107\246\0\57\41\51\0"+
                    "\4\41\44\0\60\41\24\0\1\41\13\0\12\107\46\0"+
                    "\53\41\15\0\1\41\7\0\12\107\66\0\33\41\25\0"+
                    "\12\107\306\0\54\41\164\0\100\41\12\107\25\0\1\41"+
                    "\240\0\10\41\2\0\47\41\20\0\1\41\1\0\1\41"+
                    "\34\0\1\41\12\0\50\41\7\0\1\41\25\0\1\41"+
                    "\13\0\56\41\23\0\1\41\42\0\71\41\7\0\11\41"+
                    "\1\0\45\41\21\0\1\41\17\0\12\107\30\0\36\41"+
                    "\160\0\7\41\1\0\2\41\1\0\46\41\25\0\1\41"+
                    "\11\0\12\107\6\0\6\41\1\0\2\41\1\0\40\41"+
                    "\16\0\1\41\7\0\12\107\u0136\0\23\41\15\0\232\41"+
                    "\346\0\304\41\274\0\57\41\321\0\107\41\271\0\71\41"+
                    "\7\0\37\41\1\0\12\107\146\0\36\41\22\0\60\41"+
                    "\20\0\4\41\14\0\12\107\11\0\25\41\5\0\23\41"+
                    "\260\0\100\41\200\0\113\41\5\0\1\41\102\0\15\41"+
                    "\100\0\2\41\1\0\1\41\34\0\370\41\10\0\363\41"+
                    "\15\0\37\41\61\0\3\41\21\0\4\41\10\0\u018c\41"+
                    "\4\0\153\41\5\0\15\41\3\0\11\41\7\0\12\41"+
                    "\146\0\125\41\1\0\107\41\1\0\2\41\2\0\1\41"+
                    "\2\0\2\41\2\0\4\41\1\0\14\41\1\0\1\41"+
                    "\1\0\7\41\1\0\101\41\1\0\4\41\2\0\10\41"+
                    "\1\0\7\41\1\0\34\41\1\0\4\41\1\0\5\41"+
                    "\1\0\1\41\3\0\7\41\1\0\u0154\41\2\0\31\41"+
                    "\1\0\31\41\1\0\37\41\1\0\31\41\1\0\37\41"+
                    "\1\0\31\41\1\0\37\41\1\0\31\41\1\0\37\41"+
                    "\1\0\31\41\1\0\10\41\2\0\62\107\55\41\12\0"+
                    "\7\41\2\0\12\107\4\0\1\41\u0171\0\54\41\4\0"+
                    "\12\107\6\0\305\41\73\0\104\41\7\0\1\41\4\0"+
                    "\12\107\246\0\4\41\1\0\33\41\1\0\2\41\1\0"+
                    "\1\41\2\0\1\41\1\0\12\41\1\0\4\41\1\0"+
                    "\1\41\1\0\1\41\6\0\1\41\4\0\1\41\1\0"+
                    "\1\41\1\0\1\41\1\0\3\41\1\0\2\41\1\0"+
                    "\1\41\2\0\1\41\1\0\1\41\1\0\1\41\1\0"+
                    "\1\41\1\0\1\41\1\0\2\41\1\0\1\41\2\0"+
                    "\4\41\1\0\7\41\1\0\4\41\1\0\4\41\1\0"+
                    "\1\41\1\0\12\41\1\0\21\41\5\0\3\41\1\0"+
                    "\5\41\1\0\21\41\104\0\327\41\51\0\65\41\13\0"+
                    "\336\41\2\0\u0182\41\16\0\u0131\41\37\0\36\41\342\0";

    private static int [] zzUnpackcmap_blocks() {
        int [] result = new int[27904];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\3\0\1\1\2\2\1\1\1\3\1\2\1\4\1\5"+
                    "\1\6\1\7\1\10\1\11\1\1\1\12\2\13\1\14"+
                    "\1\15\1\16\1\1\1\17\17\20\1\21\1\22\16\20"+
                    "\1\23\1\24\1\25\1\26\1\25\2\2\1\27\1\30"+
                    "\3\0\1\31\1\32\1\33\1\0\1\34\1\35\1\36"+
                    "\1\37\15\20\1\40\31\20\1\41\1\42\1\43\2\0"+
                    "\1\20\1\44\6\20\1\45\4\20\1\46\16\20\1\45"+
                    "\12\20\3\0\6\20\1\47\11\20\1\50\1\51\1\52"+
                    "\22\20\1\0\1\53\2\20\1\54\2\20\1\55\2\20"+
                    "\1\56\1\57\3\20\1\60\2\20\1\61\20\20\1\0"+
                    "\2\20\1\62\1\63\11\20\1\64\4\20\4\0\1\65"+
                    "\7\20\1\66\1\67\1\0\2\20\6\0\2\20\2\0"+
                    "\2\20\3\0\1\70\2\0\2\20\2\0\2\20\1\71"+
                    "\4\0\2\20\4\0\1\72\1\73\35\0\1\74\2\0"+
                    "\1\75\1\76\12\0\1\77\1\100";

    private static int [] zzUnpackAction() {
        int [] result = new int[352];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\110\0\220\0\330\0\330\0\u0120\0\u0168\0\330"+
                    "\0\u01b0\0\u01f8\0\330\0\u0240\0\u0288\0\330\0\330\0\u02d0"+
                    "\0\330\0\u0318\0\u0360\0\u03a8\0\330\0\u03f0\0\u0438\0\u0480"+
                    "\0\u04c8\0\u0510\0\u0558\0\u05a0\0\u05e8\0\u0630\0\u0678\0\u06c0"+
                    "\0\u0708\0\u0750\0\u0798\0\u07e0\0\u0828\0\u0870\0\u08b8\0\330"+
                    "\0\330\0\u0900\0\u0948\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0"+
                    "\0\u0af8\0\u0b40\0\u0b88\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\330"+
                    "\0\330\0\330\0\330\0\u0cf0\0\u0d38\0\u0d80\0\330\0\330"+
                    "\0\u0dc8\0\u0e10\0\u0e58\0\330\0\330\0\u02d0\0\u0318\0\330"+
                    "\0\330\0\330\0\330\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0"+
                    "\0\u1008\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200"+
                    "\0\u0678\0\u1248\0\u1290\0\u12d8\0\u1320\0\u1368\0\u13b0\0\u13f8"+
                    "\0\u1440\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638"+
                    "\0\u1680\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878"+
                    "\0\u18c0\0\u1908\0\330\0\330\0\330\0\u1950\0\u1998\0\u19e0"+
                    "\0\u0678\0\u1a28\0\u1a70\0\u1ab8\0\u1b00\0\u1b48\0\u1b90\0\u1bd8"+
                    "\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u0678\0\u1d40\0\u1d88\0\u1dd0"+
                    "\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80\0\u1fc8\0\u2010"+
                    "\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0\0\u2208\0\u2250"+
                    "\0\u2298\0\u22e0\0\u2328\0\u2370\0\u23b8\0\u2400\0\u2448\0\u2490"+
                    "\0\u24d8\0\u2520\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u0678"+
                    "\0\u26d0\0\u2718\0\u2760\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8"+
                    "\0\u2910\0\u0678\0\u0678\0\u0678\0\u2958\0\u29a0\0\u29e8\0\u2a30"+
                    "\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0\0\u2c28\0\u2c70"+
                    "\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20\0\u2e68\0\330"+
                    "\0\u2eb0\0\u2ef8\0\u0678\0\u2f40\0\u2f88\0\u0678\0\u2fd0\0\u3018"+
                    "\0\u0678\0\u0678\0\u3060\0\u30a8\0\u30f0\0\u0678\0\u3138\0\u3180"+
                    "\0\u0678\0\u31c8\0\u3210\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378"+
                    "\0\u33c0\0\u3408\0\u3450\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8"+
                    "\0\u3600\0\u3648\0\u3690\0\u36d8\0\u0678\0\u0678\0\u3720\0\u3768"+
                    "\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0\0\u3918\0\u3960\0\u0678"+
                    "\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u3ac8\0\u3b10\0\u3b58\0\u3ba0"+
                    "\0\u0678\0\u3be8\0\u3c30\0\u3c78\0\u3cc0\0\u3d08\0\u3d50\0\u3d98"+
                    "\0\u0678\0\u0678\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u3f00\0\u3f48"+
                    "\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0\0\u40f8\0\u4140\0\u4188"+
                    "\0\u41d0\0\u4218\0\u4260\0\u42a8\0\330\0\u42f0\0\u4338\0\u4380"+
                    "\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8\0\330\0\u4530\0\u4578"+
                    "\0\u45c0\0\u4608\0\u4650\0\u4698\0\u46e0\0\u4728\0\u4770\0\u47b8"+
                    "\0\330\0\330\0\u4800\0\u4848\0\u4890\0\u48d8\0\u4920\0\u4968"+
                    "\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\u4b60\0\u4ba8"+
                    "\0\u4bf0\0\u4c38\0\u4c80\0\u4cc8\0\u4d10\0\u4d58\0\u4da0\0\u4de8"+
                    "\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u4f50\0\u4f98\0\u4fe0\0\330"+
                    "\0\u5028\0\u5070\0\330\0\330\0\u50b8\0\u5100\0\u5148\0\u5190"+
                    "\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u52f8\0\u5340\0\330\0\330";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[352];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length() - 1;
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpacktrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\4\2\5\1\4\1\5\1\6\1\7\1\10\1\11"+
                    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
                    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
                    "\1\32\1\33\1\34\1\35\1\36\2\37\1\40\4\37"+
                    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\37"+
                    "\1\50\1\4\1\51\1\4\1\52\1\53\1\54\1\55"+
                    "\1\56\1\57\2\37\1\60\3\37\1\61\1\62\1\63"+
                    "\1\64\1\65\1\66\1\67\1\37\1\70\1\71\1\4"+
                    "\7\72\1\73\46\72\1\74\31\72\11\5\1\75\1\5"+
                    "\1\76\74\5\112\0\1\5\133\0\1\77\61\0\2\11"+
                    "\1\5\2\0\1\6\102\11\13\0\1\100\2\0\1\101"+
                    "\1\102\1\0\2\103\64\0\1\103\12\0\1\104\111\0"+
                    "\1\105\114\0\2\106\104\0\1\106\1\0\2\107\104\0"+
                    "\1\106\1\0\2\23\113\0\1\110\107\0\1\111\107\0"+
                    "\1\112\107\0\1\113\111\0\1\37\1\114\13\37\1\115"+
                    "\7\37\4\0\24\37\33\0\16\37\1\116\1\37\1\117"+
                    "\4\37\4\0\24\37\33\0\16\37\1\120\6\37\4\0"+
                    "\24\37\33\0\4\37\1\121\16\37\1\122\1\37\4\0"+
                    "\24\37\33\0\13\37\1\123\1\37\1\124\7\37\4\0"+
                    "\24\37\33\0\1\125\12\37\1\126\11\37\4\0\24\37"+
                    "\33\0\25\37\4\0\24\37\33\0\15\37\1\127\7\37"+
                    "\4\0\24\37\33\0\16\37\1\130\6\37\4\0\24\37"+
                    "\33\0\20\37\1\131\4\37\4\0\24\37\33\0\20\37"+
                    "\1\132\4\37\4\0\24\37\33\0\4\37\1\133\20\37"+
                    "\4\0\24\37\33\0\7\37\1\134\15\37\4\0\24\37"+
                    "\33\0\7\37\1\135\10\37\1\136\4\37\4\0\24\37"+
                    "\33\0\15\37\1\137\7\37\4\0\24\37\33\0\25\37"+
                    "\4\0\1\37\1\140\12\37\1\141\7\37\33\0\25\37"+
                    "\4\0\15\37\1\142\1\37\1\143\4\37\33\0\25\37"+
                    "\4\0\15\37\1\144\6\37\33\0\25\37\4\0\4\37"+
                    "\1\145\15\37\1\146\1\37\33\0\25\37\4\0\12\37"+
                    "\1\147\1\37\1\150\7\37\33\0\25\37\4\0\1\151"+
                    "\11\37\1\152\11\37\33\0\25\37\4\0\14\37\1\153"+
                    "\7\37\33\0\25\37\4\0\15\37\1\154\6\37\33\0"+
                    "\25\37\4\0\17\37\1\131\4\37\33\0\25\37\4\0"+
                    "\17\37\1\155\4\37\33\0\25\37\4\0\4\37\1\156"+
                    "\17\37\33\0\25\37\4\0\7\37\1\157\14\37\33\0"+
                    "\25\37\4\0\7\37\1\160\7\37\1\161\4\37\33\0"+
                    "\25\37\4\0\14\37\1\162\7\37\12\0\1\163\113\0"+
                    "\1\164\106\0\1\165\114\0\1\102\1\0\2\103\64\0"+
                    "\1\103\21\0\2\166\64\0\1\166\15\0\1\167\1\0"+
                    "\1\102\1\0\2\103\64\0\1\103\30\0\21\37\1\170"+
                    "\3\37\4\0\24\37\33\0\3\37\1\171\21\37\4\0"+
                    "\24\37\33\0\16\37\1\172\6\37\4\0\24\37\33\0"+
                    "\4\37\1\173\20\37\4\0\24\37\33\0\15\37\1\174"+
                    "\7\37\4\0\24\37\33\0\2\37\1\175\22\37\4\0"+
                    "\24\37\33\0\17\37\1\176\5\37\4\0\24\37\33\0"+
                    "\21\37\1\177\3\37\4\0\24\37\33\0\3\37\1\200"+
                    "\21\37\4\0\24\37\33\0\13\37\1\201\11\37\4\0"+
                    "\24\37\33\0\16\37\1\202\6\37\4\0\24\37\33\0"+
                    "\17\37\1\203\2\37\1\204\2\37\4\0\24\37\33\0"+
                    "\22\37\1\205\2\37\4\0\24\37\33\0\16\37\1\206"+
                    "\6\37\4\0\24\37\33\0\17\37\1\207\5\37\4\0"+
                    "\24\37\33\0\16\37\1\210\6\37\4\0\24\37\33\0"+
                    "\4\37\1\211\20\37\4\0\24\37\33\0\23\37\1\212"+
                    "\1\37\4\0\24\37\33\0\13\37\1\213\6\37\1\214"+
                    "\2\37\4\0\24\37\33\0\25\37\4\0\20\37\1\215"+
                    "\3\37\33\0\25\37\4\0\3\37\1\171\20\37\33\0"+
                    "\25\37\4\0\15\37\1\216\6\37\33\0\25\37\4\0"+
                    "\4\37\1\217\17\37\33\0\25\37\4\0\14\37\1\220"+
                    "\7\37\33\0\25\37\4\0\2\37\1\221\21\37\33\0"+
                    "\25\37\4\0\16\37\1\222\5\37\33\0\25\37\4\0"+
                    "\20\37\1\223\3\37\33\0\25\37\4\0\3\37\1\224"+
                    "\20\37\33\0\25\37\4\0\12\37\1\225\11\37\33\0"+
                    "\25\37\4\0\15\37\1\226\6\37\33\0\25\37\4\0"+
                    "\21\37\1\227\2\37\33\0\25\37\4\0\21\37\1\205"+
                    "\2\37\33\0\25\37\4\0\15\37\1\230\6\37\33\0"+
                    "\25\37\4\0\16\37\1\231\5\37\33\0\25\37\4\0"+
                    "\15\37\1\232\6\37\33\0\25\37\4\0\4\37\1\233"+
                    "\17\37\33\0\25\37\4\0\22\37\1\234\1\37\33\0"+
                    "\25\37\4\0\12\37\1\235\6\37\1\236\2\37\20\0"+
                    "\1\167\3\0\2\166\64\0\1\166\16\0\1\237\1\240"+
                    "\1\0\2\241\64\0\1\241\30\0\22\37\1\242\2\37"+
                    "\4\0\24\37\33\0\13\37\1\243\11\37\4\0\24\37"+
                    "\33\0\1\244\24\37\4\0\24\37\33\0\22\37\1\245"+
                    "\2\37\4\0\24\37\33\0\13\37\1\246\11\37\4\0"+
                    "\24\37\33\0\13\37\1\247\11\37\4\0\24\37\33\0"+
                    "\4\37\1\250\20\37\4\0\24\37\33\0\3\37\1\251"+
                    "\13\37\1\252\5\37\4\0\24\37\33\0\21\37\1\253"+
                    "\3\37\4\0\24\37\33\0\1\254\24\37\4\0\24\37"+
                    "\33\0\23\37\1\255\1\37\4\0\24\37\33\0\4\37"+
                    "\1\256\20\37\4\0\24\37\33\0\6\37\1\257\5\37"+
                    "\1\260\10\37\4\0\24\37\33\0\4\37\1\261\20\37"+
                    "\4\0\24\37\33\0\24\37\1\262\4\0\24\37\33\0"+
                    "\15\37\1\263\7\37\4\0\24\37\33\0\4\37\1\264"+
                    "\20\37\4\0\24\37\33\0\4\37\1\265\20\37\4\0"+
                    "\24\37\33\0\10\37\1\266\14\37\4\0\24\37\33\0"+
                    "\25\37\4\0\21\37\1\267\2\37\33\0\25\37\4\0"+
                    "\12\37\1\270\11\37\33\0\25\37\4\0\1\271\23\37"+
                    "\33\0\25\37\4\0\21\37\1\272\2\37\33\0\25\37"+
                    "\4\0\12\37\1\273\11\37\33\0\25\37\4\0\12\37"+
                    "\1\274\11\37\33\0\25\37\4\0\4\37\1\250\17\37"+
                    "\33\0\25\37\4\0\3\37\1\275\12\37\1\276\5\37"+
                    "\33\0\25\37\4\0\20\37\1\277\3\37\33\0\25\37"+
                    "\4\0\1\300\23\37\33\0\25\37\4\0\4\37\1\301"+
                    "\17\37\33\0\25\37\4\0\6\37\1\302\4\37\1\303"+
                    "\10\37\33\0\25\37\4\0\4\37\1\304\17\37\33\0"+
                    "\25\37\4\0\23\37\1\262\33\0\25\37\4\0\14\37"+
                    "\1\263\7\37\33\0\25\37\4\0\4\37\1\264\17\37"+
                    "\33\0\25\37\4\0\4\37\1\305\17\37\33\0\25\37"+
                    "\4\0\10\37\1\306\13\37\22\0\1\240\1\0\2\241"+
                    "\64\0\1\241\21\0\2\307\64\0\1\307\12\0\1\310"+
                    "\4\0\1\240\1\0\2\241\64\0\1\241\30\0\20\37"+
                    "\1\311\4\37\4\0\24\37\33\0\4\37\1\312\20\37"+
                    "\4\0\24\37\33\0\12\37\1\313\12\37\4\0\24\37"+
                    "\33\0\10\37\1\314\14\37\4\0\24\37\33\0\1\315"+
                    "\24\37\4\0\24\37\33\0\4\37\1\316\20\37\4\0"+
                    "\24\37\33\0\4\37\1\317\20\37\4\0\24\37\33\0"+
                    "\20\37\1\320\4\37\4\0\24\37\33\0\4\37\1\321"+
                    "\20\37\4\0\24\37\33\0\22\37\1\322\2\37\4\0"+
                    "\24\37\33\0\22\37\1\323\2\37\4\0\24\37\33\0"+
                    "\6\37\1\324\16\37\4\0\24\37\33\0\20\37\1\325"+
                    "\4\37\4\0\24\37\33\0\20\37\1\326\4\37\4\0"+
                    "\24\37\33\0\1\327\24\37\4\0\24\37\33\0\21\37"+
                    "\1\330\3\37\4\0\24\37\33\0\13\37\1\331\11\37"+
                    "\4\0\24\37\33\0\25\37\4\0\17\37\1\332\4\37"+
                    "\33\0\25\37\4\0\4\37\1\333\17\37\33\0\25\37"+
                    "\4\0\11\37\1\313\12\37\33\0\25\37\4\0\10\37"+
                    "\1\334\13\37\33\0\25\37\4\0\1\335\23\37\33\0"+
                    "\25\37\4\0\4\37\1\316\17\37\33\0\25\37\4\0"+
                    "\4\37\1\336\17\37\33\0\25\37\4\0\17\37\1\337"+
                    "\4\37\33\0\25\37\4\0\4\37\1\321\17\37\33\0"+
                    "\25\37\4\0\21\37\1\322\2\37\33\0\25\37\4\0"+
                    "\6\37\1\340\15\37\33\0\25\37\4\0\17\37\1\341"+
                    "\4\37\33\0\25\37\4\0\17\37\1\326\4\37\33\0"+
                    "\25\37\4\0\1\342\23\37\33\0\25\37\4\0\20\37"+
                    "\1\343\3\37\33\0\25\37\4\0\12\37\1\331\11\37"+
                    "\15\0\1\310\6\0\2\307\64\0\1\307\30\0\1\344"+
                    "\24\37\4\0\24\37\33\0\1\345\24\37\4\0\24\37"+
                    "\33\0\15\37\1\346\7\37\4\0\24\37\33\0\20\37"+
                    "\1\347\4\37\4\0\24\37\33\0\2\37\1\350\22\37"+
                    "\4\0\24\37\33\0\16\37\1\351\6\37\4\0\24\37"+
                    "\33\0\25\37\3\0\1\352\24\37\33\0\4\37\1\353"+
                    "\20\37\4\0\24\37\33\0\1\354\24\37\4\0\24\37"+
                    "\33\0\22\37\1\355\2\37\4\0\24\37\33\0\21\37"+
                    "\1\356\3\37\4\0\24\37\33\0\25\37\4\0\1\357"+
                    "\23\37\33\0\25\37\4\0\1\360\23\37\33\0\25\37"+
                    "\4\0\14\37\1\361\7\37\33\0\25\37\4\0\17\37"+
                    "\1\362\4\37\33\0\25\37\4\0\2\37\1\363\21\37"+
                    "\33\0\25\37\4\0\15\37\1\364\6\37\33\0\25\37"+
                    "\4\0\4\37\1\365\17\37\33\0\25\37\4\0\1\366"+
                    "\23\37\33\0\25\37\4\0\21\37\1\355\2\37\33\0"+
                    "\25\37\4\0\20\37\1\356\3\37\33\0\2\37\1\367"+
                    "\22\37\4\0\24\37\33\0\15\37\1\370\7\37\4\0"+
                    "\24\37\33\0\23\37\1\371\1\37\4\0\24\37\33\0"+
                    "\4\37\1\372\20\37\4\0\24\37\33\0\13\37\1\373"+
                    "\11\37\4\0\24\37\33\0\6\37\1\374\16\37\4\0"+
                    "\24\37\34\0\1\375\1\0\1\376\1\0\1\377\2\0"+
                    "\1\u0100\77\0\20\37\1\u0101\4\37\4\0\24\37\33\0"+
                    "\14\37\1\u0102\10\37\4\0\24\37\33\0\25\37\4\0"+
                    "\2\37\1\u0103\21\37\33\0\25\37\4\0\14\37\1\370"+
                    "\7\37\33\0\25\37\4\0\22\37\1\u0104\1\37\33\0"+
                    "\25\37\4\0\4\37\1\u0105\17\37\33\0\25\37\4\0"+
                    "\12\37\1\u0106\11\37\33\0\25\37\4\0\6\37\1\u0107"+
                    "\15\37\33\0\25\37\4\0\17\37\1\u0101\4\37\33\0"+
                    "\25\37\4\0\13\37\1\u0108\10\37\33\0\22\37\1\u0109"+
                    "\2\37\4\0\24\37\33\0\4\37\1\u010a\20\37\4\0"+
                    "\24\37\22\0\1\u010b\10\0\25\37\4\0\24\37\33\0"+
                    "\1\u010c\24\37\4\0\24\37\33\0\20\37\1\u010d\4\37"+
                    "\4\0\24\37\51\0\1\u010e\114\0\1\u010f\77\0\1\u0110"+
                    "\111\0\1\u0111\61\0\1\u0112\10\0\25\37\4\0\24\37"+
                    "\33\0\25\37\4\0\21\37\1\u0109\2\37\33\0\25\37"+
                    "\4\0\4\37\1\u010a\17\37\22\0\1\u0113\10\0\25\37"+
                    "\4\0\24\37\33\0\25\37\4\0\1\u0114\23\37\33\0"+
                    "\25\37\4\0\17\37\1\u0115\4\37\22\0\1\u0116\10\0"+
                    "\25\37\4\0\24\37\54\0\1\u0117\66\0\20\37\1\u0118"+
                    "\4\37\4\0\24\37\33\0\1\u0119\24\37\4\0\24\37"+
                    "\51\0\1\u011a\110\0\1\u011b\106\0\1\u011c\113\0\1\u011d"+
                    "\106\0\1\u011e\137\0\1\u011f\36\0\25\37\4\0\17\37"+
                    "\1\u0120\4\37\33\0\25\37\4\0\1\u0121\23\37\104\0"+
                    "\1\u0122\42\0\1\u0123\103\0\4\37\1\u0124\20\37\4\0"+
                    "\24\37\33\0\14\37\1\u0125\10\37\4\0\24\37\46\0"+
                    "\1\u0126\107\0\1\u0127\74\0\1\u0128\113\0\1\u0129\140\0"+
                    "\1\u012a\52\0\25\37\4\0\4\37\1\u012b\17\37\33\0"+
                    "\25\37\4\0\13\37\1\u012c\10\37\70\0\1\u012d\54\0"+
                    "\1\u012e\74\0\1\u012f\10\0\25\37\4\0\24\37\22\0"+
                    "\1\u0130\10\0\25\37\4\0\24\37\37\0\1\u0131\125\0"+
                    "\1\u0132\67\0\1\u0133\140\0\1\u0134\43\0\1\u0135\10\0"+
                    "\25\37\4\0\24\37\22\0\1\u0136\10\0\25\37\4\0"+
                    "\24\37\66\0\1\u0137\76\0\1\u0138\106\0\1\u0139\107\0"+
                    "\1\u013a\110\0\1\u013b\137\0\1\u013c\106\0\1\u013d\107\0"+
                    "\1\u013e\110\0\1\u013f\45\0\1\u0140\103\0\1\u0141\107\0"+
                    "\1\u0142\113\0\1\u0143\140\0\1\u0144\103\0\1\u0145\107\0"+
                    "\1\u0146\113\0\1\u0147\64\0\1\u0148\73\0\1\u0149\107\0"+
                    "\1\u014a\123\0\1\u014b\137\0\1\u014c\74\0\1\u014d\107\0"+
                    "\1\u014e\122\0\1\u014f\56\0\1\u0150\114\0\1\u0151\107\0"+
                    "\1\u0152\102\0\1\u0153\137\0\1\u0154\114\0\1\u0155\107\0"+
                    "\1\u0156\102\0\1\u0153\52\0\1\u0157\107\0\1\u0158\140\0"+
                    "\1\u0159\107\0\1\u015a\64\0\1\u015b\107\0\1\u015c\137\0"+
                    "\1\u015d\107\0\1\u015e\56\0\1\u015f\107\0\1\u0160\137\0"+
                    "\1\u015f\107\0\1\u0160\12\0";

    private static int [] zzUnpacktrans() {
        int [] result = new int[21384];
        int offset = 0;
        offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpacktrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /** Error code for "Unknown internal scanner error". */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /** Error code for "could not match input". */
    private static final int ZZ_NO_MATCH = 1;
    /** Error code for "pushback value was too large". */
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\3\0\2\11\2\1\1\11\2\1\1\11\2\1\2\11"+
                    "\1\1\1\11\3\1\1\11\22\1\2\11\16\1\4\11"+
                    "\3\1\2\11\3\0\2\11\1\1\1\0\4\11\47\1"+
                    "\3\11\2\0\47\1\3\0\45\1\1\0\1\11\41\1"+
                    "\1\0\22\1\4\0\12\1\1\0\2\1\6\0\2\1"+
                    "\2\0\2\1\3\0\1\11\2\0\2\1\2\0\2\1"+
                    "\1\11\4\0\2\1\4\0\2\11\35\0\1\11\2\0"+
                    "\2\11\12\0\2\11";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[352];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** Input device. */
    private java.io.Reader zzReader;

    /** Current state of the DFA. */
    private int zzState;

    /** Current lexical state. */
    private int zzLexicalState = YYINITIAL;

    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

    /** Text position at the last accepting state. */
    private int zzMarkedPos;

    /** Current text position in the buffer. */
    private int zzCurrentPos;

    /** Marks the beginning of the {@link #yytext()} string in the buffer. */
    private int zzStartRead;

    /** Marks the last character in the buffer, that has been read from input. */
    private int zzEndRead;

    /**
     * Whether the scanner is at the end of file.
     * @see #yyatEOF
     */
    private boolean zzAtEOF;

    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /** Number of newlines encountered up to the start of the matched text. */
    private int yyline;

    /** Number of characters from the last newline up to the start of the matched text. */
    private int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    @SuppressWarnings("unused")
    private boolean zzEOFDone;

    /* user code: */
    /*************************************************************************
     * En esta sección se puede incluir código que se copiará textualmente
     * como parte de la definición de la clase del analizador léxico.
     * Típicamente serán variables de instancia o nuevos métodos de la clase.
     *************************************************************************/

    /* Variables para reconocer Strings */
    StringBuffer string = new StringBuffer();
    int string_yyline = 0;
    int string_yycolumn = 0;
    int comment_count = 0;

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public MiLexico(java.io.Reader in) {
        this.zzReader = in;
    }


    /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
    private int zzMaxBufferLen() {
        return Integer.MAX_VALUE;
    }

    /**  Whether the scanner buffer can grow to accommodate a larger token. */
    private boolean zzCanGrow() {
        return true;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
            /* if not, and it can grow: blow it up */
            char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            if (requested == 0) {
                throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
            }
            else {
                throw new java.io.IOException(
                        "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
            }
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    int c = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (char)c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
        if (zzBuffer.length > initBufferSize) {
            zzBuffer = new char[initBufferSize];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition() {
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }


    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF() {
        return zzAtEOF;
    }


    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
    }


    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     *
     * @return the character at {@code position}.
     */
    public final char yycharat(int position) {
        return zzBuffer[zzStartRead + position];
    }


    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *     {@link #yylength()}.
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }




    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @exception java.io.IOException if any I/O-Error occurs.
     */
    public MiToken yylex() throws java.io.IOException
    {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead  ;
                 zzCurrentPosL < zzMarkedPosL ;
                 zzCurrentPosL += zzCharCount ) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                switch (zzLexicalState) {
                    case CADENA: {
                        throw new ar.edu.unnoba.comp.jflextp.exceptions.EOFLexerException("Fin de archivo dentro de la cadena: \n" +
                                string.toString());
                    }  // fall though
                    case 353: break;
                    case COMENTARIO: {
                        throw new ar.edu.unnoba.comp.jflextp.exceptions.EOFLexerException("Comentario sin balancear");
                    }  // fall though
                    case 354: break;
                    default:
                        return null;
                }
            }
            else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1:
                    { throw new ar.edu.unnoba.comp.jflextp.exceptions.LexerException("Carácter inválido <"+yytext()+">");
                    }
                    // fall through
                    case 65: break;
                    case 2:
                    { /* ignore */
                    }
                    // fall through
                    case 66: break;
                    case 3:
                    { string.setLength(0);
                        string_yyline = this.yyline;
                        string_yycolumn = this.yycolumn;
                        yybegin(CADENA);
                    }
                    // fall through
                    case 67: break;
                    case 4:
                    { return token("OPPARENT", yytext());
                    }
                    // fall through
                    case 68: break;
                    case 5:
                    { return token("CLPARENT", yytext());
                    }
                    // fall through
                    case 69: break;
                    case 6:
                    { return token("MP", yytext());
                    }
                    // fall through
                    case 70: break;
                    case 7:
                    { return token("PLUS", yytext());
                    }
                    // fall through
                    case 71: break;
                    case 8:
                    { return token("COMA", yytext());
                    }
                    // fall through
                    case 72: break;
                    case 9:
                    { return token("DASH", yytext());
                    }
                    // fall through
                    case 73: break;
                    case 10:
                    { return token("DV", yytext());
                    }
                    // fall through
                    case 74: break;
                    case 11:
                    { return token("INTEGER_LITERAL", yytext());
                    }
                    // fall through
                    case 75: break;
                    case 12:
                    { return token("DOS_PUNTOS", yytext());
                    }
                    // fall through
                    case 76: break;
                    case 13:
                    { return token("PUNTO_COMA", yytext());
                    }
                    // fall through
                    case 77: break;
                    case 14:
                    { return token("LESS", yytext());
                    }
                    // fall through
                    case 78: break;
                    case 15:
                    { return token("GREATER", yytext());
                    }
                    // fall through
                    case 79: break;
                    case 16:
                    { return token("ID", yytext());
                    }
                    // fall through
                    case 80: break;
                    case 17:
                    { return token("OPBRACKETS", yytext());
                    }
                    // fall through
                    case 81: break;
                    case 18:
                    { return token("CLCUBRACKETS", yytext());
                    }
                    // fall through
                    case 82: break;
                    case 19:
                    { return token("CLBRACKETS", yytext());
                    }
                    // fall through
                    case 83: break;
                    case 20:
                    { return token("OPCUBRACKETS", yytext());
                    }
                    // fall through
                    case 84: break;
                    case 21:
                    { string.append(yytext());
                    }
                    // fall through
                    case 85: break;
                    case 22:
                    { yybegin(YYINITIAL);
                        return token("STRING_LITERAL",
                                string_yyline, string_yycolumn,
                                string.toString());
                    }
                    // fall through
                    case 86: break;
                    case 23:
                    { return token("DIFFERENT", yytext());
                    }
                    // fall through
                    case 87: break;
                    case 24:
                    { comment_count = 1;
                        yybegin(COMENTARIO);
                    }
                    // fall through
                    case 88: break;
                    case 25:
                    { throw new ar.edu.unnoba.comp.jflextp.exceptions.CloseCommentException("Cierre de comentario inválido \n");
                    }
                    // fall through
                    case 89: break;
                    case 26:
                    { return token("PLUSPLUS", yytext());
                    }
                    // fall through
                    case 90: break;
                    case 27:
                    { return token("FLOAT_LITERAL", yytext());
                    }
                    // fall through
                    case 91: break;
                    case 28:
                    { return token("EQ",   yytext());
                    }
                    // fall through
                    case 92: break;
                    case 29:
                    { return token("LEQ", yytext());
                    }
                    // fall through
                    case 93: break;
                    case 30:
                    { return token("EQEQ", yytext());
                    }
                    // fall through
                    case 94: break;
                    case 31:
                    { return token("GEQ", yytext());
                    }
                    // fall through
                    case 95: break;
                    case 32:
                    { return token("OR", yytext());
                    }
                    // fall through
                    case 96: break;
                    case 33:
                    { string.append("\"") ;
                    }
                    // fall through
                    case 97: break;
                    case 34:
                    { comment_count = comment_count + 1;
                    }
                    // fall through
                    case 98: break;
                    case 35:
                    { comment_count = comment_count - 1;
                        if(comment_count == 0) {
                            yybegin(YYINITIAL);
                        }
                    }
                    // fall through
                    case 99: break;
                    case 36:
                    { return token("AND", yytext());
                    }
                    // fall through
                    case 100: break;
                    case 37:
                    { return token("END", yytext());
                    }
                    // fall through
                    case 101: break;
                    case 38:
                    { return token("NOT", yytext());
                    }
                    // fall through
                    case 102: break;
                    case 39:
                    { return token("ELSE", yytext());
                    }
                    // fall through
                    case 103: break;
                    case 40:
                    { return token("SHOW", yytext());
                    }
                    // fall through
                    case 104: break;
                    case 41:
                    { return token("THEN", yytext());
                    }
                    // fall through
                    case 105: break;
                    case 42:
                    { return token("TRUE", yytext());
                    }
                    // fall through
                    case 106: break;
                    case 43:
                    { return token("DUPLA_LITERAL", yytext());
                    }
                    // fall through
                    case 107: break;
                    case 44:
                    { return token("BREAK", yytext());
                    }
                    // fall through
                    case 108: break;
                    case 45:
                    { return token("DUPLE", yytext());
                    }
                    // fall through
                    case 109: break;
                    case 46:
                    { return token("FALSE", yytext());
                    }
                    // fall through
                    case 110: break;
                    case 47:
                    { return token("FLOAT", yytext());
                    }
                    // fall through
                    case 111: break;
                    case 48:
                    { return token("PROMR", yytext());
                    }
                    // fall through
                    case 112: break;
                    case 49:
                    { return token("UNTIL", yytext());
                    }
                    // fall through
                    case 113: break;
                    case 50:
                    { return token("REPEAT", yytext());
                    }
                    // fall through
                    case 114: break;
                    case 51:
                    { return token("UNLESS", yytext());
                    }
                    // fall through
                    case 115: break;
                    case 52:
                    { return token("BOOLEAN", yytext());
                    }
                    // fall through
                    case 116: break;
                    case 53:
                    { return token("INTEGER", yytext());
                    }
                    // fall through
                    case 117: break;
                    case 54:
                    { return token("ABSTRACT", yytext());
                    }
                    // fall through
                    case 118: break;
                    case 55:
                    { return token("CONTINUE", yytext());
                    }
                    // fall through
                    case 119: break;
                    case 56:
                    { return token("INPUT_INT", yytext());
                    }
                    // fall through
                    case 120: break;
                    case 57:
                    { return token("INPUT_BOOL", yytext());
                    }
                    // fall through
                    case 121: break;
                    case 58:
                    { return token("INPUT_DUPLE", yytext());
                    }
                    // fall through
                    case 122: break;
                    case 59:
                    { return token("INPUT_FLOAT", yytext());
                    }
                    // fall through
                    case 123: break;
                    case 60:
                    { return token("DECLARE_SECTION", yytext());
                    }
                    // fall through
                    case 124: break;
                    case 61:
                    { return token("PROGRAM_SECTION", yytext());
                    }
                    // fall through
                    case 125: break;
                    case 62:
                    { return token("DECLARE.SECTION", yytext());
                    }
                    // fall through
                    case 126: break;
                    case 63:
                    { return token("ENDDECLARE.SECTION", yytext());
                    }
                    // fall through
                    case 127: break;
                    case 64:
                    { return token("ENDPROGRAM_SECTION", yytext());
                    }
                    // fall through
                    case 128: break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
