// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: target/classes/lexico.flex

package ar.edu.unnoba.comp.compilertp;

import java_cup.sym;
import java.util.ArrayList;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class MiLexico implements java_cup.runtime.Scanner {

    /** This character denotes the end of file. */
    public static final int YYEOF = -1;

    /** Initial size of the lookahead buffer. */
    private static final int ZZ_BUFFERSIZE = 16384;

    // Lexical states.
    public static final int YYINITIAL = 0;
    public static final int CADENA = 2;
    public static final int COMENTARIO = 4;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     *                  at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0,  0,  1,  1,  2, 2
    };

    /**
     * Top-level table for translating characters to character classes
     */
    private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

    private static final String ZZ_CMAP_TOP_PACKED_0 =
            "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
                    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
                    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
                    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
                    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\2\u1f00\1\u2100\4\u1f00\1\u2200"+
                    "\1\u2300\1\u2400\1\u1f00\1\u2500\1\u2600\1\u2700\1\u1f00\31\u0100"+
                    "\1\u2800\121\u0100\1\u2900\4\u0100\1\u2a00\1\u0100\1\u2b00\1\u2c00"+
                    "\1\u2d00\1\u2e00\1\u2f00\1\u3000\53\u0100\1\u3100\10\u3200\31\u1f00"+
                    "\1\u0100\1\u3300\1\u3400\1\u0100\1\u3500\1\u3600\1\u3700\1\u3800"+
                    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u0100\1\u3e00\1\u3f00"+
                    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
                    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00"+
                    "\1\u5000\1\u5100\1\u1f00\1\u5200\1\u5300\1\u5400\1\u5500\3\u0100"+
                    "\1\u5600\1\u5700\1\u5800\12\u1f00\4\u0100\1\u5900\17\u1f00\2\u0100"+
                    "\1\u5a00\41\u1f00\2\u0100\1\u5b00\1\u5c00\2\u1f00\1\u5d00\1\u5e00"+
                    "\27\u0100\1\u5f00\2\u0100\1\u6000\45\u1f00\1\u0100\1\u6100\1\u6200"+
                    "\11\u1f00\1\u6300\25\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\1\u6800"+
                    "\1\u6900\11\u1f00\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00\2\u1f00"+
                    "\1\u6e00\1\u6f00\1\u7000\2\u1f00\1\u7100\16\u1f00\246\u0100\1\u7200"+
                    "\20\u0100\1\u7300\1\u7400\25\u0100\1\u7500\34\u0100\1\u7600\14\u1f00"+
                    "\2\u0100\1\u7700\u0e05\u1f00";

    private static int [] zzUnpackcmap_top() {
        int [] result = new int[4352];
        int offset = 0;
        offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Second-level tables for translating characters to character classes
     */
    private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

    private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
            "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
                    "\1\7\1\10\1\11\4\0\1\12\1\13\1\14\1\15"+
                    "\1\16\1\17\1\20\1\21\1\22\11\23\1\24\1\25"+
                    "\1\26\1\27\1\30\2\0\1\31\1\32\1\33\1\34"+
                    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
                    "\1\45\1\46\1\47\1\50\1\42\1\51\1\52\1\53"+
                    "\1\54\1\42\1\55\3\42\1\56\1\57\1\60\1\0"+
                    "\1\61\1\0\14\42\1\62\1\42\1\63\1\64\1\42"+
                    "\1\65\10\42\12\0\1\3\32\0\1\66\11\0\1\42"+
                    "\7\0\2\67\1\0\1\42\3\0\1\67\1\42\1\0"+
                    "\3\67\1\0\27\42\1\0\37\42\1\0\u01ca\42\4\0"+
                    "\14\42\16\0\5\42\7\0\1\42\1\0\1\42\201\0"+
                    "\5\42\1\0\2\42\2\0\4\42\1\0\1\42\6\0"+
                    "\1\42\1\0\3\42\1\0\1\42\1\0\24\42\1\0"+
                    "\123\42\1\0\213\42\10\0\246\42\1\0\46\42\2\0"+
                    "\1\42\6\0\51\42\107\0\33\42\4\0\4\42\55\0"+
                    "\53\42\25\0\12\70\4\0\2\42\1\0\143\42\1\0"+
                    "\1\42\17\0\2\42\7\0\2\42\12\70\3\42\2\0"+
                    "\1\42\20\0\1\42\1\0\36\42\35\0\131\42\13\0"+
                    "\1\42\16\0\12\70\41\42\11\0\2\42\4\0\1\42"+
                    "\5\0\26\42\4\0\1\42\11\0\1\42\3\0\1\42"+
                    "\27\0\31\42\7\0\13\42\65\0\25\42\1\0\10\42"+
                    "\106\0\66\42\3\0\1\42\22\0\1\42\7\0\12\42"+
                    "\4\0\12\70\1\0\20\42\4\0\10\42\2\0\2\42"+
                    "\2\0\26\42\1\0\7\42\1\0\1\42\3\0\4\42"+
                    "\3\0\1\42\20\0\1\42\15\0\2\42\1\0\3\42"+
                    "\4\0\12\70\2\42\2\0\6\67\2\0\1\42\10\0"+
                    "\6\42\4\0\2\42\2\0\26\42\1\0\7\42\1\0"+
                    "\2\42\1\0\2\42\1\0\2\42\37\0\4\42\1\0"+
                    "\1\42\7\0\12\70\2\0\3\42\20\0\11\42\1\0"+
                    "\3\42\1\0\26\42\1\0\7\42\1\0\2\42\1\0"+
                    "\5\42\3\0\1\42\22\0\1\42\17\0\2\42\4\0"+
                    "\12\70\11\0\1\42\13\0\10\42\2\0\2\42\2\0"+
                    "\26\42\1\0\7\42\1\0\2\42\1\0\5\42\3\0"+
                    "\1\42\36\0\2\42\1\0\3\42\4\0\12\70\1\0"+
                    "\1\42\6\67\13\0\1\42\1\0\6\42\3\0\3\42"+
                    "\1\0\4\42\3\0\2\42\1\0\1\42\1\0\2\42"+
                    "\3\0\2\42\3\0\3\42\3\0\14\42\26\0\1\42"+
                    "\25\0\12\70\3\67\22\0\10\42\1\0\3\42\1\0"+
                    "\27\42\1\0\20\42\3\0\1\42\32\0\3\42\5\0"+
                    "\2\42\4\0\12\70\10\0\7\67\1\0\1\42\4\0"+
                    "\10\42\1\0\3\42\1\0\27\42\1\0\12\42\1\0"+
                    "\5\42\3\0\1\42\40\0\1\42\1\0\2\42\4\0"+
                    "\12\70\1\0\2\42\22\0\10\42\1\0\3\42\1\0"+
                    "\51\42\2\0\1\42\20\0\1\42\5\0\3\42\1\0"+
                    "\7\67\3\42\4\0\12\70\11\67\1\0\6\42\5\0"+
                    "\22\42\3\0\30\42\1\0\11\42\1\0\1\42\2\0"+
                    "\7\42\37\0\12\70\21\0\60\42\1\0\2\42\14\0"+
                    "\7\42\11\0\12\70\47\0\2\42\1\0\1\42\1\0"+
                    "\5\42\1\0\30\42\1\0\1\42\1\0\12\42\1\0"+
                    "\2\42\11\0\1\42\2\0\5\42\1\0\1\42\11\0"+
                    "\12\70\2\0\4\42\40\0\1\42\37\0\12\70\12\67"+
                    "\14\0\10\42\1\0\44\42\33\0\5\42\163\0\53\42"+
                    "\24\0\1\42\12\70\6\0\6\42\4\0\4\42\3\0"+
                    "\1\42\3\0\2\42\7\0\3\42\4\0\15\42\14\0"+
                    "\1\42\1\0\12\70\6\0\46\42\1\0\1\42\5\0"+
                    "\1\42\2\0\53\42\1\0\115\42\1\0\4\42\2\0"+
                    "\7\42\1\0\1\42\1\0\4\42\2\0\51\42\1\0"+
                    "\4\42\2\0\41\42\1\0\4\42\2\0\7\42\1\0"+
                    "\1\42\1\0\4\42\2\0\17\42\1\0\71\42\1\0"+
                    "\4\42\2\0\103\42\16\0\24\67\3\0\20\42\20\0"+
                    "\126\42\2\0\6\42\3\0\u016c\42\2\0\21\42\1\66"+
                    "\32\42\5\0\113\42\3\0\3\67\10\42\7\0\15\42"+
                    "\1\0\4\42\16\0\22\42\16\0\22\42\16\0\15\42"+
                    "\1\0\3\42\17\0\64\42\43\0\1\42\4\0\1\42"+
                    "\3\0\12\70\6\0\12\67\26\0\12\70\6\0\131\42"+
                    "\7\0\5\42\2\0\42\42\1\0\1\42\5\0\106\42"+
                    "\12\0\37\42\47\0\12\70\36\42\2\0\5\42\13\0"+
                    "\54\42\4\0\32\42\6\0\12\70\1\67\45\0\27\42"+
                    "\11\0\65\42\53\0\12\70\6\0\12\70\15\0\1\42"+
                    "\135\0\57\42\21\0\7\42\4\0\12\70\51\0\36\42"+
                    "\15\0\2\42\12\70\54\42\32\0\44\42\34\0\12\70"+
                    "\3\0\3\42\12\70\44\42\2\0\11\42\7\0\53\42"+
                    "\2\0\3\42\51\0\4\42\1\0\6\42\1\0\2\42"+
                    "\3\0\1\42\5\0\300\42\100\0\26\42\2\0\6\42"+
                    "\2\0\46\42\2\0\6\42\2\0\10\42\1\0\1\42"+
                    "\1\0\1\42\1\0\1\42\1\0\37\42\2\0\65\42"+
                    "\1\0\7\42\1\0\1\42\3\0\3\42\1\0\7\42"+
                    "\3\0\4\42\2\0\6\42\4\0\15\42\5\0\3\42"+
                    "\1\0\7\42\3\0\13\66\35\0\2\3\5\0\1\66"+
                    "\57\0\1\66\20\0\1\67\1\42\2\0\6\67\5\0"+
                    "\1\42\12\67\6\0\15\42\145\0\1\42\4\0\1\42"+
                    "\2\0\12\42\1\0\1\42\3\0\5\42\6\0\1\42"+
                    "\1\0\1\42\1\0\1\42\1\0\4\42\1\0\13\42"+
                    "\2\0\4\42\5\0\5\42\4\0\1\42\1\0\63\67"+
                    "\2\42\5\67\u01d6\0\74\67\116\0\26\67\166\0\36\67"+
                    "\154\0\57\42\1\0\57\42\1\0\205\42\6\0\4\42"+
                    "\3\0\2\42\11\0\1\67\2\0\46\42\1\0\1\42"+
                    "\5\0\1\42\2\0\70\42\7\0\1\42\20\0\27\42"+
                    "\11\0\7\42\1\0\7\42\1\0\7\42\1\0\7\42"+
                    "\1\0\7\42\1\0\7\42\1\0\7\42\1\0\7\42"+
                    "\120\0\1\42\320\0\1\66\4\0\2\42\1\67\31\0"+
                    "\11\67\7\0\5\42\2\0\3\67\2\42\4\0\126\42"+
                    "\6\0\3\42\1\0\132\42\1\0\4\42\5\0\53\42"+
                    "\1\0\136\42\3\0\4\67\12\0\33\42\65\0\20\42"+
                    "\40\0\12\67\36\0\10\67\1\0\17\67\40\0\12\67"+
                    "\47\0\17\67\100\0\266\42\112\0\360\42\20\0\215\42"+
                    "\103\0\56\42\2\0\15\42\3\0\20\42\12\70\2\42"+
                    "\24\0\57\42\20\0\37\42\2\0\106\42\12\67\47\0"+
                    "\11\42\2\0\147\42\2\0\65\42\2\0\5\42\60\0"+
                    "\13\42\1\0\3\42\1\0\4\42\1\0\27\42\15\0"+
                    "\6\67\12\0\64\42\16\0\62\42\34\0\12\70\30\0"+
                    "\6\42\3\0\1\42\1\0\2\42\1\0\12\70\34\42"+
                    "\12\0\27\42\31\0\35\42\7\0\57\42\34\0\1\42"+
                    "\12\70\6\0\5\42\1\0\12\42\12\70\5\42\1\0"+
                    "\51\42\27\0\3\42\1\0\10\42\4\0\12\70\6\0"+
                    "\27\42\3\0\1\42\3\0\62\42\1\0\1\42\3\0"+
                    "\2\42\2\0\5\42\2\0\1\42\1\0\1\42\30\0"+
                    "\3\42\2\0\13\42\7\0\3\42\14\0\6\42\2\0"+
                    "\6\42\2\0\6\42\11\0\7\42\1\0\7\42\1\0"+
                    "\53\42\1\0\14\42\10\0\163\42\15\0\12\70\6\0"+
                    "\244\42\14\0\27\42\4\0\61\42\4\0\u0100\71\156\42"+
                    "\2\0\152\42\46\0\7\42\14\0\5\42\5\0\1\42"+
                    "\1\0\12\42\1\0\15\42\1\0\5\42\1\0\1\42"+
                    "\1\0\2\42\1\0\2\42\1\0\154\42\41\0\153\42"+
                    "\22\0\100\42\2\0\66\42\50\0\14\42\164\0\5\42"+
                    "\1\0\207\42\23\0\12\70\7\0\32\42\6\0\32\42"+
                    "\13\0\131\42\3\0\6\42\2\0\6\42\2\0\6\42"+
                    "\2\0\3\42\43\0\14\42\1\0\32\42\1\0\23\42"+
                    "\1\0\2\42\1\0\17\42\2\0\16\42\42\0\173\42"+
                    "\14\0\55\67\14\0\71\67\21\0\2\67\364\0\35\42"+
                    "\3\0\61\42\20\0\33\67\4\0\40\42\4\67\11\0"+
                    "\24\42\1\67\10\42\1\67\5\0\46\42\12\0\36\42"+
                    "\2\0\44\42\4\0\10\42\1\0\5\67\52\0\236\42"+
                    "\2\0\12\70\6\0\44\42\4\0\44\42\4\0\50\42"+
                    "\10\0\64\42\234\0\67\42\11\0\26\42\12\0\10\42"+
                    "\230\0\6\42\2\0\1\42\1\0\54\42\1\0\2\42"+
                    "\3\0\1\42\2\0\27\42\2\0\10\67\27\42\2\0"+
                    "\7\67\37\42\10\0\11\67\60\0\23\42\1\0\2\42"+
                    "\5\0\5\67\26\42\6\67\4\0\32\42\106\0\70\42"+
                    "\4\0\2\67\2\42\20\67\2\0\56\67\1\42\17\0"+
                    "\4\42\1\0\3\42\1\0\35\42\12\0\11\67\27\0"+
                    "\35\42\2\67\1\0\35\42\3\67\40\0\10\42\1\0"+
                    "\34\42\6\0\5\67\20\0\66\42\12\0\26\42\2\0"+
                    "\10\67\23\42\5\0\10\67\22\42\27\0\7\67\120\0"+
                    "\111\42\67\0\63\42\15\0\63\42\7\0\6\67\44\42"+
                    "\14\0\12\70\u0126\0\37\67\201\0\35\42\12\67\1\42"+
                    "\10\0\26\42\13\0\4\67\213\0\27\42\14\0\65\42"+
                    "\32\0\24\67\12\70\23\0\55\42\40\0\31\42\7\0"+
                    "\12\70\11\0\44\42\17\0\12\70\4\0\1\42\13\0"+
                    "\43\42\3\0\1\42\14\0\60\42\16\0\4\42\13\0"+
                    "\12\70\1\42\1\0\1\42\4\0\24\67\13\0\22\42"+
                    "\1\0\31\42\124\0\7\42\1\0\1\42\1\0\4\42"+
                    "\1\0\17\42\1\0\12\42\7\0\57\42\21\0\12\70"+
                    "\13\0\10\42\2\0\2\42\2\0\26\42\1\0\7\42"+
                    "\1\0\2\42\1\0\5\42\3\0\1\42\22\0\1\42"+
                    "\14\0\5\42\236\0\65\42\22\0\4\42\5\0\12\70"+
                    "\5\0\1\42\40\0\60\42\24\0\2\42\1\0\1\42"+
                    "\10\0\12\70\246\0\57\42\51\0\4\42\44\0\60\42"+
                    "\24\0\1\42\13\0\12\70\46\0\53\42\15\0\1\42"+
                    "\7\0\12\70\66\0\33\42\25\0\12\70\2\67\304\0"+
                    "\54\42\164\0\100\42\12\70\11\67\14\0\1\42\240\0"+
                    "\10\42\2\0\47\42\20\0\1\42\1\0\1\42\34\0"+
                    "\1\42\12\0\50\42\7\0\1\42\25\0\1\42\13\0"+
                    "\56\42\23\0\1\42\42\0\71\42\7\0\11\42\1\0"+
                    "\45\42\21\0\1\42\17\0\12\70\23\67\5\0\36\42"+
                    "\160\0\7\42\1\0\2\42\1\0\46\42\25\0\1\42"+
                    "\11\0\12\70\6\0\6\42\1\0\2\42\1\0\40\42"+
                    "\16\0\1\42\7\0\12\70\u0136\0\23\42\315\0\25\67"+
                    "\53\0\232\42\146\0\157\67\21\0\304\42\274\0\57\42"+
                    "\321\0\107\42\271\0\71\42\7\0\37\42\1\0\12\70"+
                    "\146\0\36\42\22\0\60\42\20\0\4\42\14\0\12\70"+
                    "\1\0\7\67\1\0\25\42\5\0\23\42\260\0\100\42"+
                    "\27\67\151\0\113\42\5\0\1\42\102\0\15\42\100\0"+
                    "\2\42\1\0\1\42\34\0\370\42\10\0\363\42\15\0"+
                    "\37\42\61\0\3\42\21\0\4\42\10\0\u018c\42\4\0"+
                    "\153\42\5\0\15\42\3\0\11\42\7\0\12\42\u0146\0"+
                    "\24\67\154\0\31\67\207\0\125\42\1\0\107\42\1\0"+
                    "\2\42\2\0\1\42\2\0\2\42\2\0\4\42\1\0"+
                    "\14\42\1\0\1\42\1\0\7\42\1\0\101\42\1\0"+
                    "\4\42\2\0\10\42\1\0\7\42\1\0\34\42\1\0"+
                    "\4\42\1\0\5\42\1\0\1\42\3\0\7\42\1\0"+
                    "\u0154\42\2\0\31\42\1\0\31\42\1\0\37\42\1\0"+
                    "\31\42\1\0\37\42\1\0\31\42\1\0\37\42\1\0"+
                    "\31\42\1\0\37\42\1\0\31\42\1\0\10\42\2\0"+
                    "\62\70\55\42\12\0\7\42\2\0\12\70\4\0\1\42"+
                    "\u0171\0\54\42\4\0\12\70\6\0\305\42\2\0\11\67"+
                    "\60\0\104\42\7\0\1\42\4\0\12\70\u0117\0\73\67"+
                    "\1\0\3\67\1\0\4\67\114\0\55\67\1\0\17\67"+
                    "\302\0\4\42\1\0\33\42\1\0\2\42\1\0\1\42"+
                    "\2\0\1\42\1\0\12\42\1\0\4\42\1\0\1\42"+
                    "\1\0\1\42\6\0\1\42\4\0\1\42\1\0\1\42"+
                    "\1\0\1\42\1\0\3\42\1\0\2\42\1\0\1\42"+
                    "\2\0\1\42\1\0\1\42\1\0\1\42\1\0\1\42"+
                    "\1\0\1\42\1\0\2\42\1\0\1\42\2\0\4\42"+
                    "\1\0\7\42\1\0\4\42\1\0\4\42\1\0\1\42"+
                    "\1\0\12\42\1\0\21\42\5\0\3\42\1\0\5\42"+
                    "\1\0\21\42\104\0\15\67\363\0\327\42\51\0\65\42"+
                    "\13\0\336\42\2\0\u0182\42\16\0\u0131\42\37\0\36\42"+
                    "\342\0";

    private static int [] zzUnpackcmap_blocks() {
        int [] result = new int[30720];
        int offset = 0;
        offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int [] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\3\0\1\1\2\2\1\1\1\3\1\2\1\4\1\5"+
                    "\1\6\1\7\1\10\1\11\1\12\1\13\2\14\1\15"+
                    "\1\16\1\17\1\1\1\20\20\21\1\22\1\23\1\21"+
                    "\1\24\1\25\1\26\1\27\1\30\1\31\2\2\1\32"+
                    "\1\0\1\33\1\0\1\34\1\35\1\0\1\36\1\37"+
                    "\1\40\1\41\15\21\1\42\10\21\1\43\1\44\1\45"+
                    "\1\0\1\46\6\21\1\47\3\21\1\50\1\21\1\51"+
                    "\11\21\2\0\5\21\1\52\5\21\1\53\3\21\1\54"+
                    "\1\21\1\55\1\56\3\21\1\0\1\21\1\57\2\21"+
                    "\1\60\2\21\1\61\1\62\2\21\1\63\3\21\1\64"+
                    "\1\0\1\65\1\0\7\21\1\66\1\67\1\70\1\71"+
                    "\11\21\1\72\1\0\6\21\2\0\5\21\1\73\2\0"+
                    "\2\21\1\74\2\21\4\0\1\75\1\76\15\0\1\77"+
                    "\2\0\1\100\4\0\1\101\1\102";

    private static int [] zzUnpackAction() {
        int [] result = new int[227];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\72\0\164\0\256\0\256\0\350\0\u0122\0\256"+
                    "\0\u015c\0\u0196\0\256\0\u01d0\0\256\0\256\0\256\0\u020a"+
                    "\0\256\0\u0244\0\u027e\0\u02b8\0\256\0\u02f2\0\u032c\0\u0366"+
                    "\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc\0\u0536"+
                    "\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706"+
                    "\0\256\0\256\0\u0740\0\256\0\256\0\256\0\256\0\256"+
                    "\0\u077a\0\u07b4\0\u07ee\0\256\0\u0828\0\256\0\u0862\0\256"+
                    "\0\u020a\0\u0244\0\256\0\256\0\256\0\256\0\u089c\0\u08d6"+
                    "\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
                    "\0\u0ae0\0\u0b1a\0\u0b54\0\u04fc\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c"+
                    "\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\256\0\256\0\256\0\u0d5e"+
                    "\0\u04fc\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4"+
                    "\0\u0f2e\0\u0f68\0\u0fa2\0\u04fc\0\u0fdc\0\u04fc\0\u1016\0\u1050"+
                    "\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172\0\u11ac\0\u11e6\0\u1220"+
                    "\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u04fc\0\u13b6"+
                    "\0\u13f0\0\u142a\0\u1464\0\u149e\0\u04fc\0\u14d8\0\u1512\0\u154c"+
                    "\0\u04fc\0\u1586\0\u04fc\0\u04fc\0\u15c0\0\u15fa\0\u1634\0\u166e"+
                    "\0\u16a8\0\u04fc\0\u16e2\0\u171c\0\u04fc\0\u1756\0\u1790\0\u04fc"+
                    "\0\u04fc\0\u17ca\0\u1804\0\u04fc\0\u183e\0\u1878\0\u18b2\0\u04fc"+
                    "\0\u18ec\0\256\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48"+
                    "\0\u1a82\0\u1abc\0\u04fc\0\u04fc\0\u04fc\0\u04fc\0\u1af6\0\u1b30"+
                    "\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u04fc"+
                    "\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96"+
                    "\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e\0\u1fb8\0\u1ff2\0\u04fc\0\u202c"+
                    "\0\u2066\0\u20a0\0\u20da\0\u04fc\0\u2114\0\u214e\0\u2188\0\u21c2"+
                    "\0\u21fc\0\u2236\0\u04fc\0\u04fc\0\u2270\0\u22aa\0\u22e4\0\u231e"+
                    "\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u24b4\0\u24ee"+
                    "\0\u2528\0\256\0\u2562\0\u259c\0\256\0\u25d6\0\u2610\0\u264a"+
                    "\0\u2684\0\256\0\256";

    private static int [] zzUnpackRowMap() {
        int [] result = new int[227];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int [] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int [] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\4\2\5\1\4\1\5\1\6\1\5\1\7\1\10"+
                    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
                    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
                    "\1\31\1\32\1\33\1\34\1\35\1\36\2\37\1\40"+
                    "\2\37\1\41\1\37\1\42\1\43\1\44\1\45\1\46"+
                    "\1\47\1\50\1\37\1\51\1\4\1\52\1\4\2\37"+
                    "\1\53\1\37\4\4\1\54\1\55\1\56\2\54\1\57"+
                    "\2\54\1\60\46\54\1\61\12\54\12\5\1\62\1\5"+
                    "\1\63\55\5\74\0\1\5\116\0\1\64\42\0\2\11"+
                    "\1\5\2\0\1\6\63\11\2\0\6\65\5\0\1\66"+
                    "\5\0\2\67\42\0\1\65\1\0\1\67\14\0\1\70"+
                    "\100\0\2\71\66\0\1\71\1\0\2\72\66\0\1\71"+
                    "\1\0\2\23\75\0\1\73\71\0\1\74\71\0\1\75"+
                    "\71\0\1\76\64\0\2\37\5\0\15\37\1\77\7\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\16\37"+
                    "\1\100\1\37\1\101\4\37\3\0\5\37\1\0\2\37"+
                    "\23\0\2\37\5\0\16\37\1\102\6\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\4\37\1\103\16\37"+
                    "\1\104\1\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\13\37\1\105\1\37\1\106\7\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\1\107\12\37\1\110"+
                    "\11\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\25\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\15\37\1\111\7\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\10\37\1\112\14\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\16\37\1\113\6\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\20\37\1\114"+
                    "\4\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\20\37\1\115\4\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\4\37\1\116\20\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\7\37\1\117\12\37\1\120"+
                    "\2\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\7\37\1\121\10\37\1\122\4\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\15\37\1\123\7\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\25\37\3\0"+
                    "\4\37\1\124\1\0\2\37\11\0\1\125\75\0\1\126"+
                    "\70\0\1\127\57\0\6\65\13\0\2\67\42\0\1\65"+
                    "\1\0\1\67\21\0\1\130\1\0\2\67\44\0\1\67"+
                    "\23\0\2\37\5\0\3\37\1\131\21\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\16\37\1\132\6\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\4\37"+
                    "\1\133\20\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\15\37\1\134\7\37\3\0\5\37\1\0\2\37"+
                    "\23\0\2\37\5\0\2\37\1\135\22\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\17\37\1\136\5\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\21\37"+
                    "\1\137\3\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\3\37\1\140\21\37\3\0\5\37\1\0\2\37"+
                    "\23\0\2\37\5\0\13\37\1\141\11\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\16\37\1\142\6\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\17\37"+
                    "\1\143\2\37\1\144\2\37\3\0\5\37\1\0\2\37"+
                    "\23\0\2\37\5\0\21\37\1\145\3\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\22\37\1\146\2\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\16\37"+
                    "\1\147\6\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\17\37\1\150\5\37\3\0\5\37\1\0\2\37"+
                    "\23\0\2\37\5\0\16\37\1\151\6\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\20\37\1\152\4\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\4\37"+
                    "\1\153\20\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\23\37\1\154\1\37\3\0\5\37\1\0\2\37"+
                    "\23\0\2\37\5\0\13\37\1\155\6\37\1\156\2\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\25\37"+
                    "\3\0\2\37\1\157\2\37\1\0\2\37\2\0\6\160"+
                    "\7\0\1\161\3\0\2\130\42\0\1\160\1\0\1\130"+
                    "\23\0\2\37\5\0\13\37\1\162\11\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\1\163\24\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\22\37\1\164"+
                    "\2\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\13\37\1\165\11\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\13\37\1\166\11\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\4\37\1\167\20\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\3\37\1\170"+
                    "\13\37\1\171\5\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\21\37\1\172\3\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\1\173\24\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\23\37\1\174\1\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\22\37"+
                    "\1\175\2\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\6\37\1\176\5\37\1\177\10\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\4\37\1\200\20\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\24\37"+
                    "\1\201\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\10\37\1\202\14\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\15\37\1\203\7\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\4\37\1\204\20\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\4\37\1\205"+
                    "\20\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\10\37\1\206\14\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\25\37\3\0\1\37\1\207\3\37\1\0"+
                    "\2\37\2\0\6\160\7\0\1\161\47\0\1\160\4\0"+
                    "\6\161\13\0\2\210\42\0\1\161\1\0\1\210\23\0"+
                    "\2\37\5\0\4\37\1\211\20\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\12\37\1\212\12\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\10\37\1\213"+
                    "\14\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\1\214\24\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\4\37\1\215\20\37\3\0\5\37\1\0\2\37"+
                    "\23\0\2\37\5\0\4\37\1\216\20\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\20\37\1\217\4\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\4\37"+
                    "\1\220\20\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\22\37\1\221\2\37\3\0\5\37\1\0\2\37"+
                    "\23\0\2\37\5\0\22\37\1\222\2\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\20\37\1\223\4\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\20\37"+
                    "\1\224\4\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\1\225\24\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\15\37\1\226\7\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\21\37\1\227\3\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\13\37\1\230"+
                    "\11\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\25\37\3\0\4\37\1\224\1\0\2\37\2\0\6\231"+
                    "\4\0\1\232\4\0\1\233\1\0\2\210\42\0\1\231"+
                    "\1\0\1\210\23\0\2\37\5\0\1\234\24\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\15\37\1\235"+
                    "\7\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\20\37\1\236\4\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\2\37\1\237\22\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\16\37\1\240\6\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\25\37\3\0"+
                    "\1\241\4\37\1\0\2\37\23\0\2\37\5\0\1\242"+
                    "\24\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\22\37\1\243\2\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\6\37\1\244\16\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\21\37\1\245\3\37\3\0"+
                    "\5\37\1\0\2\37\2\0\6\231\4\0\1\232\52\0"+
                    "\1\231\4\0\6\231\4\0\1\232\6\0\2\233\42\0"+
                    "\1\231\1\0\1\233\23\0\2\37\5\0\15\37\1\246"+
                    "\7\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\23\37\1\247\1\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\4\37\1\250\20\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\13\37\1\251\11\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\6\37\1\252"+
                    "\16\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\1\37\1\253\1\37\1\254\1\37\1\255\2\37\1\256"+
                    "\14\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\14\37\1\257\10\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\4\37\1\260\20\37\3\0\5\37\1\0"+
                    "\2\37\21\0\1\261\1\0\2\37\5\0\25\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\1\262\24\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\20\37"+
                    "\1\263\4\37\3\0\5\37\1\0\2\37\23\0\2\37"+
                    "\5\0\16\37\1\264\6\37\3\0\5\37\1\0\2\37"+
                    "\23\0\2\37\5\0\23\37\1\265\1\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\13\37\1\266\11\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\15\37"+
                    "\1\267\7\37\3\0\5\37\1\0\2\37\21\0\1\270"+
                    "\1\0\2\37\5\0\25\37\3\0\5\37\1\0\2\37"+
                    "\53\0\1\271\41\0\2\37\5\0\20\37\1\272\4\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\1\273"+
                    "\24\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\16\37\1\274\6\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\17\37\1\275\5\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\16\37\1\276\6\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\22\37\1\277"+
                    "\2\37\3\0\5\37\1\0\2\37\53\0\1\300\54\0"+
                    "\1\301\56\0\2\37\5\0\4\37\1\302\20\37\3\0"+
                    "\5\37\1\0\2\37\23\0\2\37\5\0\14\37\1\303"+
                    "\10\37\3\0\5\37\1\0\2\37\23\0\2\37\5\0"+
                    "\13\37\1\304\11\37\3\0\5\37\1\0\2\37\23\0"+
                    "\2\37\5\0\13\37\1\305\11\37\3\0\5\37\1\0"+
                    "\2\37\23\0\2\37\5\0\1\306\24\37\3\0\5\37"+
                    "\1\0\2\37\36\0\1\307\67\0\1\310\56\0\1\311"+
                    "\1\0\2\37\5\0\25\37\3\0\5\37\1\0\2\37"+
                    "\21\0\1\312\1\0\2\37\5\0\25\37\3\0\5\37"+
                    "\1\0\2\37\23\0\2\37\5\0\4\37\1\313\20\37"+
                    "\3\0\5\37\1\0\2\37\23\0\2\37\5\0\22\37"+
                    "\1\314\2\37\3\0\5\37\1\0\2\37\34\0\1\315"+
                    "\111\0\1\316\70\0\1\317\71\0\1\320\72\0\1\321"+
                    "\57\0\1\322\65\0\1\323\71\0\1\324\75\0\1\325"+
                    "\77\0\1\326\55\0\1\327\71\0\1\330\105\0\1\331"+
                    "\70\0\1\332\76\0\1\333\71\0\1\334\64\0\1\335"+
                    "\64\0\1\336\71\0\1\337\77\0\1\340\71\0\1\341"+
                    "\70\0\1\342\71\0\1\343\23\0";

    private static int [] zzUnpackTrans() {
        int [] result = new int[9918];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /** Error code for "Unknown internal scanner error". */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    /** Error code for "could not match input". */
    private static final int ZZ_NO_MATCH = 1;
    /** Error code for "pushback value was too large". */
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /**
     * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
     * {@link #ZZ_PUSHBACK_2BIG} respectively.
     */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
     */
    private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\3\0\2\11\2\1\1\11\2\1\1\11\1\1\3\11"+
                    "\1\1\1\11\3\1\1\11\23\1\2\11\1\1\5\11"+
                    "\3\1\1\11\1\0\1\11\1\0\1\11\1\1\1\0"+
                    "\4\11\26\1\3\11\1\0\27\1\2\0\26\1\1\0"+
                    "\20\1\1\0\1\11\1\0\25\1\1\0\6\1\2\0"+
                    "\6\1\2\0\5\1\4\0\2\1\15\0\1\11\2\0"+
                    "\1\11\4\0\2\11";

    private static int [] zzUnpackAttribute() {
        int [] result = new int[227];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int [] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /** Input device. */
    private java.io.Reader zzReader;

    /** Current state of the DFA. */
    private int zzState;

    /** Current lexical state. */
    private int zzLexicalState = YYINITIAL;

    /**
     * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
     * string.
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /** Text position at the last accepting state. */
    private int zzMarkedPos;

    /** Current text position in the buffer. */
    private int zzCurrentPos;

    /** Marks the beginning of the {@link #yytext()} string in the buffer. */
    private int zzStartRead;

    /** Marks the last character in the buffer, that has been read from input. */
    private int zzEndRead;

    /**
     * Whether the scanner is at the end of file.
     * @see #yyatEOF
     */
    private boolean zzAtEOF;

    /**
     * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
     *
     * <p>When a lead/high surrogate has been read from the input stream into the final
     * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /** Number of newlines encountered up to the start of the matched text. */
    private int yyline;

    /** Number of characters from the last newline up to the start of the matched text. */
    private int yycolumn;

    /** Number of characters up to the start of the matched text. */
    @SuppressWarnings("unused")
    private long yychar;

    /** Whether the scanner is currently at the beginning of a line. */
    @SuppressWarnings("unused")
    private boolean zzAtBOL = true;

    /** Whether the user-EOF-code has already been executed. */
    private boolean zzEOFDone;

    /* user code: */
    /*************************************************************************
     * En esta sección se puede incluir código que se copiará textualmente
     * como parte de la definición de la clase del analizador léxico.
     * Típicamente serán variables de instancia o nuevos métodos de la clase.
     *************************************************************************/

    public ArrayList<MiToken> tablaDeSimbolos = new ArrayList<>();


    /* Variables para reconocer Strings */
    StringBuffer string = new StringBuffer();
    int string_yyline = 0;
    int string_yycolumn = 0;
    int comment_count = 0;

    private MiToken token(String nombre) {
        return new MiToken(nombre, this.yyline, this.yycolumn);
    }

    private MiToken token(String nombre, Object valor) {
        return new MiToken(nombre, this.yyline, this.yycolumn, valor);
    }

    private MiToken token(String nombre, int line, int column, Object valor) {
        return new MiToken(nombre, line, column, valor);
    }


    /**
     * Creates a new scanner
     *
     * @param   in  the java.io.Reader to read input from.
     */
    public MiLexico(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Translates raw input code points to DFA table row
     */
    private static int zzCMap(int input) {
        int offset = input & 255;
        return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
    }

    /**
     * Refills the input buffer.
     *
     * @return {@code false} iff there was new input.
     * @exception java.io.IOException  if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException(
                    "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
            if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                if (numRead == requested) { // We requested too few chars to encode a full Unicode character
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                } else {                    // There is room in the buffer for at least one more char
                    int c = zzReader.read();  // Expecting to read a paired low surrogate char
                    if (c == -1) {
                        return true;
                    } else {
                        zzBuffer[zzEndRead++] = (char)c;
                    }
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input reader.
     *
     * @throws java.io.IOException if the reader could not be closed.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true; // indicate end of file
        zzEndRead = zzStartRead; // invalidate buffer

        if (zzReader != null) {
            zzReader.close();
        }
    }


    /**
     * Resets the scanner to read from a new input stream.
     *
     * <p>Does not close the old reader.
     *
     * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
     * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
     *
     * <p>Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader The new input stream.
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzEOFDone = false;
        yyResetPosition();
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE) {
            zzBuffer = new char[ZZ_BUFFERSIZE];
        }
    }

    /**
     * Resets the input position.
     */
    private final void yyResetPosition() {
        zzAtBOL  = true;
        zzAtEOF  = false;
        zzCurrentPos = 0;
        zzMarkedPos = 0;
        zzStartRead = 0;
        zzEndRead = 0;
        zzFinalHighSurrogate = 0;
        yyline = 0;
        yycolumn = 0;
        yychar = 0L;
    }


    /**
     * Returns whether the scanner has reached the end of the reader it reads from.
     *
     * @return whether the scanner has reached EOF.
     */
    public final boolean yyatEOF() {
        return zzAtEOF;
    }


    /**
     * Returns the current lexical state.
     *
     * @return the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state.
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     *
     * @return the matched text.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
    }


    /**
     * Returns the character at the given position from the matched text.
     *
     * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
     *
     * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
     *
     * @return the character at {@code position}.
     */
    public final char yycharat(int position) {
        return zzBuffer[zzStartRead + position];
    }


    /**
     * How many characters were matched.
     *
     * @return the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos-zzStartRead;
    }


    /**
     * Reports an error that occurred while scanning.
     *
     * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
     * match-all fallback rule) this method will only be called with things that
     * "Can't Possibly Happen".
     *
     * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
     * scanner etc.).
     *
     * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
     *
     * @param errorCode the code of the error message to display.
     */
    private static void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * <p>They will be read again by then next call of the scanning method.
     *
     * @param number the number of characters to be read again. This number must not be greater than
     *     {@link #yylength()}.
     */
    public void yypushback(int number)  {
        if ( number > yylength() )
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() throws java.io.IOException {
        if (!zzEOFDone) {
            zzEOFDone = true;

            yyclose();    }
    }




    /**
     * Resumes scanning until the next regular expression is matched, the end of input is encountered
     * or an I/O-Error occurs.
     *
     * @return the next token.
     * @exception java.io.IOException if any I/O-Error occurs.
     */
    @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;

        int [] zzTransL = ZZ_TRANS;
        int [] zzRowMapL = ZZ_ROWMAP;
        int [] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead  ;
                 zzCurrentPosL < zzMarkedPosL ;
                 zzCurrentPosL += zzCharCount ) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':  // fall through
                    case '\u000C':  // fall through
                    case '\u0085':  // fall through
                    case '\u2028':  // fall through
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is
                // (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ( (zzAttributes & 1) == 1 ) {
                zzAction = zzState;
            }


            zzForAction: {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    }
                    else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else {
                        // store back cached positions
                        zzCurrentPos  = zzCurrentPosL;
                        zzMarkedPos   = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL  = zzCurrentPos;
                        zzMarkedPosL   = zzMarkedPos;
                        zzBufferL      = zzBuffer;
                        zzEndReadL     = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ( (zzAttributes & 1) == 1 ) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ( (zzAttributes & 8) == 8 ) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                switch (zzLexicalState) {
                    case CADENA: {
                        throw new ar.edu.unnoba.comp.compilertp.exceptions.EOFLexerException("Fin de archivo dentro de la cadena: \n" +
                                string.toString());
                    }  // fall though
                    case 228: break;
                    case COMENTARIO: {
                        throw new ar.edu.unnoba.comp.compilertp.exceptions.EOFLexerException("Comentario sin balancear: "+ yytext());
                    }  // fall though
                    case 229: break;
                    default:
                    { return new java_cup.runtime.Symbol(sym.EOF); }
                }
            }
            else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1:
                    { throw new ar.edu.unnoba.comp.compilertp.exceptions.LexerException("Carácter inválido <"+yytext()+">");
                    }
                    // fall through
                    case 67: break;
                    case 2:
                    { /* ignore */
                    }
                    // fall through
                    case 68: break;
                    case 3:
                    { string.setLength(0);
                        string_yyline = this.yyline;
                        string_yycolumn = this.yycolumn;
                        yybegin(CADENA);
                    }
                    // fall through
                    case 69: break;
                    case 4:
                    { return token("OPPARENT", yytext());
                    }
                    // fall through
                    case 70: break;
                    case 5:
                    { return token("CLPARENT", yytext());
                    }
                    // fall through
                    case 71: break;
                    case 6:
                    { return token("MULT", yytext());
                    }
                    // fall through
                    case 72: break;
                    case 7:
                    { return token("PLUS", yytext());
                    }
                    // fall through
                    case 73: break;
                    case 8:
                    { return token("COMA", yytext());
                    }
                    // fall through
                    case 74: break;
                    case 9:
                    { return token("MINUS", yytext());
                    }
                    // fall through
                    case 75: break;
                    case 10:
                    { return token("DOT");
                    }
                    // fall through
                    case 76: break;
                    case 11:
                    { return token("DIV", yytext());
                    }
                    // fall through
                    case 77: break;
                    case 12:
                    { return token("INTEGER_LITERAL", yytext());
                    }
                    // fall through
                    case 78: break;
                    case 13:
                    { return token("DOS_PUNTOS", yytext());
                    }
                    // fall through
                    case 79: break;
                    case 14:
                    { return token("PUNTO_COMA", yytext());
                    }
                    // fall through
                    case 80: break;
                    case 15:
                    { return token("LESS", yytext());
                    }
                    // fall through
                    case 81: break;
                    case 16:
                    { return token("GREATER", yytext());
                    }
                    // fall through
                    case 82: break;
                    case 17:
                    { return token("ID", yytext());
                    }
                    // fall through
                    case 83: break;
                    case 18:
                    { return token("OPBRACKETS", yytext());
                    }
                    // fall through
                    case 84: break;
                    case 19:
                    { return token("CLBRACKETS", yytext());
                    }
                    // fall through
                    case 85: break;
                    case 20:
                    { string.append(yytext());
                    }
                    // fall through
                    case 86: break;
                    case 21:
                    { string.append("\t");
                    }
                    // fall through
                    case 87: break;
                    case 22:
                    { string.append("\n");
                    }
                    // fall through
                    case 88: break;
                    case 23:
                    { string.append("\r");
                    }
                    // fall through
                    case 89: break;
                    case 24:
                    { yybegin(YYINITIAL);
                        return token("STRING_LITERAL",
                                string_yyline, string_yycolumn,
                                string.toString());
                    }
                    // fall through
                    case 90: break;
                    case 25:
                    { string.append("\\");
                    }
                    // fall through
                    case 91: break;
                    case 26:
                    { return token("DIFFERENT", yytext());
                    }
                    // fall through
                    case 92: break;
                    case 27:
                    { comment_count = 1;
                        yybegin(COMENTARIO);
                    }
                    // fall through
                    case 93: break;
                    case 28:
                    { throw new ar.edu.unnoba.comp.compilertp.exceptions.CloseCommentException("Cierre de comentario inválido \n");
                    }
                    // fall through
                    case 94: break;
                    case 29:
                    { return token("FLOAT_LITERAL", yytext());
                    }
                    // fall through
                    case 95: break;
                    case 30:
                    { return token("EQ",   yytext());
                    }
                    // fall through
                    case 96: break;
                    case 31:
                    { return token("LEQ", yytext());
                    }
                    // fall through
                    case 97: break;
                    case 32:
                    { return token("EQEQ", yytext());
                    }
                    // fall through
                    case 98: break;
                    case 33:
                    { return token("GEQ", yytext());
                    }
                    // fall through
                    case 99: break;
                    case 34:
                    { return token("OR", yytext());
                    }
                    // fall through
                    case 100: break;
                    case 35:
                    { string.append("\"");
                    }
                    // fall through
                    case 101: break;
                    case 36:
                    { comment_count = comment_count + 1;
                    }
                    // fall through
                    case 102: break;
                    case 37:
                    { comment_count = comment_count - 1;
                        if(comment_count == 0) {
                            yybegin(YYINITIAL);
                        }
                    }
                    // fall through
                    case 103: break;
                    case 38:
                    { return token("AND", yytext());
                    }
                    // fall through
                    case 104: break;
                    case 39:
                    { return token("END", yytext());
                    }
                    // fall through
                    case 105: break;
                    case 40:
                    { return token("INTEGER", yytext());
                    }
                    // fall through
                    case 106: break;
                    case 41:
                    { return token("NOT", yytext());
                    }
                    // fall through
                    case 107: break;
                    case 42:
                    { return token("ELSE", yytext());
                    }
                    // fall through
                    case 108: break;
                    case 43:
                    { return token("LIST");
                    }
                    // fall through
                    case 109: break;
                    case 44:
                    { return token("SHOW", yytext());
                    }
                    // fall through
                    case 110: break;
                    case 45:
                    { return token("THEN", yytext());
                    }
                    // fall through
                    case 111: break;
                    case 46:
                    { return token("TRUE", yytext());
                    }
                    // fall through
                    case 112: break;
                    case 47:
                    { return token("BREAK", yytext());
                    }
                    // fall through
                    case 113: break;
                    case 48:
                    { return token("DUPLE", yytext());
                    }
                    // fall through
                    case 114: break;
                    case 49:
                    { return token("FALSE", yytext());
                    }
                    // fall through
                    case 115: break;
                    case 50:
                    { return token("FLOAT", yytext());
                    }
                    // fall through
                    case 116: break;
                    case 51:
                    { return token("PROMR", yytext());
                    }
                    // fall through
                    case 117: break;
                    case 52:
                    { return token("UNTIL", yytext());
                    }
                    // fall through
                    case 118: break;
                    case 53:
                    { return token("DUPLA_LITERAL", yytext());
                    }
                    // fall through
                    case 119: break;
                    case 54:
                    { return token("REPEAT", yytext());
                    }
                    // fall through
                    case 120: break;
                    case 55:
                    { return token("STRING");
                    }
                    // fall through
                    case 121: break;
                    case 56:
                    { return token("UNLESS", yytext());
                    }
                    // fall through
                    case 122: break;
                    case 57:
                    { return token("BOOLEAN", yytext());
                    }
                    // fall through
                    case 123: break;
                    case 58:
                    { return token("CONTINUE", yytext());
                    }
                    // fall through
                    case 124: break;
                    case 59:
                    { return token("INPUT_INT", yytext());
                    }
                    // fall through
                    case 125: break;
                    case 60:
                    { return token("INPUT_BOOL", yytext());
                    }
                    // fall through
                    case 126: break;
                    case 61:
                    { return token("INPUT_DUPLE", yytext());
                    }
                    // fall through
                    case 127: break;
                    case 62:
                    { return token("INPUT_FLOAT", yytext());
                    }
                    // fall through
                    case 128: break;
                    case 63:
                    { return token("DECLARE_SECTION");
                    }
                    // fall through
                    case 129: break;
                    case 64:
                    { return token("PROGRAM_SECTION", yytext());
                    }
                    // fall through
                    case 130: break;
                    case 65:
                    { return token("ENDDECLARE_SECTION", yytext());
                    }
                    // fall through
                    case 131: break;
                    case 66:
                    { return token("ENDPROGRAM_SECTION", yytext());
                    }
                    // fall through
                    case 132: break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
